//                                               -*- C++ -*-
/**
 *  @file  MyClassImplementation.cxx
 *  @brief MyClassImplementation is some myclass type to illustrate how to add some classes in Open TURNS
 *
 *  (C) Copyright 2005-2007 EDF-EADS-Phimeca
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License.
 *
 *  This library is distributed in the hope that it will be useful
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 *  @author: $LastChangedBy$
 *  @date:   $LastChangedDate: 2008-10-31 11:52:04 +0100 (Fri, 31 Oct 2008) $
 *  Id:      $Id: MyClassImplementation.cxx 995 2008-10-31 10:52:04Z dutka $
 */
#include "MyClassImplementation.hxx"
#include "PersistentObjectFactory.hxx"

namespace MyClass {

  CLASSNAMEINIT(MyClassImplementation);

  static OT::Base::Common::Factory<MyClassImplementation> RegisteredFactory("MyClassImplementation");


  /* Default constructor */
  MyClassImplementation::MyClassImplementation()
    : OT::Base::Common::PersistentObject()
  {
    // Nothing to do
  }

  /* Virtual constructor method */
  MyClassImplementation * MyClassImplementation::clone() const
  {
    return new MyClassImplementation(*this);
  }
	
  /* String converter */
  OT::String MyClassImplementation::str() const
  {
    OT::OSS oss;
    oss << "class=" << MyClassImplementation::GetClassName()
	<< " name=" << getName();
    return oss;
  }

  /* Method save() stores the object through the StorageManager */
  void MyClassImplementation::save(const StorageManager::Advocate & adv) const
  {
    OT::Base::Common::PersistentObject::save( adv );
  }

  /* Method load() reloads the object from the StorageManager */
  void MyClassImplementation::load(const StorageManager::Advocate & adv)
  {
    OT::Base::Common::PersistentObject::load( adv );
  }


} /* Namespace MyClass */
