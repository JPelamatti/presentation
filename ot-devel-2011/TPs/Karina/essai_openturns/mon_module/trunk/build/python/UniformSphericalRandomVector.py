# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

"""
Open TURNS UniformSphericalRandomVector module is an example on how to include new classes in Open TURNS
"""

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_UniformSphericalRandomVector', [dirname(__file__)])
        except ImportError:
            import _UniformSphericalRandomVector
            return _UniformSphericalRandomVector
        if fp is not None:
            try:
                _mod = imp.load_module('_UniformSphericalRandomVector', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _UniformSphericalRandomVector = swig_import_helper()
    del swig_import_helper
else:
    import _UniformSphericalRandomVector
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


# Override the default SWIG function
def _swig_repr(self):
  return self.str()

import base
import common
import wrapper
import typ
import statistics
import graph
import func
import diff
import optim
import solver
import uncertainty
import model_dist
import experiment
import orthogonalbasis
import metamodel
import isoprobabilistictransformation
import analytical
import simulation
import stattests
class UniformSphericalRandomVector(model_dist.RandomVectorImplementation):
    """Proxy of C++ OpenTURNS::Uncertainty::Model::UniformSphericalRandomVector class"""
    __swig_setmethods__ = {}
    for _s in [model_dist.RandomVectorImplementation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UniformSphericalRandomVector, name, value)
    __swig_getmethods__ = {}
    for _s in [model_dist.RandomVectorImplementation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UniformSphericalRandomVector, name)
    __repr__ = _swig_repr
    def GetClassName():
        """GetClassName() -> String"""
        return _UniformSphericalRandomVector.UniformSphericalRandomVector_GetClassName()

    if _newclass:GetClassName = staticmethod(GetClassName)
    __swig_getmethods__["GetClassName"] = lambda x: GetClassName
    def getClassName(self):
        """getClassName(self) -> String"""
        return _UniformSphericalRandomVector.UniformSphericalRandomVector_getClassName(self)

    def str(self):
        """str(self) -> String"""
        return _UniformSphericalRandomVector.UniformSphericalRandomVector_str(self)

    def getRealization(self):
        """getRealization(self) -> NumericalPoint"""
        return _UniformSphericalRandomVector.UniformSphericalRandomVector_getRealization(self)

    def getDimension(self):
        """getDimension(self) -> UnsignedLong"""
        return _UniformSphericalRandomVector.UniformSphericalRandomVector_getDimension(self)

    def __init__(self, *args): 
        """
        __init__(self, UnsignedLong dimension) -> UniformSphericalRandomVector
        __init__(self, UniformSphericalRandomVector other) -> UniformSphericalRandomVector
        """
        this = _UniformSphericalRandomVector.new_UniformSphericalRandomVector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _UniformSphericalRandomVector.delete_UniformSphericalRandomVector
    __del__ = lambda self : None;
UniformSphericalRandomVector_swigregister = _UniformSphericalRandomVector.UniformSphericalRandomVector_swigregister
UniformSphericalRandomVector_swigregister(UniformSphericalRandomVector)

def UniformSphericalRandomVector_GetClassName():
  """UniformSphericalRandomVector_GetClassName() -> String"""
  return _UniformSphericalRandomVector.UniformSphericalRandomVector_GetClassName()



