# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

"""
Open TURNS IntegralCompoundPoisson module is an example on how to include new classes in Open TURNS
"""

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_integralcompoundpoisson', [dirname(__file__)])
        except ImportError:
            import _integralcompoundpoisson
            return _integralcompoundpoisson
        if fp is not None:
            try:
                _mod = imp.load_module('_integralcompoundpoisson', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _integralcompoundpoisson = swig_import_helper()
    del swig_import_helper
else:
    import _integralcompoundpoisson
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


# Override the default SWIG function
def _swig_repr(self):
  return self.str()

import base
import common
import wrapper
import typ
import statistics
import graph
import func
import diff
import optim
import solver
import algo
import uncertainty
import model_dist
import experiment
import orthogonalbasis
import metamodel
import isoprobabilistictransformation
import analytical
import simulation
import stattests
class IntegralUserDefined(model_dist.UserDefined):
    """Proxy of C++ IntegralCompoundPoisson::IntegralUserDefined class"""
    __swig_setmethods__ = {}
    for _s in [model_dist.UserDefined]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegralUserDefined, name, value)
    __swig_getmethods__ = {}
    for _s in [model_dist.UserDefined]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntegralUserDefined, name)
    def GetClassName():
        """GetClassName() -> String"""
        return _integralcompoundpoisson.IntegralUserDefined_GetClassName()

    if _newclass:GetClassName = staticmethod(GetClassName)
    __swig_getmethods__["GetClassName"] = lambda x: GetClassName
    def getClassName(self):
        """getClassName(self) -> String"""
        return _integralcompoundpoisson.IntegralUserDefined_getClassName(self)

    def __eq__(self, *args):
        """__eq__(self, IntegralUserDefined other) -> Bool"""
        return _integralcompoundpoisson.IntegralUserDefined___eq__(self, *args)

    def __repr__(self):
        """__repr__(self) -> String"""
        return _integralcompoundpoisson.IntegralUserDefined___repr__(self)

    def isIntegral(self):
        """isIntegral(self) -> Bool"""
        return _integralcompoundpoisson.IntegralUserDefined_isIntegral(self)

    def getIntegralSupport(self):
        """getIntegralSupport(self) -> UnsignedLongCollection"""
        return _integralcompoundpoisson.IntegralUserDefined_getIntegralSupport(self)

    def getSupport(self, *args):
        """getSupport(self, Interval interval) -> NumericalSample"""
        return _integralcompoundpoisson.IntegralUserDefined_getSupport(self, *args)

    def getWeights(self):
        """getWeights(self) -> NumericalPoint"""
        return _integralcompoundpoisson.IntegralUserDefined_getWeights(self)

    def getNormalizedWeights(self):
        """getNormalizedWeights(self) -> NumericalPoint"""
        return _integralcompoundpoisson.IntegralUserDefined_getNormalizedWeights(self)

    def __init__(self, *args): 
        """
        __init__(self) -> IntegralUserDefined
        __init__(self, UnsignedLongCollection support, NumericalPoint weights) -> IntegralUserDefined
        __init__(self, IntegralUserDefined other) -> IntegralUserDefined
        """
        this = _integralcompoundpoisson.new_IntegralUserDefined(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _integralcompoundpoisson.delete_IntegralUserDefined
    __del__ = lambda self : None;
IntegralUserDefined_swigregister = _integralcompoundpoisson.IntegralUserDefined_swigregister
IntegralUserDefined_swigregister(IntegralUserDefined)

def IntegralUserDefined_GetClassName():
  """IntegralUserDefined_GetClassName() -> String"""
  return _integralcompoundpoisson.IntegralUserDefined_GetClassName()

class IntegralUserDefinedFactory(model_dist.DistributionImplementationFactory):
    """Proxy of C++ IntegralCompoundPoisson::IntegralUserDefinedFactory class"""
    __swig_setmethods__ = {}
    for _s in [model_dist.DistributionImplementationFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegralUserDefinedFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [model_dist.DistributionImplementationFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntegralUserDefinedFactory, name)
    __repr__ = _swig_repr
    def GetClassName():
        """GetClassName() -> String"""
        return _integralcompoundpoisson.IntegralUserDefinedFactory_GetClassName()

    if _newclass:GetClassName = staticmethod(GetClassName)
    __swig_getmethods__["GetClassName"] = lambda x: GetClassName
    def getClassName(self):
        """getClassName(self) -> String"""
        return _integralcompoundpoisson.IntegralUserDefinedFactory_getClassName(self)

    def buildImplementation(self, *args):
        """
        buildImplementation(self, NumericalSample sample) -> DistributionImplementation
        buildImplementation(self, NumericalSample sample, CovarianceMatrix covariance) -> DistributionImplementation
        buildImplementation(self, NumericalPointCollection parameters) -> DistributionImplementation
        buildImplementation(self, NumericalSample sample) -> IntegralUserDefined
        buildImplementation(self, NumericalPointCollection parameters) -> IntegralUserDefined
        buildImplementation(self) -> IntegralUserDefined
        """
        return _integralcompoundpoisson.IntegralUserDefinedFactory_buildImplementation(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> IntegralUserDefinedFactory
        __init__(self, IntegralUserDefinedFactory other) -> IntegralUserDefinedFactory
        """
        this = _integralcompoundpoisson.new_IntegralUserDefinedFactory(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _integralcompoundpoisson.delete_IntegralUserDefinedFactory
    __del__ = lambda self : None;
IntegralUserDefinedFactory_swigregister = _integralcompoundpoisson.IntegralUserDefinedFactory_swigregister
IntegralUserDefinedFactory_swigregister(IntegralUserDefinedFactory)

def IntegralUserDefinedFactory_GetClassName():
  """IntegralUserDefinedFactory_GetClassName() -> String"""
  return _integralcompoundpoisson.IntegralUserDefinedFactory_GetClassName()

class IntegralCompoundPoisson(model_dist.DiscreteDistribution):
    """Proxy of C++ IntegralCompoundPoisson::IntegralCompoundPoisson class"""
    __swig_setmethods__ = {}
    for _s in [model_dist.DiscreteDistribution]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegralCompoundPoisson, name, value)
    __swig_getmethods__ = {}
    for _s in [model_dist.DiscreteDistribution]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntegralCompoundPoisson, name)
    def GetClassName():
        """GetClassName() -> String"""
        return _integralcompoundpoisson.IntegralCompoundPoisson_GetClassName()

    if _newclass:GetClassName = staticmethod(GetClassName)
    __swig_getmethods__["GetClassName"] = lambda x: GetClassName
    def getClassName(self):
        """getClassName(self) -> String"""
        return _integralcompoundpoisson.IntegralCompoundPoisson_getClassName(self)

    def __eq__(self, *args):
        """__eq__(self, IntegralCompoundPoisson other) -> Bool"""
        return _integralcompoundpoisson.IntegralCompoundPoisson___eq__(self, *args)

    def __repr__(self):
        """__repr__(self) -> String"""
        return _integralcompoundpoisson.IntegralCompoundPoisson___repr__(self)

    def getRealization(self):
        """getRealization(self) -> NumericalPoint"""
        return _integralcompoundpoisson.IntegralCompoundPoisson_getRealization(self)

    def computeQuantile(self, *args):
        """
        computeQuantile(self, NumericalScalar prob, Bool tail = False) -> NumericalPoint
        computeQuantile(self, NumericalScalar prob) -> NumericalPoint
        computeQuantile(self, NumericalScalar qMin, NumericalScalar qMax, UnsignedLong pointNumber, 
            NumericalScalar precision = DefaultQuantileEpsilon, 
            Bool tail = False) -> NumericalSample
        computeQuantile(self, NumericalScalar qMin, NumericalScalar qMax, UnsignedLong pointNumber, 
            NumericalScalar precision = DefaultQuantileEpsilon) -> NumericalSample
        computeQuantile(self, NumericalScalar qMin, NumericalScalar qMax, UnsignedLong pointNumber) -> NumericalSample
        computeQuantile(self, NumericalScalar prob, Bool tail = False) -> NumericalPoint
        computeQuantile(self, NumericalScalar prob) -> NumericalPoint
        """
        return _integralcompoundpoisson.IntegralCompoundPoisson_computeQuantile(self, *args)

    def computePDF(self, *args):
        """
        computePDF(self, NumericalScalar scalar) -> NumericalScalar
        computePDF(self, NumericalPoint point) -> NumericalScalar
        computePDF(self, NumericalSample sample) -> NumericalSample
        computePDF(self, NumericalScalar xMin, NumericalScalar xMax, UnsignedLong pointNumber, 
            NumericalScalar precision = DefaultPDFEpsilon) -> NumericalSample
        computePDF(self, NumericalScalar xMin, NumericalScalar xMax, UnsignedLong pointNumber) -> NumericalSample
        computePDF(self, NumericalPoint point) -> NumericalScalar
        """
        return _integralcompoundpoisson.IntegralCompoundPoisson_computePDF(self, *args)

    def computeCDF(self, *args):
        """
        computeCDF(self, NumericalScalar scalar, Bool tail = False) -> NumericalScalar
        computeCDF(self, NumericalScalar scalar) -> NumericalScalar
        computeCDF(self, NumericalPoint point, Bool tail = False) -> NumericalScalar
        computeCDF(self, NumericalPoint point) -> NumericalScalar
        computeCDF(self, NumericalSample sample, Bool tail = False) -> NumericalSample
        computeCDF(self, NumericalSample sample) -> NumericalSample
        computeCDF(self, NumericalScalar xMin, NumericalScalar xMax, UnsignedLong pointNumber, 
            NumericalScalar precision = DefaultPDFEpsilon, 
            Bool tail = False) -> NumericalSample
        computeCDF(self, NumericalScalar xMin, NumericalScalar xMax, UnsignedLong pointNumber, 
            NumericalScalar precision = DefaultPDFEpsilon) -> NumericalSample
        computeCDF(self, NumericalScalar xMin, NumericalScalar xMax, UnsignedLong pointNumber) -> NumericalSample
        computeCDF(self, NumericalPoint point, Bool tail = False) -> NumericalScalar
        computeCDF(self, NumericalPoint point) -> NumericalScalar
        """
        return _integralcompoundpoisson.IntegralCompoundPoisson_computeCDF(self, *args)

    def getNumericalSample(self, *args):
        """
        getNumericalSample(self, UnsignedLong size) -> NumericalSample
        getNumericalSample(self, UnsignedLong size) -> NumericalSample
        """
        return _integralcompoundpoisson.IntegralCompoundPoisson_getNumericalSample(self, *args)

    def getSupport(self, *args):
        """
        getSupport(self, Interval interval) -> NumericalSample
        getSupport(self) -> NumericalSample
        getSupport(self, Interval interval) -> NumericalSample
        """
        return _integralcompoundpoisson.IntegralCompoundPoisson_getSupport(self, *args)

    def getMean(self):
        """getMean(self) -> NumericalPoint"""
        return _integralcompoundpoisson.IntegralCompoundPoisson_getMean(self)

    def getStandardDeviation(self):
        """getStandardDeviation(self) -> NumericalPoint"""
        return _integralcompoundpoisson.IntegralCompoundPoisson_getStandardDeviation(self)

    def getCovariance(self):
        """getCovariance(self) -> CovarianceMatrix"""
        return _integralcompoundpoisson.IntegralCompoundPoisson_getCovariance(self)

    def drawPDF(self, *args):
        """
        drawPDF(self) -> Graph
        drawPDF(self, NumericalScalar xMin, NumericalScalar xMax, UnsignedLong pointNumber = DefaultPointNumber) -> Graph
        drawPDF(self, NumericalScalar xMin, NumericalScalar xMax) -> Graph
        drawPDF(self, UnsignedLong pointNumber) -> Graph
        drawPDF(self, NumericalPoint xMin, NumericalPoint xMax, NumericalPoint pointNumber) -> Graph
        drawPDF(self, NumericalPoint xMin, NumericalPoint xMax) -> Graph
        drawPDF(self, NumericalPoint pointNumber) -> Graph
        drawPDF(self, NumericalScalar xMin, NumericalScalar xMax, UnsignedLong pointNumber = DefaultPointNumber) -> Graph
        drawPDF(self, NumericalScalar xMin, NumericalScalar xMax) -> Graph
        """
        return _integralcompoundpoisson.IntegralCompoundPoisson_drawPDF(self, *args)

    def drawCDF(self, *args):
        """
        drawCDF(self) -> Graph
        drawCDF(self, NumericalScalar xMin, NumericalScalar xMax, UnsignedLong pointNumber = DefaultPointNumber) -> Graph
        drawCDF(self, NumericalScalar xMin, NumericalScalar xMax) -> Graph
        drawCDF(self, UnsignedLong pointNumber) -> Graph
        drawCDF(self, NumericalPoint xMin, NumericalPoint xMax, NumericalPoint pointNumber) -> Graph
        drawCDF(self, NumericalPoint xMin, NumericalPoint xMax) -> Graph
        drawCDF(self, NumericalPoint pointNumber) -> Graph
        drawCDF(self, NumericalScalar xMin, NumericalScalar xMax, UnsignedLong pointNumber = DefaultPointNumber) -> Graph
        drawCDF(self, NumericalScalar xMin, NumericalScalar xMax) -> Graph
        """
        return _integralcompoundpoisson.IntegralCompoundPoisson_drawCDF(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> IntegralCompoundPoisson
        __init__(self, IntegralUserDefined atomDistribution, NumericalScalar theta, 
            UnsignedLong log2cache = 10) -> IntegralCompoundPoisson
        __init__(self, IntegralUserDefined atomDistribution, NumericalScalar theta) -> IntegralCompoundPoisson
        __init__(self, IntegralCompoundPoisson other) -> IntegralCompoundPoisson
        """
        this = _integralcompoundpoisson.new_IntegralCompoundPoisson(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _integralcompoundpoisson.delete_IntegralCompoundPoisson
    __del__ = lambda self : None;
IntegralCompoundPoisson_swigregister = _integralcompoundpoisson.IntegralCompoundPoisson_swigregister
IntegralCompoundPoisson_swigregister(IntegralCompoundPoisson)

def IntegralCompoundPoisson_GetClassName():
  """IntegralCompoundPoisson_GetClassName() -> String"""
  return _integralcompoundpoisson.IntegralCompoundPoisson_GetClassName()



