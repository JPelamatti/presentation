/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *self, PyObject *func)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyInstanceMethod_New(func);
#else
  return NULL;
#endif
}

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif


/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(ptr, type, flags)
#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char*) name, obj);
  Py_DECREF(obj);                            
}

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData* data)
{
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", name, v);
  if (v->next) {
#ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
#else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
#endif
#if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
#else
    PyString_ConcatAndDel(&repr,nrep);
#endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_print(SwigPyObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char *str;
#ifdef METH_NOARGS
  PyObject *repr = SwigPyObject_repr(v);
#else
  PyObject *repr = SwigPyObject_repr(v, NULL);
#endif
  if (repr) {
    str = SWIG_Python_str_AsChar(repr); 
    fputs(str, fp);
    SWIG_Python_str_DelForPy3(str);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
SwigPyObject_str(SwigPyObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    SWIG_Python_str_FromChar(result) : 0;
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  if( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) )
    res = Py_True;
  else
    res = Py_False;
  Py_INCREF(res);
  return res;  
}


SWIGRUNTIME PyTypeObject* _PySwigObject_type(void);

SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigObject_type();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
_PySwigObject_type(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;  
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp
      = {
	/* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
	PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else    
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */
#endif
	(char *)"SwigPyObject",		    /* tp_name */
	sizeof(SwigPyObject),		    /* tp_basicsize */
	0,			            /* tp_itemsize */
	(destructor)SwigPyObject_dealloc,   /* tp_dealloc */
	(printfunc)SwigPyObject_print,	    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
	(getattrfunc)SwigPyObject_getattr,  /* tp_getattr */ 
#else
	(getattrfunc)0,			    /* tp_getattr */ 
#endif
	(setattrfunc)0,			    /* tp_setattr */ 
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
	(cmpfunc)SwigPyObject_compare,	    /* tp_compare */
#endif
	(reprfunc)SwigPyObject_repr,	    /* tp_repr */    
	&SwigPyObject_as_number,	    /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)SwigPyObject_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigobject_doc, 	            /* tp_doc */        
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	(richcmpfunc)SwigPyObject_richcompare,           /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	swigobject_methods,		    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0,	                            /* tp_free */	   
	0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    swigpyobject_type = tmp;
    /* for Python 3 we already assigned ob_type in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
    swigpyobject_type.ob_type = &PyType_Type;
#endif
    type_init = 1;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* _PySwigPacked_type(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigPacked_type();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == _PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
_PySwigPacked_type(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;  
  if (!type_init) {
    const PyTypeObject tmp
      = {
    /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
    PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
	PyObject_HEAD_INIT(NULL)
    0,				    /* ob_size */	
#endif
	(char *)"SwigPyPacked",		    /* tp_name */	
	sizeof(SwigPyPacked),		    /* tp_basicsize */	
	0,				    /* tp_itemsize */	
	(destructor)SwigPyPacked_dealloc,   /* tp_dealloc */	
	(printfunc)SwigPyPacked_print,	    /* tp_print */   	
	(getattrfunc)0,			    /* tp_getattr */ 	
	(setattrfunc)0,			    /* tp_setattr */ 	
#if PY_VERSION_HEX>=0x03000000
    0, /* tp_reserved in 3.0.1 */
#else
    (cmpfunc)SwigPyPacked_compare,	    /* tp_compare */
#endif
	(reprfunc)SwigPyPacked_repr,	    /* tp_repr */
	0,	                            /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)SwigPyPacked_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigpacked_doc, 	            /* tp_doc */
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	0,		                    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0, 	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    swigpypacked_type = tmp;
    /* for Python 3 the ob_type already assigned in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
    swigpypacked_type.ob_type = &PyType_Type;
#endif
    type_init = 1;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  static PyObject *SWIG_STATIC_POINTER(swig_this) = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  if (SwigPyObject_Check(pyobj)) {
    return (SwigPyObject *) pyobj;
  } else {
    PyObject *obj = 0;
#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
    if (PyInstance_Check(pyobj)) {
      obj = _PyInstance_Lookup(pyobj, SWIG_This());      
    } else {
      PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
      } else {
#ifdef PyWeakref_CheckProxy
	if (PyWeakref_CheckProxy(pyobj)) {
	  PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	  return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
	}
#endif
	obj = PyObject_GetAttr(pyobj,SWIG_This());
	if (obj) {
	  Py_DECREF(obj);
	} else {
	  if (PyErr_Occurred()) PyErr_Clear();
	  return 0;
	}
      }
    }
#else
    obj = PyObject_GetAttr(pyobj,SWIG_This());
    if (obj) {
      Py_DECREF(obj);
    } else {
      if (PyErr_Occurred()) PyErr_Clear();
      return 0;
    }
#endif
    if (obj && !SwigPyObject_Check(obj)) {
      /* a PyObject is called 'this', try to get the 'real this'
	 SwigPyObject from it */ 
      return SWIG_Python_GetSwigThis(obj);
    }
    return (SwigPyObject *)obj;
  }
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  if (!obj) return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr) *ptr = 0;
    return SWIG_OK;
  } else {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (own)
      *own = 0;
    while (sobj) {
      void *vptr = sobj->ptr;
      if (ty) {
	swig_type_info *to = sobj->ty;
	if (to == ty) {
	  /* no type cast needed */
	  if (ptr) *ptr = vptr;
	  break;
	} else {
	  swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
	  if (!tc) {
	    sobj = (SwigPyObject *)sobj->next;
	  } else {
	    if (ptr) {
              int newmemory = 0;
              *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
              if (newmemory == SWIG_CAST_NEW_MEMORY) {
                assert(own);
                if (own)
                  *own = *own | SWIG_CAST_NEW_MEMORY;
              }
            }
	    break;
	  }
	}
      } else {
	if (ptr) *ptr = vptr;
	break;
      }
    }
    if (sobj) {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
	sobj->own = 0;
      }
      return SWIG_OK;
    } else {
      int res = SWIG_ERROR;
      if (flags & SWIG_POINTER_IMPLICIT_CONV) {
	SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
	if (data && !data->implicitconv) {
	  PyObject *klass = data->klass;
	  if (klass) {
	    PyObject *impconv;
	    data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
	    impconv = SWIG_Python_CallFunctor(klass, obj);
	    data->implicitconv = 0;
	    if (PyErr_Occurred()) {
	      PyErr_Clear();
	      impconv = 0;
	    }
	    if (impconv) {
	      SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
	      if (iobj) {
		void *vptr;
		res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
		if (SWIG_IsOK(res)) {
		  if (ptr) {
		    *ptr = vptr;
		    /* transfer the ownership to 'ptr' */
		    iobj->own = 0;
		    res = SWIG_AddCast(res);
		    res = SWIG_AddNewMask(res);
		  } else {
		    res = SWIG_AddCast(res);		    
		  }
		}
	      }
	      Py_DECREF(impconv);
	    }
	  }
	}
      }
      return res;
    }
  }
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    PyObject_SetAttr(inst, SWIG_This(), swig_this);
    Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
#else
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  if (!ptr) {
    return SWIG_Py_Void();
  } else {
    int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
    PyObject *robj = SwigPyObject_New(ptr, type, own);
    SwigPyClientData *clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
    if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
      PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
      if (inst) {
	Py_DECREF(robj);
	robj = inst;
      }
    }
    return robj;
  }
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
SWIG_Python_DestroyModule(void *vptr)
{
  swig_module_info *swig_module = (swig_module_info *) vptr;
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}


#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AbdoRackwitzSpecificParameters swig_types[0]
#define SWIGTYPE_p_Antecedent swig_types[1]
#define SWIGTYPE_p_ArchimedeanCopula swig_types[2]
#define SWIGTYPE_p_Basis swig_types[3]
#define SWIGTYPE_p_BoolCollection swig_types[4]
#define SWIGTYPE_p_BoolPersistentCollection swig_types[5]
#define SWIGTYPE_p_BoundingBox swig_types[6]
#define SWIGTYPE_p_CacheImplementation swig_types[7]
#define SWIGTYPE_p_CacheType swig_types[8]
#define SWIGTYPE_p_CobylaSpecificParameters swig_types[9]
#define SWIGTYPE_p_Coefficients swig_types[10]
#define SWIGTYPE_p_CoefficientsCollection swig_types[11]
#define SWIGTYPE_p_CoefficientsPersistentCollection swig_types[12]
#define SWIGTYPE_p_CommunicatorType swig_types[13]
#define SWIGTYPE_p_Compact swig_types[14]
#define SWIGTYPE_p_ComparisonOperator swig_types[15]
#define SWIGTYPE_p_ConfidenceIntervalCollection swig_types[16]
#define SWIGTYPE_p_ConfidenceIntervalPersistentCollection swig_types[17]
#define SWIGTYPE_p_ConstantNumericalMathGradientImplementation swig_types[18]
#define SWIGTYPE_p_ConstantNumericalMathHessianImplementation swig_types[19]
#define SWIGTYPE_p_Copula swig_types[20]
#define SWIGTYPE_p_CopulaCollection swig_types[21]
#define SWIGTYPE_p_CopulaImplementation swig_types[22]
#define SWIGTYPE_p_CopulaPersistentCollection swig_types[23]
#define SWIGTYPE_p_CorrelationMatrix swig_types[24]
#define SWIGTYPE_p_CovarianceMatrix swig_types[25]
#define SWIGTYPE_p_Description swig_types[26]
#define SWIGTYPE_p_DirectoryList swig_types[27]
#define SWIGTYPE_p_DiscreteDistribution swig_types[28]
#define SWIGTYPE_p_Distribution swig_types[29]
#define SWIGTYPE_p_DistributionCollection swig_types[30]
#define SWIGTYPE_p_DistributionFactory swig_types[31]
#define SWIGTYPE_p_DistributionFactoryCollection swig_types[32]
#define SWIGTYPE_p_DistributionImplementation swig_types[33]
#define SWIGTYPE_p_DistributionImplementationFactory swig_types[34]
#define SWIGTYPE_p_DistributionPersistentCollection swig_types[35]
#define SWIGTYPE_p_DrawableCollection swig_types[36]
#define SWIGTYPE_p_DrawablePersistentCollection swig_types[37]
#define SWIGTYPE_p_ElementType swig_types[38]
#define SWIGTYPE_p_EllipticalDistribution swig_types[39]
#define SWIGTYPE_p_EvaluationImplementation swig_types[40]
#define SWIGTYPE_p_Event swig_types[41]
#define SWIGTYPE_p_Factory swig_types[42]
#define SWIGTYPE_p_FileListType swig_types[43]
#define SWIGTYPE_p_FileNotFoundException swig_types[44]
#define SWIGTYPE_p_FiniteDifferenceStep swig_types[45]
#define SWIGTYPE_p_Format swig_types[46]
#define SWIGTYPE_p_FunctionalChaosResult swig_types[47]
#define SWIGTYPE_p_GradientImplementation swig_types[48]
#define SWIGTYPE_p_Graph swig_types[49]
#define SWIGTYPE_p_GraphCollection swig_types[50]
#define SWIGTYPE_p_HessianImplementation swig_types[51]
#define SWIGTYPE_p_HistogramPairCollection swig_types[52]
#define SWIGTYPE_p_HistogramPairPersistentCollection swig_types[53]
#define SWIGTYPE_p_HistoryStrategy swig_types[54]
#define SWIGTYPE_p_IdentityMatrix swig_types[55]
#define SWIGTYPE_p_Implementation swig_types[56]
#define SWIGTYPE_p_ImplementationAsPersistentObject swig_types[57]
#define SWIGTYPE_p_ImplementationElementType swig_types[58]
#define SWIGTYPE_p_ImplementationType swig_types[59]
#define SWIGTYPE_p_Indices swig_types[60]
#define SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson swig_types[61]
#define SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__CovarianceMatrix swig_types[62]
#define SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__Graph swig_types[63]
#define SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalPoint swig_types[64]
#define SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalSample swig_types[65]
#define SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefined swig_types[66]
#define SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefinedFactory swig_types[67]
#define SWIGTYPE_p_InternalException swig_types[68]
#define SWIGTYPE_p_InternalFunction swig_types[69]
#define SWIGTYPE_p_InternalGradient swig_types[70]
#define SWIGTYPE_p_InternalHessian swig_types[71]
#define SWIGTYPE_p_InternalType swig_types[72]
#define SWIGTYPE_p_Interval swig_types[73]
#define SWIGTYPE_p_InvalidArgumentException swig_types[74]
#define SWIGTYPE_p_InvalidDimensionException swig_types[75]
#define SWIGTYPE_p_InvalidRangeException swig_types[76]
#define SWIGTYPE_p_InverseIsoProbabilisticTransformation swig_types[77]
#define SWIGTYPE_p_IsoProbabilisticTransformation swig_types[78]
#define SWIGTYPE_p_LabelMap swig_types[79]
#define SWIGTYPE_p_Last swig_types[80]
#define SWIGTYPE_p_LinearModel swig_types[81]
#define SWIGTYPE_p_LinearNumericalMathEvaluationImplementation swig_types[82]
#define SWIGTYPE_p_LowDiscrepancySequence swig_types[83]
#define SWIGTYPE_p_Map swig_types[84]
#define SWIGTYPE_p_MapElement swig_types[85]
#define SWIGTYPE_p_Marginals swig_types[86]
#define SWIGTYPE_p_Matrix swig_types[87]
#define SWIGTYPE_p_MatrixImplementation swig_types[88]
#define SWIGTYPE_p_MersenneTwister swig_types[89]
#define SWIGTYPE_p_NearestPointAlgorithm swig_types[90]
#define SWIGTYPE_p_NoWrapperFileFoundException swig_types[91]
#define SWIGTYPE_p_NonEllipticalDistribution swig_types[92]
#define SWIGTYPE_p_Normal swig_types[93]
#define SWIGTYPE_p_NotDefinedException swig_types[94]
#define SWIGTYPE_p_NotSymmetricDefinitePositiveException swig_types[95]
#define SWIGTYPE_p_NotYetImplementedException swig_types[96]
#define SWIGTYPE_p_NumericalComplexCollection swig_types[97]
#define SWIGTYPE_p_NumericalComplexPersistentCollection swig_types[98]
#define SWIGTYPE_p_NumericalMathEvaluationImplementation swig_types[99]
#define SWIGTYPE_p_NumericalMathFunction swig_types[100]
#define SWIGTYPE_p_NumericalMathFunctionCollection swig_types[101]
#define SWIGTYPE_p_NumericalMathFunctionPersistentCollection swig_types[102]
#define SWIGTYPE_p_NumericalMathGradientImplementation swig_types[103]
#define SWIGTYPE_p_NumericalMathHessianImplementation swig_types[104]
#define SWIGTYPE_p_NumericalPoint swig_types[105]
#define SWIGTYPE_p_NumericalPointCollection swig_types[106]
#define SWIGTYPE_p_NumericalPointPersistentCollection swig_types[107]
#define SWIGTYPE_p_NumericalPointWithDescription swig_types[108]
#define SWIGTYPE_p_NumericalPointWithDescriptionCollection swig_types[109]
#define SWIGTYPE_p_NumericalSample swig_types[110]
#define SWIGTYPE_p_NumericalScalarCache swig_types[111]
#define SWIGTYPE_p_NumericalScalarCollection swig_types[112]
#define SWIGTYPE_p_NumericalScalarPersistentCollection swig_types[113]
#define SWIGTYPE_p_OT__Base__Optim__NearestPointChecker__Result swig_types[114]
#define SWIGTYPE_p_OT__Base__Stat__CorrelationAnalysisSobolIndiceParameters swig_types[115]
#define SWIGTYPE_p_OT__Base__Stat__CorrelationAnalysisSobolIndiceResult swig_types[116]
#define SWIGTYPE_p_OT__Base__Stat__RandomGeneratorState swig_types[117]
#define SWIGTYPE_p_OpenTURNS__Base__Algo__ApproximationAlgorithm swig_types[118]
#define SWIGTYPE_p_OpenTURNS__Base__Algo__ApproximationAlgorithmImplementation swig_types[119]
#define SWIGTYPE_p_OpenTURNS__Base__Algo__CorrectedLeaveOneOut swig_types[120]
#define SWIGTYPE_p_OpenTURNS__Base__Algo__FittingAlgorithm swig_types[121]
#define SWIGTYPE_p_OpenTURNS__Base__Algo__FittingAlgorithmImplementation swig_types[122]
#define SWIGTYPE_p_OpenTURNS__Base__Algo__Lasso swig_types[123]
#define SWIGTYPE_p_OpenTURNS__Base__Algo__LeastSquaresMetaModelSelection swig_types[124]
#define SWIGTYPE_p_OpenTURNS__Base__Algo__LeavePOut swig_types[125]
#define SWIGTYPE_p_OpenTURNS__Base__Common__ComparisonOperator swig_types[126]
#define SWIGTYPE_p_OpenTURNS__Base__Common__ComparisonOperatorImplementation swig_types[127]
#define SWIGTYPE_p_OpenTURNS__Base__Common__Equal swig_types[128]
#define SWIGTYPE_p_OpenTURNS__Base__Common__Greater swig_types[129]
#define SWIGTYPE_p_OpenTURNS__Base__Common__GreaterOrEqual swig_types[130]
#define SWIGTYPE_p_OpenTURNS__Base__Common__InterfaceObject swig_types[131]
#define SWIGTYPE_p_OpenTURNS__Base__Common__Less swig_types[132]
#define SWIGTYPE_p_OpenTURNS__Base__Common__LessOrEqual swig_types[133]
#define SWIGTYPE_p_OpenTURNS__Base__Common__Object swig_types[134]
#define SWIGTYPE_p_OpenTURNS__Base__Common__PersistentObject swig_types[135]
#define SWIGTYPE_p_OpenTURNS__Base__Common__StorageManager swig_types[136]
#define SWIGTYPE_p_OpenTURNS__Base__Common__Study swig_types[137]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedCollectionInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceImplementation_t swig_types[138]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedCollectionInterfaceObjectT_OpenTURNS__Base__Type__DescriptionImplementation_t swig_types[139]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Algo__ApproximationAlgorithmImplementation_t swig_types[140]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Algo__FittingAlgorithmImplementation_t swig_types[141]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Common__ComparisonOperatorImplementation_t swig_types[142]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Diff__FiniteDifferenceStepImplementation_t swig_types[143]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceFactoryImplementation_t swig_types[144]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceImplementation_t swig_types[145]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__NumericalMathFunctionImplementation_t swig_types[146]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__UniVariatePolynomialImplementation_t swig_types[147]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Graph__DrawableImplementation_t swig_types[148]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Graph__GraphImplementation_t swig_types[149]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementation_t swig_types[150]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementation_t swig_types[151]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Solver__SolverImplementation_t swig_types[152]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__HistoryStrategyImplementation_t swig_types[153]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__LowDiscrepancySequenceImplementation_t swig_types[154]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__NumericalSampleImplementation_t swig_types[155]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__DescriptionImplementation_t swig_types[156]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__MatrixImplementation_t swig_types[157]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__TensorImplementation_t swig_types[158]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategyImplementation_t swig_types[159]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__ExperimentImplementation_t swig_types[160]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthogonalFunctionFactory_t swig_types[161]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFactory_t swig_types[162]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithmImplementation_t swig_types[163]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategyImplementation_t swig_types[164]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__RootStrategyImplementation_t swig_types[165]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SVMKernelImplementation_t swig_types[166]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SamplingStrategyImplementation_t swig_types[167]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SimulationResultImplementation_t swig_types[168]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory_t swig_types[169]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__DistributionImplementation_t swig_types[170]
#define SWIGTYPE_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__RandomVectorImplementation_t swig_types[171]
#define SWIGTYPE_p_OpenTURNS__Base__Common__XMLStorageManager swig_types[172]
#define SWIGTYPE_p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceGradient swig_types[173]
#define SWIGTYPE_p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceHessian swig_types[174]
#define SWIGTYPE_p_OpenTURNS__Base__Diff__ConstantStep swig_types[175]
#define SWIGTYPE_p_OpenTURNS__Base__Diff__FiniteDifferenceGradient swig_types[176]
#define SWIGTYPE_p_OpenTURNS__Base__Diff__FiniteDifferenceHessian swig_types[177]
#define SWIGTYPE_p_OpenTURNS__Base__Diff__FiniteDifferenceStep swig_types[178]
#define SWIGTYPE_p_OpenTURNS__Base__Diff__FiniteDifferenceStepImplementation swig_types[179]
#define SWIGTYPE_p_OpenTURNS__Base__Diff__NonCenteredFiniteDifferenceGradient swig_types[180]
#define SWIGTYPE_p_OpenTURNS__Base__Diff__ProportionalStep swig_types[181]
#define SWIGTYPE_p_OpenTURNS__Base__Func__Basis swig_types[182]
#define SWIGTYPE_p_OpenTURNS__Base__Func__BasisSequence swig_types[183]
#define SWIGTYPE_p_OpenTURNS__Base__Func__BasisSequenceFactory swig_types[184]
#define SWIGTYPE_p_OpenTURNS__Base__Func__BasisSequenceFactoryImplementation swig_types[185]
#define SWIGTYPE_p_OpenTURNS__Base__Func__BasisSequenceImplementation swig_types[186]
#define SWIGTYPE_p_OpenTURNS__Base__Func__ComposedNumericalMathEvaluationImplementation swig_types[187]
#define SWIGTYPE_p_OpenTURNS__Base__Func__ComposedNumericalMathFunction swig_types[188]
#define SWIGTYPE_p_OpenTURNS__Base__Func__ComposedNumericalMathGradientImplementation swig_types[189]
#define SWIGTYPE_p_OpenTURNS__Base__Func__ComposedNumericalMathHessianImplementation swig_types[190]
#define SWIGTYPE_p_OpenTURNS__Base__Func__ComputedNumericalMathEvaluationImplementation swig_types[191]
#define SWIGTYPE_p_OpenTURNS__Base__Func__ComputedNumericalMathGradientImplementation swig_types[192]
#define SWIGTYPE_p_OpenTURNS__Base__Func__ComputedNumericalMathHessianImplementation swig_types[193]
#define SWIGTYPE_p_OpenTURNS__Base__Func__ConstantNumericalMathGradientImplementation swig_types[194]
#define SWIGTYPE_p_OpenTURNS__Base__Func__ConstantNumericalMathHessianImplementation swig_types[195]
#define SWIGTYPE_p_OpenTURNS__Base__Func__IndicatorNumericalMathEvaluationImplementation swig_types[196]
#define SWIGTYPE_p_OpenTURNS__Base__Func__LAR swig_types[197]
#define SWIGTYPE_p_OpenTURNS__Base__Func__LARFSZero swig_types[198]
#define SWIGTYPE_p_OpenTURNS__Base__Func__LARLasso swig_types[199]
#define SWIGTYPE_p_OpenTURNS__Base__Func__LinearCombinationEvaluationImplementation swig_types[200]
#define SWIGTYPE_p_OpenTURNS__Base__Func__LinearCombinationGradientImplementation swig_types[201]
#define SWIGTYPE_p_OpenTURNS__Base__Func__LinearCombinationHessianImplementation swig_types[202]
#define SWIGTYPE_p_OpenTURNS__Base__Func__LinearNumericalMathEvaluationImplementation swig_types[203]
#define SWIGTYPE_p_OpenTURNS__Base__Func__LinearNumericalMathFunction swig_types[204]
#define SWIGTYPE_p_OpenTURNS__Base__Func__LinearNumericalMathGradientImplementation swig_types[205]
#define SWIGTYPE_p_OpenTURNS__Base__Func__NoNumericalMathEvaluationImplementation swig_types[206]
#define SWIGTYPE_p_OpenTURNS__Base__Func__NoNumericalMathGradientImplementation swig_types[207]
#define SWIGTYPE_p_OpenTURNS__Base__Func__NoNumericalMathHessianImplementation swig_types[208]
#define SWIGTYPE_p_OpenTURNS__Base__Func__NumericalMathEvaluationImplementation swig_types[209]
#define SWIGTYPE_p_OpenTURNS__Base__Func__NumericalMathFunction swig_types[210]
#define SWIGTYPE_p_OpenTURNS__Base__Func__NumericalMathFunctionImplementation swig_types[211]
#define SWIGTYPE_p_OpenTURNS__Base__Func__NumericalMathGradientImplementation swig_types[212]
#define SWIGTYPE_p_OpenTURNS__Base__Func__NumericalMathHessianImplementation swig_types[213]
#define SWIGTYPE_p_OpenTURNS__Base__Func__ProductNumericalMathEvaluationImplementation swig_types[214]
#define SWIGTYPE_p_OpenTURNS__Base__Func__ProductNumericalMathFunction swig_types[215]
#define SWIGTYPE_p_OpenTURNS__Base__Func__ProductNumericalMathGradientImplementation swig_types[216]
#define SWIGTYPE_p_OpenTURNS__Base__Func__ProductNumericalMathHessianImplementation swig_types[217]
#define SWIGTYPE_p_OpenTURNS__Base__Func__ProductPolynomialEvaluationImplementation swig_types[218]
#define SWIGTYPE_p_OpenTURNS__Base__Func__QuadraticNumericalMathEvaluationImplementation swig_types[219]
#define SWIGTYPE_p_OpenTURNS__Base__Func__UniVariatePolynomial swig_types[220]
#define SWIGTYPE_p_OpenTURNS__Base__Func__UniVariatePolynomialImplementation swig_types[221]
#define SWIGTYPE_p_OpenTURNS__Base__Func__WrapperData swig_types[222]
#define SWIGTYPE_p_OpenTURNS__Base__Func__WrapperDataFile swig_types[223]
#define SWIGTYPE_p_OpenTURNS__Base__Func__WrapperDataVariable swig_types[224]
#define SWIGTYPE_p_OpenTURNS__Base__Func__WrapperFile swig_types[225]
#define SWIGTYPE_p_OpenTURNS__Base__Func__WrapperFrameworkData swig_types[226]
#define SWIGTYPE_p_OpenTURNS__Base__Func__WrapperFunctionDescription swig_types[227]
#define SWIGTYPE_p_OpenTURNS__Base__Func__WrapperParameter swig_types[228]
#define SWIGTYPE_p_OpenTURNS__Base__Graph__BarPlot swig_types[229]
#define SWIGTYPE_p_OpenTURNS__Base__Graph__Cloud swig_types[230]
#define SWIGTYPE_p_OpenTURNS__Base__Graph__Contour swig_types[231]
#define SWIGTYPE_p_OpenTURNS__Base__Graph__Curve swig_types[232]
#define SWIGTYPE_p_OpenTURNS__Base__Graph__Drawable swig_types[233]
#define SWIGTYPE_p_OpenTURNS__Base__Graph__DrawableImplementation swig_types[234]
#define SWIGTYPE_p_OpenTURNS__Base__Graph__Graph swig_types[235]
#define SWIGTYPE_p_OpenTURNS__Base__Graph__GraphImplementation swig_types[236]
#define SWIGTYPE_p_OpenTURNS__Base__Graph__Pie swig_types[237]
#define SWIGTYPE_p_OpenTURNS__Base__Graph__Staircase swig_types[238]
#define SWIGTYPE_p_OpenTURNS__Base__Optim__AbdoRackwitz swig_types[239]
#define SWIGTYPE_p_OpenTURNS__Base__Optim__AbdoRackwitzSpecificParameters swig_types[240]
#define SWIGTYPE_p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithm swig_types[241]
#define SWIGTYPE_p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementation swig_types[242]
#define SWIGTYPE_p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementationResult swig_types[243]
#define SWIGTYPE_p_OpenTURNS__Base__Optim__Cobyla swig_types[244]
#define SWIGTYPE_p_OpenTURNS__Base__Optim__CobylaSpecificParameters swig_types[245]
#define SWIGTYPE_p_OpenTURNS__Base__Optim__NearestPointAlgorithm swig_types[246]
#define SWIGTYPE_p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementation swig_types[247]
#define SWIGTYPE_p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementationResult swig_types[248]
#define SWIGTYPE_p_OpenTURNS__Base__Optim__NearestPointChecker swig_types[249]
#define SWIGTYPE_p_OpenTURNS__Base__Optim__PenalizedLeastSquaresAlgorithm swig_types[250]
#define SWIGTYPE_p_OpenTURNS__Base__Optim__SQP swig_types[251]
#define SWIGTYPE_p_OpenTURNS__Base__Optim__SQPSpecificParameters swig_types[252]
#define SWIGTYPE_p_OpenTURNS__Base__Optim__TNC swig_types[253]
#define SWIGTYPE_p_OpenTURNS__Base__Optim__TNCSpecificParameters swig_types[254]
#define SWIGTYPE_p_OpenTURNS__Base__Regression__LinearLeastSquares swig_types[255]
#define SWIGTYPE_p_OpenTURNS__Base__Regression__LinearTaylor swig_types[256]
#define SWIGTYPE_p_OpenTURNS__Base__Regression__QuadraticLeastSquares swig_types[257]
#define SWIGTYPE_p_OpenTURNS__Base__Regression__QuadraticTaylor swig_types[258]
#define SWIGTYPE_p_OpenTURNS__Base__Regression__RegressionAlgorithm swig_types[259]
#define SWIGTYPE_p_OpenTURNS__Base__Solver__Bisection swig_types[260]
#define SWIGTYPE_p_OpenTURNS__Base__Solver__Brent swig_types[261]
#define SWIGTYPE_p_OpenTURNS__Base__Solver__Secant swig_types[262]
#define SWIGTYPE_p_OpenTURNS__Base__Solver__Solver swig_types[263]
#define SWIGTYPE_p_OpenTURNS__Base__Solver__SolverImplementation swig_types[264]
#define SWIGTYPE_p_OpenTURNS__Base__Stat__Compact swig_types[265]
#define SWIGTYPE_p_OpenTURNS__Base__Stat__ConfidenceInterval swig_types[266]
#define SWIGTYPE_p_OpenTURNS__Base__Stat__CorrelationMatrix swig_types[267]
#define SWIGTYPE_p_OpenTURNS__Base__Stat__CovarianceMatrix swig_types[268]
#define SWIGTYPE_p_OpenTURNS__Base__Stat__FaureSequence swig_types[269]
#define SWIGTYPE_p_OpenTURNS__Base__Stat__Full swig_types[270]
#define SWIGTYPE_p_OpenTURNS__Base__Stat__HaltonSequence swig_types[271]
#define SWIGTYPE_p_OpenTURNS__Base__Stat__HistoryStrategy swig_types[272]
#define SWIGTYPE_p_OpenTURNS__Base__Stat__HistoryStrategyImplementation swig_types[273]
#define SWIGTYPE_p_OpenTURNS__Base__Stat__InverseHaltonSequence swig_types[274]
#define SWIGTYPE_p_OpenTURNS__Base__Stat__Last swig_types[275]
#define SWIGTYPE_p_OpenTURNS__Base__Stat__LinearModel swig_types[276]
#define SWIGTYPE_p_OpenTURNS__Base__Stat__LowDiscrepancySequence swig_types[277]
#define SWIGTYPE_p_OpenTURNS__Base__Stat__LowDiscrepancySequenceImplementation swig_types[278]
#define SWIGTYPE_p_OpenTURNS__Base__Stat__Null swig_types[279]
#define SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample swig_types[280]
#define SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSampleImplementation swig_types[281]
#define SWIGTYPE_p_OpenTURNS__Base__Stat__SobolSequence swig_types[282]
#define SWIGTYPE_p_OpenTURNS__Base__Stat__TestResult swig_types[283]
#define SWIGTYPE_p_OpenTURNS__Base__Type__CollectionT_unsigned_long_t swig_types[284]
#define SWIGTYPE_p_OpenTURNS__Base__Type__Description swig_types[285]
#define SWIGTYPE_p_OpenTURNS__Base__Type__DescriptionImplementation swig_types[286]
#define SWIGTYPE_p_OpenTURNS__Base__Type__IdentityMatrix swig_types[287]
#define SWIGTYPE_p_OpenTURNS__Base__Type__Indices swig_types[288]
#define SWIGTYPE_p_OpenTURNS__Base__Type__Interval swig_types[289]
#define SWIGTYPE_p_OpenTURNS__Base__Type__Matrix swig_types[290]
#define SWIGTYPE_p_OpenTURNS__Base__Type__MatrixImplementation swig_types[291]
#define SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint swig_types[292]
#define SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPointWithDescription swig_types[293]
#define SWIGTYPE_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__Basis_t swig_types[294]
#define SWIGTYPE_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__NumericalMathFunction_t swig_types[295]
#define SWIGTYPE_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__UniVariatePolynomial_t swig_types[296]
#define SWIGTYPE_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPointWithDescription_t swig_types[297]
#define SWIGTYPE_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPoint_t swig_types[298]
#define SWIGTYPE_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFamily_t swig_types[299]
#define SWIGTYPE_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__HistogramPair_t swig_types[300]
#define SWIGTYPE_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__UserDefinedPair_t swig_types[301]
#define SWIGTYPE_p_OpenTURNS__Base__Type__PersistentCollectionT_double_t swig_types[302]
#define SWIGTYPE_p_OpenTURNS__Base__Type__PersistentCollectionT_std__string_t swig_types[303]
#define SWIGTYPE_p_OpenTURNS__Base__Type__PersistentCollectionT_unsigned_long_t swig_types[304]
#define SWIGTYPE_p_OpenTURNS__Base__Type__SquareMatrix swig_types[305]
#define SWIGTYPE_p_OpenTURNS__Base__Type__SymmetricMatrix swig_types[306]
#define SWIGTYPE_p_OpenTURNS__Base__Type__SymmetricTensor swig_types[307]
#define SWIGTYPE_p_OpenTURNS__Base__Type__Tensor swig_types[308]
#define SWIGTYPE_p_OpenTURNS__Base__Type__TensorImplementation swig_types[309]
#define SWIGTYPE_p_OpenTURNS__PointInSourceFile swig_types[310]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategy swig_types[311]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategyImplementation swig_types[312]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__Analytical swig_types[313]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__AnalyticalResult swig_types[314]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__Axial swig_types[315]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__BootstrapExperiment swig_types[316]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__Box swig_types[317]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__ChebychevAlgorithm swig_types[318]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__CleaningStrategy swig_types[319]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__Composite swig_types[320]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__DirectionalSampling swig_types[321]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__EnumerateFunction swig_types[322]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__Experiment swig_types[323]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__ExperimentImplementation swig_types[324]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__ExponentialRBF swig_types[325]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__FORM swig_types[326]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__FORMResult swig_types[327]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__Factorial swig_types[328]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__FixedExperiment swig_types[329]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__FixedStrategy swig_types[330]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosAlgorithm swig_types[331]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosResult swig_types[332]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__GramSchmidtAlgorithm swig_types[333]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__HermiteFactory swig_types[334]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__HyperbolicAnisotropicEnumerateFunction swig_types[335]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__ImportanceSampling swig_types[336]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__ImportanceSamplingExperiment swig_types[337]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__IntegrationStrategy swig_types[338]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaEvaluation swig_types[339]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaGradient swig_types[340]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaHessian swig_types[341]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionEvaluation swig_types[342]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionGradient swig_types[343]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionHessian swig_types[344]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaEvaluation swig_types[345]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaGradient swig_types[346]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaHessian swig_types[347]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__InverseRosenblattEvaluation swig_types[348]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__JacobiFactory swig_types[349]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__LHS swig_types[350]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__LHSExperiment swig_types[351]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__LaguerreFactory swig_types[352]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__LeastSquaresStrategy swig_types[353]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__LegendreFactory swig_types[354]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__LinearEnumerateFunction swig_types[355]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__LowDiscrepancyExperiment swig_types[356]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationEvaluation swig_types[357]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationGradient swig_types[358]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationHessian swig_types[359]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__MediumSafe swig_types[360]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__MetaModelAlgorithm swig_types[361]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__MetaModelResult swig_types[362]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__MonteCarlo swig_types[363]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__MonteCarloExperiment swig_types[364]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaEvaluation swig_types[365]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaGradient swig_types[366]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaHessian swig_types[367]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionEvaluation swig_types[368]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionGradient swig_types[369]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionHessian swig_types[370]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaEvaluation swig_types[371]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaGradient swig_types[372]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaHessian swig_types[373]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__NormalRBF swig_types[374]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalBasis swig_types[375]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalDirection swig_types[376]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalFunctionFactory swig_types[377]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalProductPolynomialFactory swig_types[378]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomial swig_types[379]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFactory swig_types[380]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFamily swig_types[381]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithm swig_types[382]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithmImplementation swig_types[383]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__PolynomialKernel swig_types[384]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalControlledImportanceSampling swig_types[385]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalImportanceSampling swig_types[386]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalSimulation swig_types[387]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategy swig_types[388]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategyImplementation swig_types[389]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__QuadraticCumul swig_types[390]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarlo swig_types[391]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarloResult swig_types[392]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__RandomDirection swig_types[393]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__RationalKernel swig_types[394]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__RiskyAndFast swig_types[395]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__RootStrategy swig_types[396]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__RootStrategyImplementation swig_types[397]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__RosenblattEvaluation swig_types[398]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__SORM swig_types[399]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__SORMResult swig_types[400]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__SVMKernel swig_types[401]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__SVMKernelImplementation swig_types[402]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionEvaluation swig_types[403]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionGradient swig_types[404]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionHessian swig_types[405]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__SafeAndSlow swig_types[406]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__SamplingStrategy swig_types[407]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__SamplingStrategyImplementation swig_types[408]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__SequentialStrategy swig_types[409]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__Simulation swig_types[410]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__SimulationResult swig_types[411]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__SimulationResultImplementation swig_types[412]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__StandardDistributionPolynomialFactory swig_types[413]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__StratifiedExperiment swig_types[414]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__StrongMaximumTest swig_types[415]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Algorithm__WeightedExperiment swig_types[416]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Arcsine swig_types[417]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__ArcsineFactory swig_types[418]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Bernoulli swig_types[419]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__BernoulliFactory swig_types[420]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Beta swig_types[421]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__BetaFactory swig_types[422]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Binomial swig_types[423]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__BinomialFactory swig_types[424]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Burr swig_types[425]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Chi swig_types[426]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__ChiFactory swig_types[427]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__ChiSquare swig_types[428]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__ChiSquareFactory swig_types[429]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__ClaytonCopula swig_types[430]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__ClaytonCopulaFactory swig_types[431]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__ComposedCopula swig_types[432]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__ComposedDistribution swig_types[433]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Dirichlet swig_types[434]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__DirichletFactory swig_types[435]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Epanechnikov swig_types[436]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Exponential swig_types[437]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__ExponentialFactory swig_types[438]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__FrankCopula swig_types[439]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__FrankCopulaFactory swig_types[440]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Gamma swig_types[441]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__GammaFactory swig_types[442]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Geometric swig_types[443]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__GeometricFactory swig_types[444]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Gumbel swig_types[445]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__GumbelCopula swig_types[446]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__GumbelCopulaFactory swig_types[447]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__GumbelFactory swig_types[448]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Histogram swig_types[449]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__HistogramFactory swig_types[450]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__HistogramPair swig_types[451]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__IndependentCopula swig_types[452]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__InverseNormal swig_types[453]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__KernelMixture swig_types[454]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__KernelSmoothing swig_types[455]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Laplace swig_types[456]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__LaplaceFactory swig_types[457]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__LogNormal swig_types[458]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__LogNormalFactory swig_types[459]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Logistic swig_types[460]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__LogisticFactory swig_types[461]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Mixture swig_types[462]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Multinomial swig_types[463]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__MultinomialFactory swig_types[464]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__NonCentralChiSquare swig_types[465]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__NonCentralStudent swig_types[466]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Normal swig_types[467]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__NormalCopula swig_types[468]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__NormalCopulaFactory swig_types[469]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__NormalFactory swig_types[470]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Poisson swig_types[471]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__PoissonFactory swig_types[472]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__RandomMixture swig_types[473]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Rayleigh swig_types[474]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__RayleighFactory swig_types[475]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Rice swig_types[476]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Student swig_types[477]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__StudentFactory swig_types[478]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Trapezoidal swig_types[479]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__TrapezoidalFactory swig_types[480]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Triangular swig_types[481]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__TriangularFactory swig_types[482]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__TruncatedDistribution swig_types[483]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__TruncatedNormal swig_types[484]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__TruncatedNormalFactory swig_types[485]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Uniform swig_types[486]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__UniformFactory swig_types[487]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__UserDefined swig_types[488]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__UserDefinedFactory swig_types[489]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__UserDefinedPair swig_types[490]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__Weibull swig_types[491]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__WeibullFactory swig_types[492]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Distribution__ZipfMandelbrot swig_types[493]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Model__ArchimedeanCopula swig_types[494]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Model__CompositeRandomVector swig_types[495]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Model__ConditionalRandomVector swig_types[496]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Model__ConstantRandomVector swig_types[497]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Model__ContinuousDistribution swig_types[498]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Model__Copula swig_types[499]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Model__CopulaImplementation swig_types[500]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Model__DiscreteDistribution swig_types[501]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Model__Distribution swig_types[502]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Model__DistributionFactory swig_types[503]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Model__DistributionImplementation swig_types[504]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory swig_types[505]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Model__EllipticalDistribution swig_types[506]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Model__Event swig_types[507]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Model__EventRandomVectorImplementation swig_types[508]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Model__FunctionalChaosRandomVector swig_types[509]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Model__NonEllipticalDistribution swig_types[510]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Model__RandomVector swig_types[511]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Model__RandomVectorImplementation swig_types[512]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Model__SklarCopula swig_types[513]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Model__StandardEvent swig_types[514]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Model__UsualDistribution swig_types[515]
#define SWIGTYPE_p_OpenTURNS__Uncertainty__Model__UsualRandomVector swig_types[516]
#define SWIGTYPE_p_OptimizationProblem swig_types[517]
#define SWIGTYPE_p_OutOfBoundException swig_types[518]
#define SWIGTYPE_p_PersistentObject swig_types[519]
#define SWIGTYPE_p_Poisson swig_types[520]
#define SWIGTYPE_p_PolynomialCollection swig_types[521]
#define SWIGTYPE_p_PolynomialFamilyCollection swig_types[522]
#define SWIGTYPE_p_PolynomialFamilyPersistentCollection swig_types[523]
#define SWIGTYPE_p_PolynomialPersistentCollection swig_types[524]
#define SWIGTYPE_p_RandomVector swig_types[525]
#define SWIGTYPE_p_Result swig_types[526]
#define SWIGTYPE_p_SQPSpecificParameters swig_types[527]
#define SWIGTYPE_p_SVMEvaluation swig_types[528]
#define SWIGTYPE_p_SVMKernel swig_types[529]
#define SWIGTYPE_p_SVMKernelRegressionEvaluation swig_types[530]
#define SWIGTYPE_p_Sensitivity swig_types[531]
#define SWIGTYPE_p_Severity swig_types[532]
#define SWIGTYPE_p_SimplePoint swig_types[533]
#define SWIGTYPE_p_SobolIndiceParameters swig_types[534]
#define SWIGTYPE_p_SobolIndiceResult swig_types[535]
#define SWIGTYPE_p_SobolSequence swig_types[536]
#define SWIGTYPE_p_Solver swig_types[537]
#define SWIGTYPE_p_SpecFunc swig_types[538]
#define SWIGTYPE_p_SquareMatrix swig_types[539]
#define SWIGTYPE_p_StandardEvent swig_types[540]
#define SWIGTYPE_p_State swig_types[541]
#define SWIGTYPE_p_StorageManager swig_types[542]
#define SWIGTYPE_p_StorageManagerImplementation swig_types[543]
#define SWIGTYPE_p_SymmetricMatrix swig_types[544]
#define SWIGTYPE_p_SymmetricTensor swig_types[545]
#define SWIGTYPE_p_TNCSpecificParameters swig_types[546]
#define SWIGTYPE_p_Tensor swig_types[547]
#define SWIGTYPE_p_TestResult swig_types[548]
#define SWIGTYPE_p_TestResultCollection swig_types[549]
#define SWIGTYPE_p_UniVariatePolynomial swig_types[550]
#define SWIGTYPE_p_UnsignedLongCollection swig_types[551]
#define SWIGTYPE_p_UnsignedLongPersistentCollection swig_types[552]
#define SWIGTYPE_p_UserDefinedPairCollection swig_types[553]
#define SWIGTYPE_p_UserDefinedPairPersistentCollection swig_types[554]
#define SWIGTYPE_p_Value swig_types[555]
#define SWIGTYPE_p_ValueType swig_types[556]
#define SWIGTYPE_p_VariableListType swig_types[557]
#define SWIGTYPE_p_WeightedExperimentImplementation swig_types[558]
#define SWIGTYPE_p_WrapperFileParsingException swig_types[559]
#define SWIGTYPE_p_WrapperInternalException swig_types[560]
#define SWIGTYPE_p_allocator_type swig_types[561]
#define SWIGTYPE_p_bool swig_types[562]
#define SWIGTYPE_p_char swig_types[563]
#define SWIGTYPE_p_const_internalIterator swig_types[564]
#define SWIGTYPE_p_const_iterator swig_types[565]
#define SWIGTYPE_p_const_reverse_iterator swig_types[566]
#define SWIGTYPE_p_difference_type swig_types[567]
#define SWIGTYPE_p_double swig_types[568]
#define SWIGTYPE_p_iterator swig_types[569]
#define SWIGTYPE_p_key_type swig_types[570]
#define SWIGTYPE_p_long swig_types[571]
#define SWIGTYPE_p_mapped_type swig_types[572]
#define SWIGTYPE_p_pointer_type swig_types[573]
#define SWIGTYPE_p_reverse_iterator swig_types[574]
#define SWIGTYPE_p_size_type swig_types[575]
#define SWIGTYPE_p_std__complexT_double_t swig_types[576]
#define SWIGTYPE_p_std__string swig_types[577]
#define SWIGTYPE_p_unsigned_long swig_types[578]
#define SWIGTYPE_p_value_type swig_types[579]
static swig_type_info *swig_types[581];
static swig_module_info swig_module = {swig_types, 580, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _integralcompoundpoisson.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__integralcompoundpoisson

#else
#  define SWIG_init    init_integralcompoundpoisson

#endif
#define SWIG_name    "_integralcompoundpoisson"

#define SWIGVERSION 0x010340 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include "OTconfig.hxx"
#include "OTCommon.hxx"
#include "OTType.hxx"
#include "OTStat.hxx"
#include "OTGraph.hxx"
#include "PythonWrappingFunctions.hxx"

  
namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };
}


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


#include "IntegralUserDefined.hxx"


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  if (s.size()) {
    return SWIG_FromCharPtrAndSize(s.data(), s.size());
  } else {
    return SWIG_FromCharPtrAndSize(s.c_str(), 0);
  }
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}

SWIGINTERN IntegralCompoundPoisson::IntegralUserDefined *new_IntegralCompoundPoisson_IntegralUserDefined__SWIG_2(IntegralCompoundPoisson::IntegralUserDefined const &other){ return new IntegralCompoundPoisson::IntegralUserDefined(other); }

#include "IntegralUserDefinedFactory.hxx"

SWIGINTERN IntegralCompoundPoisson::IntegralUserDefinedFactory *new_IntegralCompoundPoisson_IntegralUserDefinedFactory__SWIG_1(IntegralCompoundPoisson::IntegralUserDefinedFactory const &other){ return new IntegralCompoundPoisson::IntegralUserDefinedFactory(other); }

#include "IntegralCompoundPoisson.hxx"


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


  #define SWIG_From_double   PyFloat_FromDouble 

SWIGINTERN IntegralCompoundPoisson::IntegralCompoundPoisson *new_IntegralCompoundPoisson_IntegralCompoundPoisson__SWIG_3(IntegralCompoundPoisson::IntegralCompoundPoisson const &other){ return new IntegralCompoundPoisson::IntegralCompoundPoisson(other); }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_IntegralUserDefined_GetClassName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OT::String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":IntegralUserDefined_GetClassName")) SWIG_fail;
  {
    try {
      result = (OT::String *) &IntegralCompoundPoisson::IntegralUserDefined::GetClassName();
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralUserDefined_getClassName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralUserDefined *arg1 = (IntegralCompoundPoisson::IntegralUserDefined *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OT::String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntegralUserDefined_getClassName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralUserDefined_getClassName" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralUserDefined const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralUserDefined * >(argp1);
  {
    try {
      result = (OT::String *) &((IntegralCompoundPoisson::IntegralUserDefined const *)arg1)->getClassName();
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntegralUserDefined__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralUserDefined *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IntegralUserDefined")) SWIG_fail;
  {
    try {
      result = (IntegralCompoundPoisson::IntegralUserDefined *)new IntegralCompoundPoisson::IntegralUserDefined();
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefined, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntegralUserDefined__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::UnsignedLongCollection *arg1 = 0 ;
  IntegralCompoundPoisson::IntegralUserDefined::NumericalPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  IntegralCompoundPoisson::IntegralUserDefined::NumericalPoint temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IntegralCompoundPoisson::IntegralUserDefined *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IntegralUserDefined",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_OpenTURNS__Base__Type__CollectionT_unsigned_long_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IntegralUserDefined" "', argument " "1"" of type '" "IntegralCompoundPoisson::UnsignedLongCollection const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IntegralUserDefined" "', argument " "1"" of type '" "IntegralCompoundPoisson::UnsignedLongCollection const &""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::UnsignedLongCollection * >(argp1);
  {
    if (! SWIG_IsOK(SWIG_ConvertPtr(obj1, (void **) &arg2, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0))) {
      temp2 = OpenTURNS::convert<OpenTURNS::_PySequence_,OpenTURNS::Base::Type::NumericalPoint>( obj1 );
      arg2 = &temp2;
    }
  }
  {
    try {
      result = (IntegralCompoundPoisson::IntegralUserDefined *)new IntegralCompoundPoisson::IntegralUserDefined((IntegralCompoundPoisson::UnsignedLongCollection const &)*arg1,(IntegralCompoundPoisson::IntegralUserDefined::NumericalPoint const &)*arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefined, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralUserDefined___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralUserDefined *arg1 = (IntegralCompoundPoisson::IntegralUserDefined *) 0 ;
  IntegralCompoundPoisson::IntegralUserDefined *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IntegralCompoundPoisson::Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegralUserDefined___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralUserDefined___eq__" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralUserDefined const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralUserDefined * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefined,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntegralUserDefined___eq__" "', argument " "2"" of type '" "IntegralCompoundPoisson::IntegralUserDefined const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntegralUserDefined___eq__" "', argument " "2"" of type '" "IntegralCompoundPoisson::IntegralUserDefined const &""'"); 
  }
  arg2 = reinterpret_cast< IntegralCompoundPoisson::IntegralUserDefined * >(argp2);
  {
    try {
      result = (IntegralCompoundPoisson::Bool)((IntegralCompoundPoisson::IntegralUserDefined const *)arg1)->operator ==((IntegralCompoundPoisson::IntegralUserDefined const &)*arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralUserDefined___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralUserDefined *arg1 = (IntegralCompoundPoisson::IntegralUserDefined *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IntegralCompoundPoisson::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntegralUserDefined___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralUserDefined___repr__" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralUserDefined const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralUserDefined * >(argp1);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralUserDefined const *)arg1)->__repr__();
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralUserDefined_isIntegral(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralUserDefined *arg1 = (IntegralCompoundPoisson::IntegralUserDefined *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IntegralCompoundPoisson::Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntegralUserDefined_isIntegral",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralUserDefined_isIntegral" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralUserDefined const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralUserDefined * >(argp1);
  {
    try {
      result = (IntegralCompoundPoisson::Bool)((IntegralCompoundPoisson::IntegralUserDefined const *)arg1)->isIntegral();
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralUserDefined_getIntegralSupport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralUserDefined *arg1 = (IntegralCompoundPoisson::IntegralUserDefined *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IntegralCompoundPoisson::UnsignedLongCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntegralUserDefined_getIntegralSupport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralUserDefined_getIntegralSupport" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralUserDefined const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralUserDefined * >(argp1);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralUserDefined const *)arg1)->getIntegralSupport();
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new IntegralCompoundPoisson::UnsignedLongCollection(static_cast< const IntegralCompoundPoisson::UnsignedLongCollection& >(result))), SWIGTYPE_p_OpenTURNS__Base__Type__CollectionT_unsigned_long_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralUserDefined_getSupport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralUserDefined *arg1 = (IntegralCompoundPoisson::IntegralUserDefined *) 0 ;
  IntegralCompoundPoisson::IntegralUserDefined::Interval *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IntegralCompoundPoisson::IntegralUserDefined::NumericalSample result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegralUserDefined_getSupport",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralUserDefined_getSupport" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralUserDefined const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralUserDefined * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_OpenTURNS__Base__Type__Interval,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntegralUserDefined_getSupport" "', argument " "2"" of type '" "IntegralCompoundPoisson::IntegralUserDefined::Interval const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntegralUserDefined_getSupport" "', argument " "2"" of type '" "IntegralCompoundPoisson::IntegralUserDefined::Interval const &""'"); 
  }
  arg2 = reinterpret_cast< IntegralCompoundPoisson::IntegralUserDefined::Interval * >(argp2);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralUserDefined const *)arg1)->getSupport((IntegralCompoundPoisson::IntegralUserDefined::Interval const &)*arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new IntegralCompoundPoisson::IntegralUserDefined::NumericalSample(static_cast< const IntegralCompoundPoisson::IntegralUserDefined::NumericalSample& >(result))), SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralUserDefined_getWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralUserDefined *arg1 = (IntegralCompoundPoisson::IntegralUserDefined *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IntegralCompoundPoisson::IntegralUserDefined::NumericalPoint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntegralUserDefined_getWeights",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralUserDefined_getWeights" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralUserDefined const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralUserDefined * >(argp1);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralUserDefined const *)arg1)->getWeights();
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new IntegralCompoundPoisson::IntegralUserDefined::NumericalPoint(static_cast< const IntegralCompoundPoisson::IntegralUserDefined::NumericalPoint& >(result))), SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralUserDefined_getNormalizedWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralUserDefined *arg1 = (IntegralCompoundPoisson::IntegralUserDefined *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IntegralCompoundPoisson::IntegralUserDefined::NumericalPoint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntegralUserDefined_getNormalizedWeights",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralUserDefined_getNormalizedWeights" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralUserDefined const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralUserDefined * >(argp1);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralUserDefined const *)arg1)->getNormalizedWeights();
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new IntegralCompoundPoisson::IntegralUserDefined::NumericalPoint(static_cast< const IntegralCompoundPoisson::IntegralUserDefined::NumericalPoint& >(result))), SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntegralUserDefined__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralUserDefined *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IntegralCompoundPoisson::IntegralUserDefined *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IntegralUserDefined",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefined,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IntegralUserDefined" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralUserDefined const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IntegralUserDefined" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralUserDefined const &""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralUserDefined * >(argp1);
  {
    try {
      result = (IntegralCompoundPoisson::IntegralUserDefined *)new_IntegralCompoundPoisson_IntegralUserDefined__SWIG_2((IntegralCompoundPoisson::IntegralUserDefined const &)*arg1);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefined, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntegralUserDefined(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_IntegralUserDefined__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefined, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IntegralUserDefined__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_OpenTURNS__Base__Type__CollectionT_unsigned_long_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = SWIG_IsOK(SWIG_ConvertPtr(argv[1], NULL, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0)) || OpenTURNS::isAPythonSequenceOf<OpenTURNS::_PyFloat_>( argv[1] );
      }
      if (_v) {
        return _wrap_new_IntegralUserDefined__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_IntegralUserDefined'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IntegralCompoundPoisson::IntegralUserDefined()\n"
    "    IntegralCompoundPoisson::IntegralUserDefined(IntegralCompoundPoisson::UnsignedLongCollection const &,IntegralCompoundPoisson::IntegralUserDefined::NumericalPoint const &)\n"
    "    IntegralCompoundPoisson::IntegralUserDefined(IntegralCompoundPoisson::IntegralUserDefined const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntegralUserDefined(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralUserDefined *arg1 = (IntegralCompoundPoisson::IntegralUserDefined *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IntegralUserDefined",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefined, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntegralUserDefined" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralUserDefined *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralUserDefined * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntegralUserDefined_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefined, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IntegralUserDefinedFactory_GetClassName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OT::String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":IntegralUserDefinedFactory_GetClassName")) SWIG_fail;
  {
    try {
      result = (OT::String *) &IntegralCompoundPoisson::IntegralUserDefinedFactory::GetClassName();
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralUserDefinedFactory_getClassName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralUserDefinedFactory *arg1 = (IntegralCompoundPoisson::IntegralUserDefinedFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OT::String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntegralUserDefinedFactory_getClassName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefinedFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralUserDefinedFactory_getClassName" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralUserDefinedFactory const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralUserDefinedFactory * >(argp1);
  {
    try {
      result = (OT::String *) &((IntegralCompoundPoisson::IntegralUserDefinedFactory const *)arg1)->getClassName();
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntegralUserDefinedFactory__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralUserDefinedFactory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IntegralUserDefinedFactory")) SWIG_fail;
  {
    try {
      result = (IntegralCompoundPoisson::IntegralUserDefinedFactory *)new IntegralCompoundPoisson::IntegralUserDefinedFactory();
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefinedFactory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralUserDefinedFactory_buildImplementation__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralUserDefinedFactory *arg1 = (IntegralCompoundPoisson::IntegralUserDefinedFactory *) 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalSample *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalSample temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegralUserDefinedFactory_buildImplementation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefinedFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralUserDefinedFactory_buildImplementation" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralUserDefinedFactory const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralUserDefinedFactory * >(argp1);
  {
    if (! SWIG_IsOK(SWIG_ConvertPtr(obj1, (void **) &arg2, SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, 0))) {
      temp2 = OpenTURNS::convert<OpenTURNS::_PySequence_,OpenTURNS::Base::Stat::NumericalSample>( obj1 );
      arg2 = &temp2;
    }
  }
  {
    try {
      result = (OpenTURNS::Uncertainty::Model::DistributionImplementation *)((IntegralCompoundPoisson::IntegralUserDefinedFactory const *)arg1)->buildImplementation((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalSample const &)*arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralUserDefinedFactory_buildImplementation__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralUserDefinedFactory *arg1 = (IntegralCompoundPoisson::IntegralUserDefinedFactory *) 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalSample *arg2 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::CovarianceMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalSample temp2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntegralUserDefinedFactory_buildImplementation",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefinedFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralUserDefinedFactory_buildImplementation" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralUserDefinedFactory const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralUserDefinedFactory * >(argp1);
  {
    if (! SWIG_IsOK(SWIG_ConvertPtr(obj1, (void **) &arg2, SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, 0))) {
      temp2 = OpenTURNS::convert<OpenTURNS::_PySequence_,OpenTURNS::Base::Stat::NumericalSample>( obj1 );
      arg2 = &temp2;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_OpenTURNS__Base__Stat__CovarianceMatrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IntegralUserDefinedFactory_buildImplementation" "', argument " "3"" of type '" "OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::CovarianceMatrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntegralUserDefinedFactory_buildImplementation" "', argument " "3"" of type '" "OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::CovarianceMatrix &""'"); 
  }
  arg3 = reinterpret_cast< OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::CovarianceMatrix * >(argp3);
  {
    try {
      result = (OpenTURNS::Uncertainty::Model::DistributionImplementation *)((IntegralCompoundPoisson::IntegralUserDefinedFactory const *)arg1)->buildImplementation((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalSample const &)*arg2,*arg3);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralUserDefinedFactory_buildImplementation__SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralUserDefinedFactory *arg1 = (IntegralCompoundPoisson::IntegralUserDefinedFactory *) 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalPointCollection *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegralUserDefinedFactory_buildImplementation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefinedFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralUserDefinedFactory_buildImplementation" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralUserDefinedFactory const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralUserDefinedFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPoint_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntegralUserDefinedFactory_buildImplementation" "', argument " "2"" of type '" "OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalPointCollection const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntegralUserDefinedFactory_buildImplementation" "', argument " "2"" of type '" "OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalPointCollection const &""'"); 
  }
  arg2 = reinterpret_cast< OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalPointCollection * >(argp2);
  {
    try {
      result = (OpenTURNS::Uncertainty::Model::DistributionImplementation *)((IntegralCompoundPoisson::IntegralUserDefinedFactory const *)arg1)->buildImplementation((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalPointCollection const &)*arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralUserDefinedFactory_buildImplementation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralUserDefinedFactory *arg1 = (IntegralCompoundPoisson::IntegralUserDefinedFactory *) 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalSample *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalSample temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IntegralCompoundPoisson::IntegralUserDefined *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegralUserDefinedFactory_buildImplementation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefinedFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralUserDefinedFactory_buildImplementation" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralUserDefinedFactory const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralUserDefinedFactory * >(argp1);
  {
    if (! SWIG_IsOK(SWIG_ConvertPtr(obj1, (void **) &arg2, SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, 0))) {
      temp2 = OpenTURNS::convert<OpenTURNS::_PySequence_,OpenTURNS::Base::Stat::NumericalSample>( obj1 );
      arg2 = &temp2;
    }
  }
  {
    try {
      result = (IntegralCompoundPoisson::IntegralUserDefined *)((IntegralCompoundPoisson::IntegralUserDefinedFactory const *)arg1)->buildImplementation((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalSample const &)*arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefined, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralUserDefinedFactory_buildImplementation__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralUserDefinedFactory *arg1 = (IntegralCompoundPoisson::IntegralUserDefinedFactory *) 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalPointCollection *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IntegralCompoundPoisson::IntegralUserDefined *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegralUserDefinedFactory_buildImplementation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefinedFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralUserDefinedFactory_buildImplementation" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralUserDefinedFactory const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralUserDefinedFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPoint_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntegralUserDefinedFactory_buildImplementation" "', argument " "2"" of type '" "OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalPointCollection const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntegralUserDefinedFactory_buildImplementation" "', argument " "2"" of type '" "OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalPointCollection const &""'"); 
  }
  arg2 = reinterpret_cast< OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalPointCollection * >(argp2);
  {
    try {
      result = (IntegralCompoundPoisson::IntegralUserDefined *)((IntegralCompoundPoisson::IntegralUserDefinedFactory const *)arg1)->buildImplementation((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalPointCollection const &)*arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefined, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralUserDefinedFactory_buildImplementation__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralUserDefinedFactory *arg1 = (IntegralCompoundPoisson::IntegralUserDefinedFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IntegralCompoundPoisson::IntegralUserDefined *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntegralUserDefinedFactory_buildImplementation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefinedFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralUserDefinedFactory_buildImplementation" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralUserDefinedFactory const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralUserDefinedFactory * >(argp1);
  {
    try {
      result = (IntegralCompoundPoisson::IntegralUserDefined *)((IntegralCompoundPoisson::IntegralUserDefinedFactory const *)arg1)->buildImplementation();
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefined, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralUserDefinedFactory_buildImplementation(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefinedFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IntegralUserDefinedFactory_buildImplementation__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefinedFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPoint_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IntegralUserDefinedFactory_buildImplementation__SWIG_0_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefinedFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = SWIG_IsOK(SWIG_ConvertPtr(argv[1], NULL, SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, 0)) || OpenTURNS::isAPythonSequenceOf<OpenTURNS::_PySequence_>( argv[1] );
      }
      if (_v) {
        return _wrap_IntegralUserDefinedFactory_buildImplementation__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefinedFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPoint_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IntegralUserDefinedFactory_buildImplementation__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefinedFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = SWIG_IsOK(SWIG_ConvertPtr(argv[1], NULL, SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, 0)) || OpenTURNS::isAPythonSequenceOf<OpenTURNS::_PySequence_>( argv[1] );
      }
      if (_v) {
        return _wrap_IntegralUserDefinedFactory_buildImplementation__SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefinedFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = SWIG_IsOK(SWIG_ConvertPtr(argv[1], NULL, SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, 0)) || OpenTURNS::isAPythonSequenceOf<OpenTURNS::_PySequence_>( argv[1] );
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_OpenTURNS__Base__Stat__CovarianceMatrix, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IntegralUserDefinedFactory_buildImplementation__SWIG_0_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IntegralUserDefinedFactory_buildImplementation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    buildImplementation(IntegralCompoundPoisson::IntegralUserDefinedFactory const *,OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalSample const &)\n"
    "    buildImplementation(IntegralCompoundPoisson::IntegralUserDefinedFactory const *,OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalSample const &,OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::CovarianceMatrix &)\n"
    "    buildImplementation(IntegralCompoundPoisson::IntegralUserDefinedFactory const *,OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalPointCollection const &)\n"
    "    buildImplementation(IntegralCompoundPoisson::IntegralUserDefinedFactory const *,OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalSample const &)\n"
    "    buildImplementation(IntegralCompoundPoisson::IntegralUserDefinedFactory const *,OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalPointCollection const &)\n"
    "    buildImplementation(IntegralCompoundPoisson::IntegralUserDefinedFactory const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntegralUserDefinedFactory__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralUserDefinedFactory *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IntegralCompoundPoisson::IntegralUserDefinedFactory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IntegralUserDefinedFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefinedFactory,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IntegralUserDefinedFactory" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralUserDefinedFactory const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IntegralUserDefinedFactory" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralUserDefinedFactory const &""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralUserDefinedFactory * >(argp1);
  {
    try {
      result = (IntegralCompoundPoisson::IntegralUserDefinedFactory *)new_IntegralCompoundPoisson_IntegralUserDefinedFactory__SWIG_1((IntegralCompoundPoisson::IntegralUserDefinedFactory const &)*arg1);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefinedFactory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntegralUserDefinedFactory(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_IntegralUserDefinedFactory__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefinedFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IntegralUserDefinedFactory__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_IntegralUserDefinedFactory'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IntegralCompoundPoisson::IntegralUserDefinedFactory()\n"
    "    IntegralCompoundPoisson::IntegralUserDefinedFactory(IntegralCompoundPoisson::IntegralUserDefinedFactory const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntegralUserDefinedFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralUserDefinedFactory *arg1 = (IntegralCompoundPoisson::IntegralUserDefinedFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IntegralUserDefinedFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefinedFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntegralUserDefinedFactory" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralUserDefinedFactory *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralUserDefinedFactory * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntegralUserDefinedFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefinedFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_GetClassName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OT::String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":IntegralCompoundPoisson_GetClassName")) SWIG_fail;
  {
    try {
      result = (OT::String *) &IntegralCompoundPoisson::IntegralCompoundPoisson::GetClassName();
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_getClassName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OT::String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntegralCompoundPoisson_getClassName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_getClassName" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  {
    try {
      result = (OT::String *) &((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->getClassName();
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntegralCompoundPoisson__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IntegralCompoundPoisson")) SWIG_fail;
  {
    try {
      result = (IntegralCompoundPoisson::IntegralCompoundPoisson *)new IntegralCompoundPoisson::IntegralCompoundPoisson();
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntegralCompoundPoisson__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralUserDefined *arg1 = 0 ;
  IntegralCompoundPoisson::NumericalScalar arg2 ;
  IntegralCompoundPoisson::UnsignedLong arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  IntegralCompoundPoisson::IntegralCompoundPoisson *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_IntegralCompoundPoisson",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefined,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IntegralCompoundPoisson" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralUserDefined const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IntegralCompoundPoisson" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralUserDefined const &""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralUserDefined * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IntegralCompoundPoisson" "', argument " "2"" of type '" "IntegralCompoundPoisson::NumericalScalar""'");
  } 
  arg2 = static_cast< IntegralCompoundPoisson::NumericalScalar >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_IntegralCompoundPoisson" "', argument " "3"" of type '" "IntegralCompoundPoisson::UnsignedLong""'");
  } 
  arg3 = static_cast< IntegralCompoundPoisson::UnsignedLong >(val3);
  {
    try {
      result = (IntegralCompoundPoisson::IntegralCompoundPoisson *)new IntegralCompoundPoisson::IntegralCompoundPoisson((IntegralCompoundPoisson::IntegralUserDefined const &)*arg1,arg2,arg3);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntegralCompoundPoisson__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralUserDefined *arg1 = 0 ;
  IntegralCompoundPoisson::NumericalScalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IntegralCompoundPoisson::IntegralCompoundPoisson *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IntegralCompoundPoisson",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefined,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IntegralCompoundPoisson" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralUserDefined const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IntegralCompoundPoisson" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralUserDefined const &""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralUserDefined * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IntegralCompoundPoisson" "', argument " "2"" of type '" "IntegralCompoundPoisson::NumericalScalar""'");
  } 
  arg2 = static_cast< IntegralCompoundPoisson::NumericalScalar >(val2);
  {
    try {
      result = (IntegralCompoundPoisson::IntegralCompoundPoisson *)new IntegralCompoundPoisson::IntegralCompoundPoisson((IntegralCompoundPoisson::IntegralUserDefined const &)*arg1,arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IntegralCompoundPoisson::IntegralCompoundPoisson::Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegralCompoundPoisson___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson___eq__" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntegralCompoundPoisson___eq__" "', argument " "2"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntegralCompoundPoisson___eq__" "', argument " "2"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const &""'"); 
  }
  arg2 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp2);
  {
    try {
      result = (IntegralCompoundPoisson::IntegralCompoundPoisson::Bool)((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->operator ==((IntegralCompoundPoisson::IntegralCompoundPoisson const &)*arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenTURNS::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntegralCompoundPoisson___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson___repr__" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->__repr__();
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_getRealization(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntegralCompoundPoisson_getRealization",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_getRealization" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->getRealization();
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint(static_cast< const IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint& >(result))), SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computeQuantile__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::NumericalScalar arg2 ;
  OpenTURNS::Bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntegralCompoundPoisson_computeQuantile",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_computeQuantile" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_computeQuantile" "', argument " "2"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg2 = static_cast< OpenTURNS::NumericalScalar >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegralCompoundPoisson_computeQuantile" "', argument " "3"" of type '" "OpenTURNS::Bool""'");
  } 
  arg3 = static_cast< OpenTURNS::Bool >(val3);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->computeQuantile(arg2,arg3);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint& >(result))), SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computeQuantile__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::NumericalScalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegralCompoundPoisson_computeQuantile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_computeQuantile" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_computeQuantile" "', argument " "2"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg2 = static_cast< OpenTURNS::NumericalScalar >(val2);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->computeQuantile(arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint& >(result))), SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computeQuantile__SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::NumericalScalar arg2 ;
  OpenTURNS::NumericalScalar arg3 ;
  OpenTURNS::UnsignedLong arg4 ;
  OpenTURNS::NumericalScalar arg5 ;
  OpenTURNS::Bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:IntegralCompoundPoisson_computeQuantile",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_computeQuantile" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_computeQuantile" "', argument " "2"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg2 = static_cast< OpenTURNS::NumericalScalar >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegralCompoundPoisson_computeQuantile" "', argument " "3"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg3 = static_cast< OpenTURNS::NumericalScalar >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IntegralCompoundPoisson_computeQuantile" "', argument " "4"" of type '" "OpenTURNS::UnsignedLong""'");
  } 
  arg4 = static_cast< OpenTURNS::UnsignedLong >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IntegralCompoundPoisson_computeQuantile" "', argument " "5"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg5 = static_cast< OpenTURNS::NumericalScalar >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IntegralCompoundPoisson_computeQuantile" "', argument " "6"" of type '" "OpenTURNS::Bool""'");
  } 
  arg6 = static_cast< OpenTURNS::Bool >(val6);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->computeQuantile(arg2,arg3,arg4,arg5,arg6);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample& >(result))), SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computeQuantile__SWIG_0_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::NumericalScalar arg2 ;
  OpenTURNS::NumericalScalar arg3 ;
  OpenTURNS::UnsignedLong arg4 ;
  OpenTURNS::NumericalScalar arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IntegralCompoundPoisson_computeQuantile",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_computeQuantile" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_computeQuantile" "', argument " "2"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg2 = static_cast< OpenTURNS::NumericalScalar >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegralCompoundPoisson_computeQuantile" "', argument " "3"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg3 = static_cast< OpenTURNS::NumericalScalar >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IntegralCompoundPoisson_computeQuantile" "', argument " "4"" of type '" "OpenTURNS::UnsignedLong""'");
  } 
  arg4 = static_cast< OpenTURNS::UnsignedLong >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IntegralCompoundPoisson_computeQuantile" "', argument " "5"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg5 = static_cast< OpenTURNS::NumericalScalar >(val5);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->computeQuantile(arg2,arg3,arg4,arg5);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample& >(result))), SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computeQuantile__SWIG_0_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::NumericalScalar arg2 ;
  OpenTURNS::NumericalScalar arg3 ;
  OpenTURNS::UnsignedLong arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IntegralCompoundPoisson_computeQuantile",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_computeQuantile" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_computeQuantile" "', argument " "2"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg2 = static_cast< OpenTURNS::NumericalScalar >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegralCompoundPoisson_computeQuantile" "', argument " "3"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg3 = static_cast< OpenTURNS::NumericalScalar >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IntegralCompoundPoisson_computeQuantile" "', argument " "4"" of type '" "OpenTURNS::UnsignedLong""'");
  } 
  arg4 = static_cast< OpenTURNS::UnsignedLong >(val4);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->computeQuantile(arg2,arg3,arg4);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample& >(result))), SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computeQuantile__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  IntegralCompoundPoisson::NumericalScalar arg2 ;
  IntegralCompoundPoisson::IntegralCompoundPoisson::Bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntegralCompoundPoisson_computeQuantile",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_computeQuantile" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_computeQuantile" "', argument " "2"" of type '" "IntegralCompoundPoisson::NumericalScalar""'");
  } 
  arg2 = static_cast< IntegralCompoundPoisson::NumericalScalar >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegralCompoundPoisson_computeQuantile" "', argument " "3"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson::Bool""'");
  } 
  arg3 = static_cast< IntegralCompoundPoisson::IntegralCompoundPoisson::Bool >(val3);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->computeQuantile(arg2,arg3);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint(static_cast< const IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint& >(result))), SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computeQuantile__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  IntegralCompoundPoisson::NumericalScalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegralCompoundPoisson_computeQuantile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_computeQuantile" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_computeQuantile" "', argument " "2"" of type '" "IntegralCompoundPoisson::NumericalScalar""'");
  } 
  arg2 = static_cast< IntegralCompoundPoisson::NumericalScalar >(val2);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->computeQuantile(arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint(static_cast< const IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint& >(result))), SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computeQuantile(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntegralCompoundPoisson_computeQuantile__SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntegralCompoundPoisson_computeQuantile__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntegralCompoundPoisson_computeQuantile__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntegralCompoundPoisson_computeQuantile__SWIG_0_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IntegralCompoundPoisson_computeQuantile__SWIG_0_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_IntegralCompoundPoisson_computeQuantile__SWIG_0_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_IntegralCompoundPoisson_computeQuantile__SWIG_0_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IntegralCompoundPoisson_computeQuantile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    computeQuantile(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::NumericalScalar const,OpenTURNS::Bool const)\n"
    "    computeQuantile(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::NumericalScalar const)\n"
    "    computeQuantile(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::NumericalScalar const,OpenTURNS::NumericalScalar const,OpenTURNS::UnsignedLong const,OpenTURNS::NumericalScalar const,OpenTURNS::Bool const)\n"
    "    computeQuantile(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::NumericalScalar const,OpenTURNS::NumericalScalar const,OpenTURNS::UnsignedLong const,OpenTURNS::NumericalScalar const)\n"
    "    computeQuantile(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::NumericalScalar const,OpenTURNS::NumericalScalar const,OpenTURNS::UnsignedLong const)\n"
    "    computeQuantile(IntegralCompoundPoisson::IntegralCompoundPoisson const *,IntegralCompoundPoisson::NumericalScalar const,IntegralCompoundPoisson::IntegralCompoundPoisson::Bool)\n"
    "    computeQuantile(IntegralCompoundPoisson::IntegralCompoundPoisson const *,IntegralCompoundPoisson::NumericalScalar const)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computePDF__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::NumericalScalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OpenTURNS::NumericalScalar result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegralCompoundPoisson_computePDF",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_computePDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_computePDF" "', argument " "2"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg2 = static_cast< OpenTURNS::NumericalScalar >(val2);
  {
    try {
      result = (OpenTURNS::NumericalScalar)((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->computePDF(arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computePDF__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OpenTURNS::NumericalScalar result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegralCompoundPoisson_computePDF",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_computePDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  {
    if (! SWIG_IsOK(SWIG_ConvertPtr(obj1, (void **) &arg2, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0))) {
      temp2 = OpenTURNS::convert<OpenTURNS::_PySequence_,OpenTURNS::Base::Type::NumericalPoint>( obj1 );
      arg2 = &temp2;
    }
  }
  {
    try {
      result = (OpenTURNS::NumericalScalar)((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->computePDF((OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &)*arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computePDF__SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegralCompoundPoisson_computePDF",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_computePDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  {
    if (! SWIG_IsOK(SWIG_ConvertPtr(obj1, (void **) &arg2, SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, 0))) {
      temp2 = OpenTURNS::convert<OpenTURNS::_PySequence_,OpenTURNS::Base::Stat::NumericalSample>( obj1 );
      arg2 = &temp2;
    }
  }
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->computePDF((OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample const &)*arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample& >(result))), SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computePDF__SWIG_0_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::NumericalScalar arg2 ;
  OpenTURNS::NumericalScalar arg3 ;
  OpenTURNS::UnsignedLong arg4 ;
  OpenTURNS::NumericalScalar arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IntegralCompoundPoisson_computePDF",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_computePDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_computePDF" "', argument " "2"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg2 = static_cast< OpenTURNS::NumericalScalar >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegralCompoundPoisson_computePDF" "', argument " "3"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg3 = static_cast< OpenTURNS::NumericalScalar >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IntegralCompoundPoisson_computePDF" "', argument " "4"" of type '" "OpenTURNS::UnsignedLong""'");
  } 
  arg4 = static_cast< OpenTURNS::UnsignedLong >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IntegralCompoundPoisson_computePDF" "', argument " "5"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg5 = static_cast< OpenTURNS::NumericalScalar >(val5);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->computePDF(arg2,arg3,arg4,arg5);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample& >(result))), SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computePDF__SWIG_0_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::NumericalScalar arg2 ;
  OpenTURNS::NumericalScalar arg3 ;
  OpenTURNS::UnsignedLong arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IntegralCompoundPoisson_computePDF",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_computePDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_computePDF" "', argument " "2"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg2 = static_cast< OpenTURNS::NumericalScalar >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegralCompoundPoisson_computePDF" "', argument " "3"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg3 = static_cast< OpenTURNS::NumericalScalar >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IntegralCompoundPoisson_computePDF" "', argument " "4"" of type '" "OpenTURNS::UnsignedLong""'");
  } 
  arg4 = static_cast< OpenTURNS::UnsignedLong >(val4);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->computePDF(arg2,arg3,arg4);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample& >(result))), SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computePDF__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IntegralCompoundPoisson::NumericalScalar result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegralCompoundPoisson_computePDF",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_computePDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntegralCompoundPoisson_computePDF" "', argument " "2"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntegralCompoundPoisson_computePDF" "', argument " "2"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint const &""'"); 
  }
  arg2 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint * >(argp2);
  {
    try {
      result = (IntegralCompoundPoisson::NumericalScalar)((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->computePDF((IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint const &)*arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computePDF(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = SWIG_IsOK(SWIG_ConvertPtr(argv[1], NULL, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0)) || OpenTURNS::isAPythonSequenceOf<OpenTURNS::_PyFloat_>( argv[1] );
      }
      if (_v) {
        return _wrap_IntegralCompoundPoisson_computePDF__SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = SWIG_IsOK(SWIG_ConvertPtr(argv[1], NULL, SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, 0)) || OpenTURNS::isAPythonSequenceOf<OpenTURNS::_PySequence_>( argv[1] );
      }
      if (_v) {
        return _wrap_IntegralCompoundPoisson_computePDF__SWIG_0_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IntegralCompoundPoisson_computePDF__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntegralCompoundPoisson_computePDF__SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IntegralCompoundPoisson_computePDF__SWIG_0_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_IntegralCompoundPoisson_computePDF__SWIG_0_3(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IntegralCompoundPoisson_computePDF'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    computePDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::NumericalScalar const)\n"
    "    computePDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &)\n"
    "    computePDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample const &)\n"
    "    computePDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::NumericalScalar const,OpenTURNS::NumericalScalar const,OpenTURNS::UnsignedLong const,OpenTURNS::NumericalScalar const)\n"
    "    computePDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::NumericalScalar const,OpenTURNS::NumericalScalar const,OpenTURNS::UnsignedLong const)\n"
    "    computePDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computeCDF__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::NumericalScalar arg2 ;
  OpenTURNS::Bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  OpenTURNS::NumericalScalar result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntegralCompoundPoisson_computeCDF",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "2"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg2 = static_cast< OpenTURNS::NumericalScalar >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "3"" of type '" "OpenTURNS::Bool""'");
  } 
  arg3 = static_cast< OpenTURNS::Bool >(val3);
  {
    try {
      result = (OpenTURNS::NumericalScalar)((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->computeCDF(arg2,arg3);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computeCDF__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::NumericalScalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OpenTURNS::NumericalScalar result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegralCompoundPoisson_computeCDF",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "2"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg2 = static_cast< OpenTURNS::NumericalScalar >(val2);
  {
    try {
      result = (OpenTURNS::NumericalScalar)((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->computeCDF(arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computeCDF__SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint *arg2 = 0 ;
  OpenTURNS::Bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint temp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  OpenTURNS::NumericalScalar result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntegralCompoundPoisson_computeCDF",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  {
    if (! SWIG_IsOK(SWIG_ConvertPtr(obj1, (void **) &arg2, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0))) {
      temp2 = OpenTURNS::convert<OpenTURNS::_PySequence_,OpenTURNS::Base::Type::NumericalPoint>( obj1 );
      arg2 = &temp2;
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "3"" of type '" "OpenTURNS::Bool""'");
  } 
  arg3 = static_cast< OpenTURNS::Bool >(val3);
  {
    try {
      result = (OpenTURNS::NumericalScalar)((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->computeCDF((OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &)*arg2,arg3);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computeCDF__SWIG_0_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OpenTURNS::NumericalScalar result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegralCompoundPoisson_computeCDF",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  {
    if (! SWIG_IsOK(SWIG_ConvertPtr(obj1, (void **) &arg2, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0))) {
      temp2 = OpenTURNS::convert<OpenTURNS::_PySequence_,OpenTURNS::Base::Type::NumericalPoint>( obj1 );
      arg2 = &temp2;
    }
  }
  {
    try {
      result = (OpenTURNS::NumericalScalar)((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->computeCDF((OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &)*arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computeCDF__SWIG_0_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample *arg2 = 0 ;
  OpenTURNS::Bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample temp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntegralCompoundPoisson_computeCDF",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  {
    if (! SWIG_IsOK(SWIG_ConvertPtr(obj1, (void **) &arg2, SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, 0))) {
      temp2 = OpenTURNS::convert<OpenTURNS::_PySequence_,OpenTURNS::Base::Stat::NumericalSample>( obj1 );
      arg2 = &temp2;
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "3"" of type '" "OpenTURNS::Bool""'");
  } 
  arg3 = static_cast< OpenTURNS::Bool >(val3);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->computeCDF((OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample const &)*arg2,arg3);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample& >(result))), SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computeCDF__SWIG_0_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegralCompoundPoisson_computeCDF",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  {
    if (! SWIG_IsOK(SWIG_ConvertPtr(obj1, (void **) &arg2, SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, 0))) {
      temp2 = OpenTURNS::convert<OpenTURNS::_PySequence_,OpenTURNS::Base::Stat::NumericalSample>( obj1 );
      arg2 = &temp2;
    }
  }
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->computeCDF((OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample const &)*arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample& >(result))), SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computeCDF__SWIG_0_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::NumericalScalar arg2 ;
  OpenTURNS::NumericalScalar arg3 ;
  OpenTURNS::UnsignedLong arg4 ;
  OpenTURNS::NumericalScalar arg5 ;
  OpenTURNS::Bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:IntegralCompoundPoisson_computeCDF",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "2"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg2 = static_cast< OpenTURNS::NumericalScalar >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "3"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg3 = static_cast< OpenTURNS::NumericalScalar >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "4"" of type '" "OpenTURNS::UnsignedLong""'");
  } 
  arg4 = static_cast< OpenTURNS::UnsignedLong >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "5"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg5 = static_cast< OpenTURNS::NumericalScalar >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "6"" of type '" "OpenTURNS::Bool""'");
  } 
  arg6 = static_cast< OpenTURNS::Bool >(val6);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->computeCDF(arg2,arg3,arg4,arg5,arg6);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample& >(result))), SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computeCDF__SWIG_0_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::NumericalScalar arg2 ;
  OpenTURNS::NumericalScalar arg3 ;
  OpenTURNS::UnsignedLong arg4 ;
  OpenTURNS::NumericalScalar arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IntegralCompoundPoisson_computeCDF",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "2"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg2 = static_cast< OpenTURNS::NumericalScalar >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "3"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg3 = static_cast< OpenTURNS::NumericalScalar >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "4"" of type '" "OpenTURNS::UnsignedLong""'");
  } 
  arg4 = static_cast< OpenTURNS::UnsignedLong >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "5"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg5 = static_cast< OpenTURNS::NumericalScalar >(val5);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->computeCDF(arg2,arg3,arg4,arg5);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample& >(result))), SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computeCDF__SWIG_0_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::NumericalScalar arg2 ;
  OpenTURNS::NumericalScalar arg3 ;
  OpenTURNS::UnsignedLong arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IntegralCompoundPoisson_computeCDF",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "2"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg2 = static_cast< OpenTURNS::NumericalScalar >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "3"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg3 = static_cast< OpenTURNS::NumericalScalar >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "4"" of type '" "OpenTURNS::UnsignedLong""'");
  } 
  arg4 = static_cast< OpenTURNS::UnsignedLong >(val4);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->computeCDF(arg2,arg3,arg4);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample& >(result))), SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computeCDF__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint *arg2 = 0 ;
  IntegralCompoundPoisson::IntegralCompoundPoisson::Bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  IntegralCompoundPoisson::NumericalScalar result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntegralCompoundPoisson_computeCDF",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "2"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "2"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint const &""'"); 
  }
  arg2 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "3"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson::Bool""'");
  } 
  arg3 = static_cast< IntegralCompoundPoisson::IntegralCompoundPoisson::Bool >(val3);
  {
    try {
      result = (IntegralCompoundPoisson::NumericalScalar)((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->computeCDF((IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint const &)*arg2,arg3);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computeCDF__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IntegralCompoundPoisson::NumericalScalar result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegralCompoundPoisson_computeCDF",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "2"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntegralCompoundPoisson_computeCDF" "', argument " "2"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint const &""'"); 
  }
  arg2 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint * >(argp2);
  {
    try {
      result = (IntegralCompoundPoisson::NumericalScalar)((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->computeCDF((IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint const &)*arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_computeCDF(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = SWIG_IsOK(SWIG_ConvertPtr(argv[1], NULL, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0)) || OpenTURNS::isAPythonSequenceOf<OpenTURNS::_PyFloat_>( argv[1] );
      }
      if (_v) {
        return _wrap_IntegralCompoundPoisson_computeCDF__SWIG_0_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = SWIG_IsOK(SWIG_ConvertPtr(argv[1], NULL, SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, 0)) || OpenTURNS::isAPythonSequenceOf<OpenTURNS::_PySequence_>( argv[1] );
      }
      if (_v) {
        return _wrap_IntegralCompoundPoisson_computeCDF__SWIG_0_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IntegralCompoundPoisson_computeCDF__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntegralCompoundPoisson_computeCDF__SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = SWIG_IsOK(SWIG_ConvertPtr(argv[1], NULL, SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, 0)) || OpenTURNS::isAPythonSequenceOf<OpenTURNS::_PySequence_>( argv[1] );
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntegralCompoundPoisson_computeCDF__SWIG_0_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = SWIG_IsOK(SWIG_ConvertPtr(argv[1], NULL, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0)) || OpenTURNS::isAPythonSequenceOf<OpenTURNS::_PyFloat_>( argv[1] );
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntegralCompoundPoisson_computeCDF__SWIG_0_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntegralCompoundPoisson_computeCDF__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntegralCompoundPoisson_computeCDF__SWIG_0_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IntegralCompoundPoisson_computeCDF__SWIG_0_8(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_IntegralCompoundPoisson_computeCDF__SWIG_0_7(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_IntegralCompoundPoisson_computeCDF__SWIG_0_6(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IntegralCompoundPoisson_computeCDF'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    computeCDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::NumericalScalar const,OpenTURNS::Bool const)\n"
    "    computeCDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::NumericalScalar const)\n"
    "    computeCDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &,OpenTURNS::Bool const)\n"
    "    computeCDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &)\n"
    "    computeCDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample const &,OpenTURNS::Bool const)\n"
    "    computeCDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample const &)\n"
    "    computeCDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::NumericalScalar const,OpenTURNS::NumericalScalar const,OpenTURNS::UnsignedLong const,OpenTURNS::NumericalScalar const,OpenTURNS::Bool const)\n"
    "    computeCDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::NumericalScalar const,OpenTURNS::NumericalScalar const,OpenTURNS::UnsignedLong const,OpenTURNS::NumericalScalar const)\n"
    "    computeCDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::NumericalScalar const,OpenTURNS::NumericalScalar const,OpenTURNS::UnsignedLong const)\n"
    "    computeCDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint const &,IntegralCompoundPoisson::IntegralCompoundPoisson::Bool const)\n"
    "    computeCDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_getNumericalSample__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::UnsignedLong arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegralCompoundPoisson_getNumericalSample",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_getNumericalSample" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_getNumericalSample" "', argument " "2"" of type '" "OpenTURNS::UnsignedLong""'");
  } 
  arg2 = static_cast< OpenTURNS::UnsignedLong >(val2);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->getNumericalSample(arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample& >(result))), SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_getNumericalSample__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  IntegralCompoundPoisson::UnsignedLong arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalSample result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegralCompoundPoisson_getNumericalSample",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_getNumericalSample" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_getNumericalSample" "', argument " "2"" of type '" "IntegralCompoundPoisson::UnsignedLong""'");
  } 
  arg2 = static_cast< IntegralCompoundPoisson::UnsignedLong >(val2);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->getNumericalSample(arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalSample(static_cast< const IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalSample& >(result))), SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalSample, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_getNumericalSample(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntegralCompoundPoisson_getNumericalSample__SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntegralCompoundPoisson_getNumericalSample__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IntegralCompoundPoisson_getNumericalSample'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getNumericalSample(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::UnsignedLong const)\n"
    "    getNumericalSample(IntegralCompoundPoisson::IntegralCompoundPoisson const *,IntegralCompoundPoisson::UnsignedLong const)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_getSupport__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::Interval *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegralCompoundPoisson_getSupport",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_getSupport" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_OpenTURNS__Base__Type__Interval,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntegralCompoundPoisson_getSupport" "', argument " "2"" of type '" "OpenTURNS::Uncertainty::Model::DistributionImplementation::Interval const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntegralCompoundPoisson_getSupport" "', argument " "2"" of type '" "OpenTURNS::Uncertainty::Model::DistributionImplementation::Interval const &""'"); 
  }
  arg2 = reinterpret_cast< OpenTURNS::Uncertainty::Model::DistributionImplementation::Interval * >(argp2);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->getSupport((OpenTURNS::Uncertainty::Model::DistributionImplementation::Interval const &)*arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample& >(result))), SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_getSupport__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntegralCompoundPoisson_getSupport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_getSupport" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->getSupport();
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample& >(result))), SWIGTYPE_p_OpenTURNS__Base__Stat__NumericalSample, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_getSupport__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::Interval *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalSample result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegralCompoundPoisson_getSupport",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_getSupport" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_OpenTURNS__Base__Type__Interval,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntegralCompoundPoisson_getSupport" "', argument " "2"" of type '" "OpenTURNS::Uncertainty::Model::DistributionImplementation::Interval const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntegralCompoundPoisson_getSupport" "', argument " "2"" of type '" "OpenTURNS::Uncertainty::Model::DistributionImplementation::Interval const &""'"); 
  }
  arg2 = reinterpret_cast< OpenTURNS::Uncertainty::Model::DistributionImplementation::Interval * >(argp2);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->getSupport((OpenTURNS::Uncertainty::Model::DistributionImplementation::Interval const &)*arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalSample(static_cast< const IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalSample& >(result))), SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalSample, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_getSupport(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IntegralCompoundPoisson_getSupport__SWIG_0_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_OpenTURNS__Base__Type__Interval, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IntegralCompoundPoisson_getSupport__SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_OpenTURNS__Base__Type__Interval, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IntegralCompoundPoisson_getSupport__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IntegralCompoundPoisson_getSupport'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getSupport(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::Uncertainty::Model::DistributionImplementation::Interval const &)\n"
    "    getSupport(IntegralCompoundPoisson::IntegralCompoundPoisson const *)\n"
    "    getSupport(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::Uncertainty::Model::DistributionImplementation::Interval const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_getMean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntegralCompoundPoisson_getMean",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_getMean" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->getMean();
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint(static_cast< const IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint& >(result))), SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_getStandardDeviation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntegralCompoundPoisson_getStandardDeviation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_getStandardDeviation" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->getStandardDeviation();
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint(static_cast< const IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint& >(result))), SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_getCovariance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IntegralCompoundPoisson::IntegralCompoundPoisson::CovarianceMatrix result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntegralCompoundPoisson_getCovariance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_getCovariance" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->getCovariance();
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new IntegralCompoundPoisson::IntegralCompoundPoisson::CovarianceMatrix(static_cast< const IntegralCompoundPoisson::IntegralCompoundPoisson::CovarianceMatrix& >(result))), SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__CovarianceMatrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_drawPDF__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntegralCompoundPoisson_drawPDF",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_drawPDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->drawPDF();
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph& >(result))), SWIGTYPE_p_OpenTURNS__Base__Graph__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_drawPDF__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::NumericalScalar arg2 ;
  OpenTURNS::NumericalScalar arg3 ;
  OpenTURNS::UnsignedLong arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IntegralCompoundPoisson_drawPDF",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_drawPDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_drawPDF" "', argument " "2"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg2 = static_cast< OpenTURNS::NumericalScalar >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegralCompoundPoisson_drawPDF" "', argument " "3"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg3 = static_cast< OpenTURNS::NumericalScalar >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IntegralCompoundPoisson_drawPDF" "', argument " "4"" of type '" "OpenTURNS::UnsignedLong""'");
  } 
  arg4 = static_cast< OpenTURNS::UnsignedLong >(val4);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->drawPDF(arg2,arg3,arg4);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph& >(result))), SWIGTYPE_p_OpenTURNS__Base__Graph__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_drawPDF__SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::NumericalScalar arg2 ;
  OpenTURNS::NumericalScalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntegralCompoundPoisson_drawPDF",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_drawPDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_drawPDF" "', argument " "2"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg2 = static_cast< OpenTURNS::NumericalScalar >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegralCompoundPoisson_drawPDF" "', argument " "3"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg3 = static_cast< OpenTURNS::NumericalScalar >(val3);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->drawPDF(arg2,arg3);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph& >(result))), SWIGTYPE_p_OpenTURNS__Base__Graph__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_drawPDF__SWIG_0_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::UnsignedLong arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegralCompoundPoisson_drawPDF",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_drawPDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_drawPDF" "', argument " "2"" of type '" "OpenTURNS::UnsignedLong""'");
  } 
  arg2 = static_cast< OpenTURNS::UnsignedLong >(val2);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->drawPDF(arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph& >(result))), SWIGTYPE_p_OpenTURNS__Base__Graph__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_drawPDF__SWIG_0_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint *arg2 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint *arg3 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint temp2 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint temp3 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IntegralCompoundPoisson_drawPDF",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_drawPDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  {
    if (! SWIG_IsOK(SWIG_ConvertPtr(obj1, (void **) &arg2, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0))) {
      temp2 = OpenTURNS::convert<OpenTURNS::_PySequence_,OpenTURNS::Base::Type::NumericalPoint>( obj1 );
      arg2 = &temp2;
    }
  }
  {
    if (! SWIG_IsOK(SWIG_ConvertPtr(obj2, (void **) &arg3, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0))) {
      temp3 = OpenTURNS::convert<OpenTURNS::_PySequence_,OpenTURNS::Base::Type::NumericalPoint>( obj2 );
      arg3 = &temp3;
    }
  }
  {
    if (! SWIG_IsOK(SWIG_ConvertPtr(obj3, (void **) &arg4, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0))) {
      temp4 = OpenTURNS::convert<OpenTURNS::_PySequence_,OpenTURNS::Base::Type::NumericalPoint>( obj3 );
      arg4 = &temp4;
    }
  }
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->drawPDF((OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &)*arg2,(OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &)*arg3,(OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &)*arg4);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph& >(result))), SWIGTYPE_p_OpenTURNS__Base__Graph__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_drawPDF__SWIG_0_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint *arg2 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint temp2 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntegralCompoundPoisson_drawPDF",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_drawPDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  {
    if (! SWIG_IsOK(SWIG_ConvertPtr(obj1, (void **) &arg2, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0))) {
      temp2 = OpenTURNS::convert<OpenTURNS::_PySequence_,OpenTURNS::Base::Type::NumericalPoint>( obj1 );
      arg2 = &temp2;
    }
  }
  {
    if (! SWIG_IsOK(SWIG_ConvertPtr(obj2, (void **) &arg3, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0))) {
      temp3 = OpenTURNS::convert<OpenTURNS::_PySequence_,OpenTURNS::Base::Type::NumericalPoint>( obj2 );
      arg3 = &temp3;
    }
  }
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->drawPDF((OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &)*arg2,(OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &)*arg3);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph& >(result))), SWIGTYPE_p_OpenTURNS__Base__Graph__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_drawPDF__SWIG_0_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegralCompoundPoisson_drawPDF",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_drawPDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  {
    if (! SWIG_IsOK(SWIG_ConvertPtr(obj1, (void **) &arg2, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0))) {
      temp2 = OpenTURNS::convert<OpenTURNS::_PySequence_,OpenTURNS::Base::Type::NumericalPoint>( obj1 );
      arg2 = &temp2;
    }
  }
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->drawPDF((OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &)*arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph& >(result))), SWIGTYPE_p_OpenTURNS__Base__Graph__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_drawPDF__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  IntegralCompoundPoisson::NumericalScalar arg2 ;
  IntegralCompoundPoisson::NumericalScalar arg3 ;
  IntegralCompoundPoisson::UnsignedLong arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  IntegralCompoundPoisson::IntegralCompoundPoisson::Graph result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IntegralCompoundPoisson_drawPDF",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_drawPDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_drawPDF" "', argument " "2"" of type '" "IntegralCompoundPoisson::NumericalScalar""'");
  } 
  arg2 = static_cast< IntegralCompoundPoisson::NumericalScalar >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegralCompoundPoisson_drawPDF" "', argument " "3"" of type '" "IntegralCompoundPoisson::NumericalScalar""'");
  } 
  arg3 = static_cast< IntegralCompoundPoisson::NumericalScalar >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IntegralCompoundPoisson_drawPDF" "', argument " "4"" of type '" "IntegralCompoundPoisson::UnsignedLong""'");
  } 
  arg4 = static_cast< IntegralCompoundPoisson::UnsignedLong >(val4);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->drawPDF(arg2,arg3,arg4);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new IntegralCompoundPoisson::IntegralCompoundPoisson::Graph(static_cast< const IntegralCompoundPoisson::IntegralCompoundPoisson::Graph& >(result))), SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_drawPDF__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  IntegralCompoundPoisson::NumericalScalar arg2 ;
  IntegralCompoundPoisson::NumericalScalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  IntegralCompoundPoisson::IntegralCompoundPoisson::Graph result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntegralCompoundPoisson_drawPDF",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_drawPDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_drawPDF" "', argument " "2"" of type '" "IntegralCompoundPoisson::NumericalScalar""'");
  } 
  arg2 = static_cast< IntegralCompoundPoisson::NumericalScalar >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegralCompoundPoisson_drawPDF" "', argument " "3"" of type '" "IntegralCompoundPoisson::NumericalScalar""'");
  } 
  arg3 = static_cast< IntegralCompoundPoisson::NumericalScalar >(val3);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->drawPDF(arg2,arg3);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new IntegralCompoundPoisson::IntegralCompoundPoisson::Graph(static_cast< const IntegralCompoundPoisson::IntegralCompoundPoisson::Graph& >(result))), SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_drawPDF(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IntegralCompoundPoisson_drawPDF__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = SWIG_IsOK(SWIG_ConvertPtr(argv[1], NULL, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0)) || OpenTURNS::isAPythonSequenceOf<OpenTURNS::_PyFloat_>( argv[1] );
      }
      if (_v) {
        return _wrap_IntegralCompoundPoisson_drawPDF__SWIG_0_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntegralCompoundPoisson_drawPDF__SWIG_0_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = SWIG_IsOK(SWIG_ConvertPtr(argv[1], NULL, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0)) || OpenTURNS::isAPythonSequenceOf<OpenTURNS::_PyFloat_>( argv[1] );
      }
      if (_v) {
        {
          _v = SWIG_IsOK(SWIG_ConvertPtr(argv[2], NULL, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0)) || OpenTURNS::isAPythonSequenceOf<OpenTURNS::_PyFloat_>( argv[2] );
        }
        if (_v) {
          return _wrap_IntegralCompoundPoisson_drawPDF__SWIG_0_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntegralCompoundPoisson_drawPDF__SWIG_0_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntegralCompoundPoisson_drawPDF__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = SWIG_IsOK(SWIG_ConvertPtr(argv[1], NULL, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0)) || OpenTURNS::isAPythonSequenceOf<OpenTURNS::_PyFloat_>( argv[1] );
      }
      if (_v) {
        {
          _v = SWIG_IsOK(SWIG_ConvertPtr(argv[2], NULL, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0)) || OpenTURNS::isAPythonSequenceOf<OpenTURNS::_PyFloat_>( argv[2] );
        }
        if (_v) {
          {
            _v = SWIG_IsOK(SWIG_ConvertPtr(argv[3], NULL, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0)) || OpenTURNS::isAPythonSequenceOf<OpenTURNS::_PyFloat_>( argv[3] );
          }
          if (_v) {
            return _wrap_IntegralCompoundPoisson_drawPDF__SWIG_0_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IntegralCompoundPoisson_drawPDF__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IntegralCompoundPoisson_drawPDF__SWIG_0_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IntegralCompoundPoisson_drawPDF'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    drawPDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *)\n"
    "    drawPDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::NumericalScalar const,OpenTURNS::NumericalScalar const,OpenTURNS::UnsignedLong const)\n"
    "    drawPDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::NumericalScalar const,OpenTURNS::NumericalScalar const)\n"
    "    drawPDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::UnsignedLong const)\n"
    "    drawPDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &,OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &,OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &)\n"
    "    drawPDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &,OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &)\n"
    "    drawPDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &)\n"
    "    drawPDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,IntegralCompoundPoisson::NumericalScalar const,IntegralCompoundPoisson::NumericalScalar const,IntegralCompoundPoisson::UnsignedLong const)\n"
    "    drawPDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,IntegralCompoundPoisson::NumericalScalar const,IntegralCompoundPoisson::NumericalScalar const)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_drawCDF__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntegralCompoundPoisson_drawCDF",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_drawCDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->drawCDF();
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph& >(result))), SWIGTYPE_p_OpenTURNS__Base__Graph__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_drawCDF__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::NumericalScalar arg2 ;
  OpenTURNS::NumericalScalar arg3 ;
  OpenTURNS::UnsignedLong arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IntegralCompoundPoisson_drawCDF",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_drawCDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_drawCDF" "', argument " "2"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg2 = static_cast< OpenTURNS::NumericalScalar >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegralCompoundPoisson_drawCDF" "', argument " "3"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg3 = static_cast< OpenTURNS::NumericalScalar >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IntegralCompoundPoisson_drawCDF" "', argument " "4"" of type '" "OpenTURNS::UnsignedLong""'");
  } 
  arg4 = static_cast< OpenTURNS::UnsignedLong >(val4);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->drawCDF(arg2,arg3,arg4);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph& >(result))), SWIGTYPE_p_OpenTURNS__Base__Graph__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_drawCDF__SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::NumericalScalar arg2 ;
  OpenTURNS::NumericalScalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntegralCompoundPoisson_drawCDF",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_drawCDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_drawCDF" "', argument " "2"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg2 = static_cast< OpenTURNS::NumericalScalar >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegralCompoundPoisson_drawCDF" "', argument " "3"" of type '" "OpenTURNS::NumericalScalar""'");
  } 
  arg3 = static_cast< OpenTURNS::NumericalScalar >(val3);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->drawCDF(arg2,arg3);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph& >(result))), SWIGTYPE_p_OpenTURNS__Base__Graph__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_drawCDF__SWIG_0_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::UnsignedLong arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegralCompoundPoisson_drawCDF",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_drawCDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_drawCDF" "', argument " "2"" of type '" "OpenTURNS::UnsignedLong""'");
  } 
  arg2 = static_cast< OpenTURNS::UnsignedLong >(val2);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->drawCDF(arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph& >(result))), SWIGTYPE_p_OpenTURNS__Base__Graph__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_drawCDF__SWIG_0_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint *arg2 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint *arg3 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint temp2 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint temp3 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IntegralCompoundPoisson_drawCDF",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_drawCDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  {
    if (! SWIG_IsOK(SWIG_ConvertPtr(obj1, (void **) &arg2, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0))) {
      temp2 = OpenTURNS::convert<OpenTURNS::_PySequence_,OpenTURNS::Base::Type::NumericalPoint>( obj1 );
      arg2 = &temp2;
    }
  }
  {
    if (! SWIG_IsOK(SWIG_ConvertPtr(obj2, (void **) &arg3, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0))) {
      temp3 = OpenTURNS::convert<OpenTURNS::_PySequence_,OpenTURNS::Base::Type::NumericalPoint>( obj2 );
      arg3 = &temp3;
    }
  }
  {
    if (! SWIG_IsOK(SWIG_ConvertPtr(obj3, (void **) &arg4, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0))) {
      temp4 = OpenTURNS::convert<OpenTURNS::_PySequence_,OpenTURNS::Base::Type::NumericalPoint>( obj3 );
      arg4 = &temp4;
    }
  }
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->drawCDF((OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &)*arg2,(OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &)*arg3,(OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &)*arg4);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph& >(result))), SWIGTYPE_p_OpenTURNS__Base__Graph__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_drawCDF__SWIG_0_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint *arg2 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint temp2 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntegralCompoundPoisson_drawCDF",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_drawCDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  {
    if (! SWIG_IsOK(SWIG_ConvertPtr(obj1, (void **) &arg2, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0))) {
      temp2 = OpenTURNS::convert<OpenTURNS::_PySequence_,OpenTURNS::Base::Type::NumericalPoint>( obj1 );
      arg2 = &temp2;
    }
  }
  {
    if (! SWIG_IsOK(SWIG_ConvertPtr(obj2, (void **) &arg3, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0))) {
      temp3 = OpenTURNS::convert<OpenTURNS::_PySequence_,OpenTURNS::Base::Type::NumericalPoint>( obj2 );
      arg3 = &temp3;
    }
  }
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->drawCDF((OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &)*arg2,(OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &)*arg3);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph& >(result))), SWIGTYPE_p_OpenTURNS__Base__Graph__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_drawCDF__SWIG_0_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegralCompoundPoisson_drawCDF",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_drawCDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  {
    if (! SWIG_IsOK(SWIG_ConvertPtr(obj1, (void **) &arg2, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0))) {
      temp2 = OpenTURNS::convert<OpenTURNS::_PySequence_,OpenTURNS::Base::Type::NumericalPoint>( obj1 );
      arg2 = &temp2;
    }
  }
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->drawCDF((OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &)*arg2);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph(static_cast< const OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph& >(result))), SWIGTYPE_p_OpenTURNS__Base__Graph__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_drawCDF__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  IntegralCompoundPoisson::NumericalScalar arg2 ;
  IntegralCompoundPoisson::NumericalScalar arg3 ;
  IntegralCompoundPoisson::UnsignedLong arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  IntegralCompoundPoisson::IntegralCompoundPoisson::Graph result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IntegralCompoundPoisson_drawCDF",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_drawCDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_drawCDF" "', argument " "2"" of type '" "IntegralCompoundPoisson::NumericalScalar""'");
  } 
  arg2 = static_cast< IntegralCompoundPoisson::NumericalScalar >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegralCompoundPoisson_drawCDF" "', argument " "3"" of type '" "IntegralCompoundPoisson::NumericalScalar""'");
  } 
  arg3 = static_cast< IntegralCompoundPoisson::NumericalScalar >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IntegralCompoundPoisson_drawCDF" "', argument " "4"" of type '" "IntegralCompoundPoisson::UnsignedLong""'");
  } 
  arg4 = static_cast< IntegralCompoundPoisson::UnsignedLong >(val4);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->drawCDF(arg2,arg3,arg4);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new IntegralCompoundPoisson::IntegralCompoundPoisson::Graph(static_cast< const IntegralCompoundPoisson::IntegralCompoundPoisson::Graph& >(result))), SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_drawCDF__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  IntegralCompoundPoisson::NumericalScalar arg2 ;
  IntegralCompoundPoisson::NumericalScalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  IntegralCompoundPoisson::IntegralCompoundPoisson::Graph result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntegralCompoundPoisson_drawCDF",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralCompoundPoisson_drawCDF" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralCompoundPoisson_drawCDF" "', argument " "2"" of type '" "IntegralCompoundPoisson::NumericalScalar""'");
  } 
  arg2 = static_cast< IntegralCompoundPoisson::NumericalScalar >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntegralCompoundPoisson_drawCDF" "', argument " "3"" of type '" "IntegralCompoundPoisson::NumericalScalar""'");
  } 
  arg3 = static_cast< IntegralCompoundPoisson::NumericalScalar >(val3);
  {
    try {
      result = ((IntegralCompoundPoisson::IntegralCompoundPoisson const *)arg1)->drawCDF(arg2,arg3);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new IntegralCompoundPoisson::IntegralCompoundPoisson::Graph(static_cast< const IntegralCompoundPoisson::IntegralCompoundPoisson::Graph& >(result))), SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralCompoundPoisson_drawCDF(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IntegralCompoundPoisson_drawCDF__SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = SWIG_IsOK(SWIG_ConvertPtr(argv[1], NULL, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0)) || OpenTURNS::isAPythonSequenceOf<OpenTURNS::_PyFloat_>( argv[1] );
      }
      if (_v) {
        return _wrap_IntegralCompoundPoisson_drawCDF__SWIG_0_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntegralCompoundPoisson_drawCDF__SWIG_0_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = SWIG_IsOK(SWIG_ConvertPtr(argv[1], NULL, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0)) || OpenTURNS::isAPythonSequenceOf<OpenTURNS::_PyFloat_>( argv[1] );
      }
      if (_v) {
        {
          _v = SWIG_IsOK(SWIG_ConvertPtr(argv[2], NULL, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0)) || OpenTURNS::isAPythonSequenceOf<OpenTURNS::_PyFloat_>( argv[2] );
        }
        if (_v) {
          return _wrap_IntegralCompoundPoisson_drawCDF__SWIG_0_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntegralCompoundPoisson_drawCDF__SWIG_0_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntegralCompoundPoisson_drawCDF__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = SWIG_IsOK(SWIG_ConvertPtr(argv[1], NULL, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0)) || OpenTURNS::isAPythonSequenceOf<OpenTURNS::_PyFloat_>( argv[1] );
      }
      if (_v) {
        {
          _v = SWIG_IsOK(SWIG_ConvertPtr(argv[2], NULL, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0)) || OpenTURNS::isAPythonSequenceOf<OpenTURNS::_PyFloat_>( argv[2] );
        }
        if (_v) {
          {
            _v = SWIG_IsOK(SWIG_ConvertPtr(argv[3], NULL, SWIGTYPE_p_OpenTURNS__Base__Type__NumericalPoint, 0)) || OpenTURNS::isAPythonSequenceOf<OpenTURNS::_PyFloat_>( argv[3] );
          }
          if (_v) {
            return _wrap_IntegralCompoundPoisson_drawCDF__SWIG_0_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IntegralCompoundPoisson_drawCDF__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IntegralCompoundPoisson_drawCDF__SWIG_0_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IntegralCompoundPoisson_drawCDF'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    drawCDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *)\n"
    "    drawCDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::NumericalScalar const,OpenTURNS::NumericalScalar const,OpenTURNS::UnsignedLong const)\n"
    "    drawCDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::NumericalScalar const,OpenTURNS::NumericalScalar const)\n"
    "    drawCDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::UnsignedLong const)\n"
    "    drawCDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &,OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &,OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &)\n"
    "    drawCDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &,OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &)\n"
    "    drawCDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint const &)\n"
    "    drawCDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,IntegralCompoundPoisson::NumericalScalar const,IntegralCompoundPoisson::NumericalScalar const,IntegralCompoundPoisson::UnsignedLong const)\n"
    "    drawCDF(IntegralCompoundPoisson::IntegralCompoundPoisson const *,IntegralCompoundPoisson::NumericalScalar const,IntegralCompoundPoisson::NumericalScalar const)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntegralCompoundPoisson__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IntegralCompoundPoisson::IntegralCompoundPoisson *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IntegralCompoundPoisson",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IntegralCompoundPoisson" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IntegralCompoundPoisson" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson const &""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  {
    try {
      result = (IntegralCompoundPoisson::IntegralCompoundPoisson *)new_IntegralCompoundPoisson_IntegralCompoundPoisson__SWIG_3((IntegralCompoundPoisson::IntegralCompoundPoisson const &)*arg1);
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntegralCompoundPoisson(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_IntegralCompoundPoisson__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IntegralCompoundPoisson__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefined, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_IntegralCompoundPoisson__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_IntegralCompoundPoisson__IntegralUserDefined, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_IntegralCompoundPoisson__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_IntegralCompoundPoisson'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IntegralCompoundPoisson::IntegralCompoundPoisson()\n"
    "    IntegralCompoundPoisson::IntegralCompoundPoisson(IntegralCompoundPoisson::IntegralUserDefined const &,IntegralCompoundPoisson::NumericalScalar const,IntegralCompoundPoisson::UnsignedLong const)\n"
    "    IntegralCompoundPoisson::IntegralCompoundPoisson(IntegralCompoundPoisson::IntegralUserDefined const &,IntegralCompoundPoisson::NumericalScalar const)\n"
    "    IntegralCompoundPoisson::IntegralCompoundPoisson(IntegralCompoundPoisson::IntegralCompoundPoisson const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntegralCompoundPoisson(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntegralCompoundPoisson::IntegralCompoundPoisson *arg1 = (IntegralCompoundPoisson::IntegralCompoundPoisson *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IntegralCompoundPoisson",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntegralCompoundPoisson" "', argument " "1"" of type '" "IntegralCompoundPoisson::IntegralCompoundPoisson *""'"); 
  }
  arg1 = reinterpret_cast< IntegralCompoundPoisson::IntegralCompoundPoisson * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (OT::Base::Common::InvalidArgumentException & ex) {
      SWIG_exception(SWIG_TypeError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::OutOfBoundException & ex) {
      SWIG_exception(SWIG_IndexError,ex.__repr__().c_str());
    }
    catch (OT::Base::Common::Exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.__repr__().c_str());
    }
    catch (std::out_of_range & ex) {
      SWIG_exception(SWIG_IndexError,ex.what());
    }
    catch (std::exception & ex) {
      SWIG_exception(SWIG_RuntimeError,ex.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntegralCompoundPoisson_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IntegralCompoundPoisson__IntegralCompoundPoisson, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"IntegralUserDefined_GetClassName", _wrap_IntegralUserDefined_GetClassName, METH_VARARGS, (char *)"IntegralUserDefined_GetClassName() -> String"},
	 { (char *)"IntegralUserDefined_getClassName", _wrap_IntegralUserDefined_getClassName, METH_VARARGS, (char *)"IntegralUserDefined_getClassName(IntegralUserDefined self) -> String"},
	 { (char *)"IntegralUserDefined___eq__", _wrap_IntegralUserDefined___eq__, METH_VARARGS, (char *)"IntegralUserDefined___eq__(IntegralUserDefined self, IntegralUserDefined other) -> Bool"},
	 { (char *)"IntegralUserDefined___repr__", _wrap_IntegralUserDefined___repr__, METH_VARARGS, (char *)"IntegralUserDefined___repr__(IntegralUserDefined self) -> String"},
	 { (char *)"IntegralUserDefined_isIntegral", _wrap_IntegralUserDefined_isIntegral, METH_VARARGS, (char *)"IntegralUserDefined_isIntegral(IntegralUserDefined self) -> Bool"},
	 { (char *)"IntegralUserDefined_getIntegralSupport", _wrap_IntegralUserDefined_getIntegralSupport, METH_VARARGS, (char *)"IntegralUserDefined_getIntegralSupport(IntegralUserDefined self) -> UnsignedLongCollection"},
	 { (char *)"IntegralUserDefined_getSupport", _wrap_IntegralUserDefined_getSupport, METH_VARARGS, (char *)"IntegralUserDefined_getSupport(IntegralUserDefined self, Interval interval) -> NumericalSample"},
	 { (char *)"IntegralUserDefined_getWeights", _wrap_IntegralUserDefined_getWeights, METH_VARARGS, (char *)"IntegralUserDefined_getWeights(IntegralUserDefined self) -> NumericalPoint"},
	 { (char *)"IntegralUserDefined_getNormalizedWeights", _wrap_IntegralUserDefined_getNormalizedWeights, METH_VARARGS, (char *)"IntegralUserDefined_getNormalizedWeights(IntegralUserDefined self) -> NumericalPoint"},
	 { (char *)"new_IntegralUserDefined", _wrap_new_IntegralUserDefined, METH_VARARGS, (char *)"\n"
		"IntegralUserDefined()\n"
		"IntegralUserDefined(UnsignedLongCollection support, NumericalPoint weights)\n"
		"new_IntegralUserDefined(IntegralUserDefined other) -> IntegralUserDefined\n"
		""},
	 { (char *)"delete_IntegralUserDefined", _wrap_delete_IntegralUserDefined, METH_VARARGS, (char *)"delete_IntegralUserDefined(IntegralUserDefined self)"},
	 { (char *)"IntegralUserDefined_swigregister", IntegralUserDefined_swigregister, METH_VARARGS, NULL},
	 { (char *)"IntegralUserDefinedFactory_GetClassName", _wrap_IntegralUserDefinedFactory_GetClassName, METH_VARARGS, (char *)"IntegralUserDefinedFactory_GetClassName() -> String"},
	 { (char *)"IntegralUserDefinedFactory_getClassName", _wrap_IntegralUserDefinedFactory_getClassName, METH_VARARGS, (char *)"IntegralUserDefinedFactory_getClassName(IntegralUserDefinedFactory self) -> String"},
	 { (char *)"IntegralUserDefinedFactory_buildImplementation", _wrap_IntegralUserDefinedFactory_buildImplementation, METH_VARARGS, (char *)"\n"
		"buildImplementation(NumericalSample sample) -> DistributionImplementation\n"
		"buildImplementation(NumericalSample sample, CovarianceMatrix covariance) -> DistributionImplementation\n"
		"buildImplementation(NumericalPointCollection parameters) -> DistributionImplementation\n"
		"buildImplementation(NumericalSample sample) -> IntegralUserDefined\n"
		"buildImplementation(NumericalPointCollection parameters) -> IntegralUserDefined\n"
		"IntegralUserDefinedFactory_buildImplementation(IntegralUserDefinedFactory self) -> IntegralUserDefined\n"
		""},
	 { (char *)"new_IntegralUserDefinedFactory", _wrap_new_IntegralUserDefinedFactory, METH_VARARGS, (char *)"\n"
		"IntegralUserDefinedFactory()\n"
		"new_IntegralUserDefinedFactory(IntegralUserDefinedFactory other) -> IntegralUserDefinedFactory\n"
		""},
	 { (char *)"delete_IntegralUserDefinedFactory", _wrap_delete_IntegralUserDefinedFactory, METH_VARARGS, (char *)"delete_IntegralUserDefinedFactory(IntegralUserDefinedFactory self)"},
	 { (char *)"IntegralUserDefinedFactory_swigregister", IntegralUserDefinedFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"IntegralCompoundPoisson_GetClassName", _wrap_IntegralCompoundPoisson_GetClassName, METH_VARARGS, (char *)"IntegralCompoundPoisson_GetClassName() -> String"},
	 { (char *)"IntegralCompoundPoisson_getClassName", _wrap_IntegralCompoundPoisson_getClassName, METH_VARARGS, (char *)"IntegralCompoundPoisson_getClassName(IntegralCompoundPoisson self) -> String"},
	 { (char *)"IntegralCompoundPoisson___eq__", _wrap_IntegralCompoundPoisson___eq__, METH_VARARGS, (char *)"IntegralCompoundPoisson___eq__(IntegralCompoundPoisson self, IntegralCompoundPoisson other) -> Bool"},
	 { (char *)"IntegralCompoundPoisson___repr__", _wrap_IntegralCompoundPoisson___repr__, METH_VARARGS, (char *)"IntegralCompoundPoisson___repr__(IntegralCompoundPoisson self) -> String"},
	 { (char *)"IntegralCompoundPoisson_getRealization", _wrap_IntegralCompoundPoisson_getRealization, METH_VARARGS, (char *)"IntegralCompoundPoisson_getRealization(IntegralCompoundPoisson self) -> NumericalPoint"},
	 { (char *)"IntegralCompoundPoisson_computeQuantile", _wrap_IntegralCompoundPoisson_computeQuantile, METH_VARARGS, (char *)"\n"
		"computeQuantile(NumericalScalar prob, Bool tail = False) -> NumericalPoint\n"
		"computeQuantile(NumericalScalar prob) -> NumericalPoint\n"
		"computeQuantile(NumericalScalar qMin, NumericalScalar qMax, UnsignedLong pointNumber, \n"
		"    NumericalScalar precision = DefaultQuantileEpsilon, \n"
		"    Bool tail = False) -> NumericalSample\n"
		"computeQuantile(NumericalScalar qMin, NumericalScalar qMax, UnsignedLong pointNumber, \n"
		"    NumericalScalar precision = DefaultQuantileEpsilon) -> NumericalSample\n"
		"computeQuantile(NumericalScalar qMin, NumericalScalar qMax, UnsignedLong pointNumber) -> NumericalSample\n"
		"computeQuantile(NumericalScalar prob, Bool tail = False) -> NumericalPoint\n"
		"IntegralCompoundPoisson_computeQuantile(IntegralCompoundPoisson self, NumericalScalar prob) -> NumericalPoint\n"
		""},
	 { (char *)"IntegralCompoundPoisson_computePDF", _wrap_IntegralCompoundPoisson_computePDF, METH_VARARGS, (char *)"\n"
		"computePDF(NumericalScalar scalar) -> NumericalScalar\n"
		"computePDF(NumericalPoint point) -> NumericalScalar\n"
		"computePDF(NumericalSample sample) -> NumericalSample\n"
		"computePDF(NumericalScalar xMin, NumericalScalar xMax, UnsignedLong pointNumber, \n"
		"    NumericalScalar precision = DefaultPDFEpsilon) -> NumericalSample\n"
		"computePDF(NumericalScalar xMin, NumericalScalar xMax, UnsignedLong pointNumber) -> NumericalSample\n"
		"IntegralCompoundPoisson_computePDF(IntegralCompoundPoisson self, NumericalPoint point) -> NumericalScalar\n"
		""},
	 { (char *)"IntegralCompoundPoisson_computeCDF", _wrap_IntegralCompoundPoisson_computeCDF, METH_VARARGS, (char *)"\n"
		"computeCDF(NumericalScalar scalar, Bool tail = False) -> NumericalScalar\n"
		"computeCDF(NumericalScalar scalar) -> NumericalScalar\n"
		"computeCDF(NumericalPoint point, Bool tail = False) -> NumericalScalar\n"
		"computeCDF(NumericalPoint point) -> NumericalScalar\n"
		"computeCDF(NumericalSample sample, Bool tail = False) -> NumericalSample\n"
		"computeCDF(NumericalSample sample) -> NumericalSample\n"
		"computeCDF(NumericalScalar xMin, NumericalScalar xMax, UnsignedLong pointNumber, \n"
		"    NumericalScalar precision = DefaultPDFEpsilon, \n"
		"    Bool tail = False) -> NumericalSample\n"
		"computeCDF(NumericalScalar xMin, NumericalScalar xMax, UnsignedLong pointNumber, \n"
		"    NumericalScalar precision = DefaultPDFEpsilon) -> NumericalSample\n"
		"computeCDF(NumericalScalar xMin, NumericalScalar xMax, UnsignedLong pointNumber) -> NumericalSample\n"
		"computeCDF(NumericalPoint point, Bool tail = False) -> NumericalScalar\n"
		"IntegralCompoundPoisson_computeCDF(IntegralCompoundPoisson self, NumericalPoint point) -> NumericalScalar\n"
		""},
	 { (char *)"IntegralCompoundPoisson_getNumericalSample", _wrap_IntegralCompoundPoisson_getNumericalSample, METH_VARARGS, (char *)"\n"
		"getNumericalSample(UnsignedLong size) -> NumericalSample\n"
		"IntegralCompoundPoisson_getNumericalSample(IntegralCompoundPoisson self, UnsignedLong size) -> NumericalSample\n"
		""},
	 { (char *)"IntegralCompoundPoisson_getSupport", _wrap_IntegralCompoundPoisson_getSupport, METH_VARARGS, (char *)"\n"
		"getSupport(Interval interval) -> NumericalSample\n"
		"getSupport() -> NumericalSample\n"
		"IntegralCompoundPoisson_getSupport(IntegralCompoundPoisson self, Interval interval) -> NumericalSample\n"
		""},
	 { (char *)"IntegralCompoundPoisson_getMean", _wrap_IntegralCompoundPoisson_getMean, METH_VARARGS, (char *)"IntegralCompoundPoisson_getMean(IntegralCompoundPoisson self) -> NumericalPoint"},
	 { (char *)"IntegralCompoundPoisson_getStandardDeviation", _wrap_IntegralCompoundPoisson_getStandardDeviation, METH_VARARGS, (char *)"IntegralCompoundPoisson_getStandardDeviation(IntegralCompoundPoisson self) -> NumericalPoint"},
	 { (char *)"IntegralCompoundPoisson_getCovariance", _wrap_IntegralCompoundPoisson_getCovariance, METH_VARARGS, (char *)"IntegralCompoundPoisson_getCovariance(IntegralCompoundPoisson self) -> CovarianceMatrix"},
	 { (char *)"IntegralCompoundPoisson_drawPDF", _wrap_IntegralCompoundPoisson_drawPDF, METH_VARARGS, (char *)"\n"
		"drawPDF() -> Graph\n"
		"drawPDF(NumericalScalar xMin, NumericalScalar xMax, UnsignedLong pointNumber = DefaultPointNumber) -> Graph\n"
		"drawPDF(NumericalScalar xMin, NumericalScalar xMax) -> Graph\n"
		"drawPDF(UnsignedLong pointNumber) -> Graph\n"
		"drawPDF(NumericalPoint xMin, NumericalPoint xMax, NumericalPoint pointNumber) -> Graph\n"
		"drawPDF(NumericalPoint xMin, NumericalPoint xMax) -> Graph\n"
		"drawPDF(NumericalPoint pointNumber) -> Graph\n"
		"drawPDF(NumericalScalar xMin, NumericalScalar xMax, UnsignedLong pointNumber = DefaultPointNumber) -> Graph\n"
		"IntegralCompoundPoisson_drawPDF(IntegralCompoundPoisson self, NumericalScalar xMin, \n"
		"    NumericalScalar xMax) -> Graph\n"
		""},
	 { (char *)"IntegralCompoundPoisson_drawCDF", _wrap_IntegralCompoundPoisson_drawCDF, METH_VARARGS, (char *)"\n"
		"drawCDF() -> Graph\n"
		"drawCDF(NumericalScalar xMin, NumericalScalar xMax, UnsignedLong pointNumber = DefaultPointNumber) -> Graph\n"
		"drawCDF(NumericalScalar xMin, NumericalScalar xMax) -> Graph\n"
		"drawCDF(UnsignedLong pointNumber) -> Graph\n"
		"drawCDF(NumericalPoint xMin, NumericalPoint xMax, NumericalPoint pointNumber) -> Graph\n"
		"drawCDF(NumericalPoint xMin, NumericalPoint xMax) -> Graph\n"
		"drawCDF(NumericalPoint pointNumber) -> Graph\n"
		"drawCDF(NumericalScalar xMin, NumericalScalar xMax, UnsignedLong pointNumber = DefaultPointNumber) -> Graph\n"
		"IntegralCompoundPoisson_drawCDF(IntegralCompoundPoisson self, NumericalScalar xMin, \n"
		"    NumericalScalar xMax) -> Graph\n"
		""},
	 { (char *)"new_IntegralCompoundPoisson", _wrap_new_IntegralCompoundPoisson, METH_VARARGS, (char *)"\n"
		"IntegralCompoundPoisson()\n"
		"IntegralCompoundPoisson(IntegralUserDefined atomDistribution, NumericalScalar theta, \n"
		"    UnsignedLong log2cache = 10)\n"
		"IntegralCompoundPoisson(IntegralUserDefined atomDistribution, NumericalScalar theta)\n"
		"new_IntegralCompoundPoisson(IntegralCompoundPoisson other) -> IntegralCompoundPoisson\n"
		""},
	 { (char *)"delete_IntegralCompoundPoisson", _wrap_delete_IntegralCompoundPoisson, METH_VARARGS, (char *)"delete_IntegralCompoundPoisson(IntegralCompoundPoisson self)"},
	 { (char *)"IntegralCompoundPoisson_swigregister", IntegralCompoundPoisson_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_OpenTURNS__Uncertainty__Distribution__IndependentCopulaTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *) ((OpenTURNS::Uncertainty::Distribution::IndependentCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BinomialTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::Binomial *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__MultinomialTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::Multinomial *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__NonEllipticalDistributionTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *) ((OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__TriangularTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Triangular *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ClaytonCopulaTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *)(OpenTURNS::Uncertainty::Model::ArchimedeanCopula *) ((OpenTURNS::Uncertainty::Distribution::ClaytonCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__UniformTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Uniform *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__LogNormalTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::LogNormal *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__InverseNormalTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::InverseNormal *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__EpanechnikovTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Epanechnikov *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__PoissonTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::Poisson *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__RandomMixtureTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *)  ((OpenTURNS::Uncertainty::Distribution::RandomMixture *) x));
}
static void *_p_IntegralCompoundPoisson__IntegralCompoundPoissonTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((IntegralCompoundPoisson::IntegralCompoundPoisson *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__ContinuousDistributionTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *) ((OpenTURNS::Uncertainty::Model::ContinuousDistribution *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__EllipticalDistributionTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *) ((OpenTURNS::Uncertainty::Model::EllipticalDistribution *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BetaTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Beta *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ArcsineTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Arcsine *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__ArchimedeanCopulaTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *) ((OpenTURNS::Uncertainty::Model::ArchimedeanCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__SklarCopulaTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *) ((OpenTURNS::Uncertainty::Model::SklarCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__NormalCopulaTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *) ((OpenTURNS::Uncertainty::Distribution::NormalCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GumbelCopulaTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *)(OpenTURNS::Uncertainty::Model::ArchimedeanCopula *) ((OpenTURNS::Uncertainty::Distribution::GumbelCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ZipfMandelbrotTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::ZipfMandelbrot *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__RiceTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Rice *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GumbelTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Gumbel *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__MixtureTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *)  ((OpenTURNS::Uncertainty::Distribution::Mixture *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ChiTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Chi *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__UsualDistributionTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *)  ((OpenTURNS::Uncertainty::Model::UsualDistribution *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__RayleighTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Rayleigh *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__DiscreteDistributionTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *) ((OpenTURNS::Uncertainty::Model::DiscreteDistribution *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__CopulaImplementationTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *) ((OpenTURNS::Uncertainty::Model::CopulaImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GammaTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Gamma *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__DirichletTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Dirichlet *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ComposedCopulaTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *) ((OpenTURNS::Uncertainty::Distribution::ComposedCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__UserDefinedTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::UserDefined *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__FrankCopulaTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *)(OpenTURNS::Uncertainty::Model::ArchimedeanCopula *) ((OpenTURNS::Uncertainty::Distribution::FrankCopula *) x));
}
static void *_p_IntegralCompoundPoisson__IntegralUserDefinedTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *)(OpenTURNS::Uncertainty::Distribution::UserDefined *) ((IntegralCompoundPoisson::IntegralUserDefined *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__WeibullTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Weibull *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__TrapezoidalTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Trapezoidal *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__HistogramTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Histogram *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ComposedDistributionTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *)  ((OpenTURNS::Uncertainty::Distribution::ComposedDistribution *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GeometricTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::Geometric *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__LaplaceTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Laplace *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__LogisticTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Logistic *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BernoulliTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::Bernoulli *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__NonCentralChiSquareTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::NonCentralChiSquare *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BurrTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Burr *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__StudentTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::EllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Student *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__TruncatedNormalTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::TruncatedNormal *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__NormalTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::EllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Normal *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__TruncatedDistributionTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::TruncatedDistribution *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__KernelMixtureTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::KernelMixture *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ChiSquareTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::ChiSquare *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ExponentialTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Exponential *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__NonCentralStudentTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementation *) (OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::NonCentralStudent *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__LaplaceFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::LaplaceFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__HistogramFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::HistogramFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GeometricFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::GeometricFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__LogisticFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::LogisticFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__PoissonFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::PoissonFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__FrankCopulaFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::FrankCopulaFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GammaFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::GammaFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ChiFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::ChiFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BetaFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::BetaFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GumbelFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::GumbelFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__NormalFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::NormalFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__TruncatedNormalFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::TruncatedNormalFactory *) x));
}
static void *_p_IntegralCompoundPoisson__IntegralUserDefinedFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((IntegralCompoundPoisson::IntegralUserDefinedFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ClaytonCopulaFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::ClaytonCopulaFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__DirichletFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::DirichletFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BernoulliFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::BernoulliFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__StudentFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::StudentFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__TrapezoidalFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::TrapezoidalFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__WeibullFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::WeibullFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ExponentialFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::ExponentialFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__LogNormalFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::LogNormalFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__NormalCopulaFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::NormalCopulaFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GumbelCopulaFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::GumbelCopulaFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__UniformFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::UniformFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ArcsineFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::ArcsineFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ChiSquareFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::ChiSquareFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__RayleighFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::RayleighFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__TriangularFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::TriangularFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BinomialFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::BinomialFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__UserDefinedFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::UserDefinedFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__MultinomialFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *)  ((OpenTURNS::Uncertainty::Distribution::MultinomialFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__NonEllipticalDistributionTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *) ((OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) x));
}
static void *_p_OT__Base__Optim__NearestPointChecker__ResultTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Optim::NearestPointCheckerResult *) x));
}
static void *_p_OpenTURNS__Base__Stat__TestResultTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Stat::TestResult *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__MetaModelResultTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Uncertainty::Algorithm::MetaModelResult *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__MonteCarloTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::Simulation *) ((OpenTURNS::Uncertainty::Algorithm::MonteCarlo *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarloTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::Simulation *) ((OpenTURNS::Uncertainty::Algorithm::QuasiMonteCarlo *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarloResultTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::SimulationResultImplementation *) ((OpenTURNS::Uncertainty::Algorithm::QuasiMonteCarloResult *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__WeibullTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Weibull *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__FactorialTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *)(OpenTURNS::Uncertainty::Algorithm::StratifiedExperiment *) ((OpenTURNS::Uncertainty::Algorithm::Factorial *) x));
}
static void *_p_OpenTURNS__Base__Stat__ConfidenceIntervalTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Stat::ConfidenceInterval *) x));
}
static void *_p_OpenTURNS__Base__Type__IntervalTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Type::Interval *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__RosenblattEvaluationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Uncertainty::Algorithm::RosenblattEvaluation *) x));
}
static void *_p_OpenTURNS__Base__Stat__InverseHaltonSequenceTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Stat::LowDiscrepancySequenceImplementation *) ((OpenTURNS::Base::Stat::InverseHaltonSequence *) x));
}
static void *_p_OpenTURNS__Base__Stat__HaltonSequenceTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Stat::LowDiscrepancySequenceImplementation *) ((OpenTURNS::Base::Stat::HaltonSequence *) x));
}
static void *_p_OpenTURNS__Base__Stat__FaureSequenceTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Stat::LowDiscrepancySequenceImplementation *) ((OpenTURNS::Base::Stat::FaureSequence *) x));
}
static void *_p_OpenTURNS__Base__Stat__SobolSequenceTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Stat::LowDiscrepancySequenceImplementation *) ((OpenTURNS::Base::Stat::SobolSequence *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__SORMTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::Analytical *) ((OpenTURNS::Uncertainty::Algorithm::SORM *) x));
}
static void *_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__HistogramPair_tTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::Uncertainty::Distribution::HistogramPair > *) x));
}
static void *_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__Basis_tTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::Base::Func::Basis > *) x));
}
static void *_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPointWithDescription_tTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::Base::Type::NumericalPointWithDescription > *) x));
}
static void *_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPoint_tTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::Base::Type::NumericalPoint > *) x));
}
static void *_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__UniVariatePolynomial_tTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::Base::Func::UniVariatePolynomial > *) x));
}
static void *_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__NumericalMathFunction_tTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::Base::Func::NumericalMathFunction > *) x));
}
static void *_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__UserDefinedPair_tTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::Uncertainty::Distribution::UserDefinedPair > *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__UserDefinedTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::UserDefined *) x));
}
static void *_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFamily_tTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::Uncertainty::Algorithm::OrthogonalUniVariatePolynomialFamily > *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__PolynomialKernelTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::SVMKernelImplementation *) ((OpenTURNS::Uncertainty::Algorithm::PolynomialKernel *) x));
}
static void *_p_IntegralCompoundPoisson__IntegralUserDefinedTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *)(OpenTURNS::Uncertainty::Distribution::UserDefined *) ((IntegralCompoundPoisson::IntegralUserDefined *) x));
}
static void *_p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceGradientTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathGradientImplementation *)(OpenTURNS::Base::Diff::FiniteDifferenceGradient *) ((OpenTURNS::Base::Diff::CenteredFiniteDifferenceGradient *) x));
}
static void *_p_OpenTURNS__Base__Func__ComposedNumericalMathFunctionTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathFunctionImplementation *) ((OpenTURNS::Base::Func::ComposedNumericalMathFunction *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__RandomDirectionTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::SamplingStrategyImplementation *) ((OpenTURNS::Uncertainty::Algorithm::RandomDirection *) x));
}
static void *_p_OpenTURNS__Base__Stat__NullTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Stat::HistoryStrategyImplementation *) ((OpenTURNS::Base::Stat::Null *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GeometricFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::GeometricFactory *) x));
}
static void *_p_OpenTURNS__Base__Optim__AbdoRackwitzTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Optim::NearestPointAlgorithmImplementation *) ((OpenTURNS::Base::Optim::AbdoRackwitz *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__MixtureTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *) ((OpenTURNS::Uncertainty::Distribution::Mixture *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ExponentialTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Exponential *) x));
}
static void *_p_OpenTURNS__Base__Func__QuadraticNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Base::Func::QuadraticNumericalMathEvaluationImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__IndicatorNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Base::Func::IndicatorNumericalMathEvaluationImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__CompositeTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *)(OpenTURNS::Uncertainty::Algorithm::StratifiedExperiment *) ((OpenTURNS::Uncertainty::Algorithm::Composite *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BinomialFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::BinomialFactory *) x));
}
static void *_p_OpenTURNS__Base__Stat__LinearModelTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Stat::LinearModel *) x));
}
static void *_p_OpenTURNS__Base__Func__LinearCombinationGradientImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Base::Func::LinearCombinationGradientImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__NumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Func::NumericalMathGradientImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__NumericalMathFunctionImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Func::NumericalMathFunctionImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__SVMKernelImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Uncertainty::Algorithm::SVMKernelImplementation *) x));
}
static void *_p_OpenTURNS__Base__Regression__RegressionAlgorithmTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Regression::RegressionAlgorithm *) x));
}
static void *_p_OpenTURNS__Base__Stat__CompactTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Stat::HistoryStrategyImplementation *) ((OpenTURNS::Base::Stat::Compact *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__DistributionImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Uncertainty::Model::DistributionImplementation *) x));
}
static void *_p_OpenTURNS__Base__Diff__FiniteDifferenceStepImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Diff::FiniteDifferenceStepImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__BasisSequenceFactoryImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Func::BasisSequenceFactoryImplementation *) x));
}
static void *_p_OpenTURNS__Base__Common__ComparisonOperatorImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Common::ComparisonOperatorImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__NumericalMathHessianImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Func::NumericalMathHessianImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__UniVariatePolynomialImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Func::UniVariatePolynomialImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__RandomVectorImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Uncertainty::Model::RandomVectorImplementation *) x));
}
static void *_p_OpenTURNS__Base__Regression__LinearTaylorTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Regression::RegressionAlgorithm *) ((OpenTURNS::Base::Regression::LinearTaylor *) x));
}
static void *_p_OpenTURNS__Base__Algo__LassoTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Algo::ApproximationAlgorithmImplementation *) ((OpenTURNS::Base::Algo::Lasso *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__TriangularFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::TriangularFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__LaplaceFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::LaplaceFactory *) x));
}
static void *_p_OpenTURNS__Base__Optim__CobylaTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Optim::NearestPointAlgorithmImplementation *) ((OpenTURNS::Base::Optim::Cobyla *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__FunctionalChaosRandomVectorTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::RandomVectorImplementation *)(OpenTURNS::Uncertainty::Model::CompositeRandomVector *) ((OpenTURNS::Uncertainty::Model::FunctionalChaosRandomVector *) x));
}
static void *_p_OpenTURNS__Base__Graph__CurveTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Graph::DrawableImplementation *) ((OpenTURNS::Base::Graph::Curve *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__FORMResultTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::AnalyticalResult *) ((OpenTURNS::Uncertainty::Algorithm::FORMResult *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__SORMResultTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::AnalyticalResult *) ((OpenTURNS::Uncertainty::Algorithm::SORMResult *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__AnalyticalTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Uncertainty::Algorithm::Analytical *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__WeibullFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::WeibullFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ClaytonCopulaTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *)(OpenTURNS::Uncertainty::Model::ArchimedeanCopula *) ((OpenTURNS::Uncertainty::Distribution::ClaytonCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ClaytonCopulaFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::ClaytonCopulaFactory *) x));
}
static void *_p_OpenTURNS__Base__Func__NoNumericalMathHessianImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Base::Func::NoNumericalMathHessianImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__DirichletFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::DirichletFactory *) x));
}
static void *_p_OpenTURNS__Base__Optim__NearestPointCheckerTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Optim::NearestPointChecker *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__InverseNormalTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::InverseNormal *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__StratifiedExperimentTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *) ((OpenTURNS::Uncertainty::Algorithm::StratifiedExperiment *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__MediumSafeTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::RootStrategyImplementation *) ((OpenTURNS::Uncertainty::Algorithm::MediumSafe *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__EpanechnikovTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Epanechnikov *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__EnumerateFunctionTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Uncertainty::Algorithm::EnumerateFunction *) x));
}
static void *_p_OpenTURNS__Base__Graph__StaircaseTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Graph::DrawableImplementation *) ((OpenTURNS::Base::Graph::Staircase *) x));
}
static void *_p_OpenTURNS__Base__Func__ConstantNumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Base::Func::ConstantNumericalMathGradientImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__ComputedNumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Base::Func::ComputedNumericalMathGradientImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__ComposedNumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Base::Func::ComposedNumericalMathGradientImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GumbelTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Gumbel *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__HistogramPairTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Uncertainty::Distribution::HistogramPair *) x));
}
static void *_p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Optim::BoundConstrainedAlgorithmImplementation *) x));
}
static void *_p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementationResultTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Optim::BoundConstrainedAlgorithmImplementationResult *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__HistogramTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Histogram *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ComposedDistributionTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *) ((OpenTURNS::Uncertainty::Distribution::ComposedDistribution *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__DirichletTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Dirichlet *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__IndependentCopulaTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *) ((OpenTURNS::Uncertainty::Distribution::IndependentCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__LaplaceTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Laplace *) x));
}
static void *_p_OpenTURNS__Base__Solver__SolverImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Solver::SolverImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__BasisSequenceImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::Base::Func::Basis > *) ((OpenTURNS::Base::Func::BasisSequenceImplementation *) x));
}
static void *_p_OpenTURNS__Base__Type__TensorImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::NumericalScalar > *) ((OpenTURNS::Base::Type::TensorImplementation *) x));
}
static void *_p_OpenTURNS__Base__Type__MatrixImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::NumericalScalar > *) ((OpenTURNS::Base::Type::MatrixImplementation *) x));
}
static void *_p_OpenTURNS__Base__Type__DescriptionImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::String > *) ((OpenTURNS::Base::Type::DescriptionImplementation *) x));
}
static void *_p_OpenTURNS__Base__Graph__DrawableImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Graph::DrawableImplementation *) x));
}
static void *_p_OpenTURNS__Base__Graph__GraphImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Graph::GraphImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__ConstantRandomVectorTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::RandomVectorImplementation *) ((OpenTURNS::Uncertainty::Model::ConstantRandomVector *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GammaTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Gamma *) x));
}
static void *_p_OpenTURNS__Base__Func__LARFSZeroTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::BasisSequenceFactoryImplementation *) ((OpenTURNS::Base::Func::LARFSZero *) x));
}
static void *_p_OpenTURNS__Base__Func__NoNumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Base::Func::NoNumericalMathGradientImplementation *) x));
}
static void *_p_OpenTURNS__Base__Regression__QuadraticTaylorTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Regression::RegressionAlgorithm *) ((OpenTURNS::Base::Regression::QuadraticTaylor *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__LowDiscrepancyExperimentTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *)(OpenTURNS::Uncertainty::Algorithm::WeightedExperiment *) ((OpenTURNS::Uncertainty::Algorithm::LowDiscrepancyExperiment *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ArcsineFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::ArcsineFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategyImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Uncertainty::Algorithm::AdaptiveStrategyImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__CleaningStrategyTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::AdaptiveStrategyImplementation *) ((OpenTURNS::Uncertainty::Algorithm::CleaningStrategy *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__SamplingStrategyImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Uncertainty::Algorithm::SamplingStrategyImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ComposedCopulaTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *) ((OpenTURNS::Uncertainty::Distribution::ComposedCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__HyperbolicAnisotropicEnumerateFunctionTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::EnumerateFunction *) ((OpenTURNS::Uncertainty::Algorithm::HyperbolicAnisotropicEnumerateFunction *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationEvaluationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Uncertainty::Algorithm::MarginalTransformationEvaluation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationGradientTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Uncertainty::Algorithm::MarginalTransformationGradient *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationHessianTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Uncertainty::Algorithm::MarginalTransformationHessian *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__LHSTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::Simulation *) ((OpenTURNS::Uncertainty::Algorithm::LHS *) x));
}
static void *_p_OpenTURNS__Base__Diff__NonCenteredFiniteDifferenceGradientTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathGradientImplementation *)(OpenTURNS::Base::Diff::FiniteDifferenceGradient *) ((OpenTURNS::Base::Diff::NonCenteredFiniteDifferenceGradient *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaEvaluationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Uncertainty::Algorithm::NatafEllipticalCopulaEvaluation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaGradientTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Uncertainty::Algorithm::NatafEllipticalCopulaGradient *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaHessianTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Uncertainty::Algorithm::NatafEllipticalCopulaHessian *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionEvaluationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *)(OpenTURNS::Base::Func::LinearNumericalMathEvaluationImplementation *) ((OpenTURNS::Uncertainty::Algorithm::NatafEllipticalDistributionEvaluation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionGradientTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathGradientImplementation *)(OpenTURNS::Base::Func::ConstantNumericalMathGradientImplementation *) ((OpenTURNS::Uncertainty::Algorithm::NatafEllipticalDistributionGradient *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionHessianTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathHessianImplementation *)(OpenTURNS::Base::Func::ConstantNumericalMathHessianImplementation *) ((OpenTURNS::Uncertainty::Algorithm::NatafEllipticalDistributionHessian *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__StrongMaximumTestTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Uncertainty::Algorithm::StrongMaximumTest *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalControlledImportanceSamplingTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::Simulation *)(OpenTURNS::Uncertainty::Algorithm::PostAnalyticalSimulation *) ((OpenTURNS::Uncertainty::Algorithm::PostAnalyticalControlledImportanceSampling *) x));
}
static void *_p_OpenTURNS__Base__Common__GreaterOrEqualTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Common::ComparisonOperatorImplementation *) ((OpenTURNS::Base::Common::GreaterOrEqual *) x));
}
static void *_p_OpenTURNS__Base__Common__LessOrEqualTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Common::ComparisonOperatorImplementation *) ((OpenTURNS::Base::Common::LessOrEqual *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__UsualDistributionTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *) ((OpenTURNS::Uncertainty::Model::UsualDistribution *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__UniformTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Uniform *) x));
}
static void *_p_OpenTURNS__Base__Func__ProductNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Base::Func::ProductNumericalMathEvaluationImplementation *) x));
}
static void *_p_OpenTURNS__Base__Algo__FittingAlgorithmImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Algo::FittingAlgorithmImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalImportanceSamplingTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::Simulation *)(OpenTURNS::Uncertainty::Algorithm::PostAnalyticalSimulation *) ((OpenTURNS::Uncertainty::Algorithm::PostAnalyticalImportanceSampling *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__WeightedExperimentTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *) ((OpenTURNS::Uncertainty::Algorithm::WeightedExperiment *) x));
}
static void *_p_OpenTURNS__Base__Type__PersistentCollectionT_unsigned_long_tTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Type::PersistentCollection< unsigned long > *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__HistogramFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::HistogramFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__BoxTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *)(OpenTURNS::Uncertainty::Algorithm::StratifiedExperiment *) ((OpenTURNS::Uncertainty::Algorithm::Box *) x));
}
static void *_p_OpenTURNS__Base__Algo__CorrectedLeaveOneOutTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Algo::FittingAlgorithmImplementation *) ((OpenTURNS::Base::Algo::CorrectedLeaveOneOut *) x));
}
static void *_p_OpenTURNS__Base__Func__BasisTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::Base::Func::NumericalMathFunction > *) ((OpenTURNS::Base::Func::Basis *) x));
}
static void *_p_OpenTURNS__Base__Diff__ProportionalStepTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Diff::FiniteDifferenceStepImplementation *) ((OpenTURNS::Base::Diff::ProportionalStep *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaEvaluationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Uncertainty::Algorithm::InverseNatafIndependentCopulaEvaluation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaGradientTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Uncertainty::Algorithm::InverseNatafIndependentCopulaGradient *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaHessianTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Uncertainty::Algorithm::InverseNatafIndependentCopulaHessian *) x));
}
static void *_p_OpenTURNS__Base__Stat__HistoryStrategyImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Stat::HistoryStrategyImplementation *) x));
}
static void *_p_OpenTURNS__Base__Stat__NumericalSampleImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Stat::NumericalSampleImplementation *) x));
}
static void *_p_OpenTURNS__Base__Type__NumericalPointWithDescriptionTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::NumericalScalar > *)(OpenTURNS::Base::Type::NumericalPoint *) ((OpenTURNS::Base::Type::NumericalPointWithDescription *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__MultinomialTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::Multinomial *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BinomialTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::Binomial *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__IntegrationStrategyTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::ProjectionStrategyImplementation *) ((OpenTURNS::Uncertainty::Algorithm::IntegrationStrategy *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionEvaluationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Uncertainty::Algorithm::SVMKernelRegressionEvaluation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionGradientTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Uncertainty::Algorithm::SVMKernelRegressionGradient *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionHessianTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Uncertainty::Algorithm::SVMKernelRegressionHessian *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalSimulationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::Simulation *) ((OpenTURNS::Uncertainty::Algorithm::PostAnalyticalSimulation *) x));
}
static void *_p_OpenTURNS__Base__Diff__ConstantStepTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Diff::FiniteDifferenceStepImplementation *) ((OpenTURNS::Base::Diff::ConstantStep *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalFunctionFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Uncertainty::Algorithm::OrthogonalFunctionFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__LogNormalFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::LogNormalFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__LogisticTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Logistic *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ZipfMandelbrotTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::ZipfMandelbrot *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__SimulationResultImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Uncertainty::Algorithm::SimulationResultImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GeometricTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::Geometric *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ChiTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Chi *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__SklarCopulaTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *) ((OpenTURNS::Uncertainty::Model::SklarCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__ArchimedeanCopulaTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *) ((OpenTURNS::Uncertainty::Model::ArchimedeanCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__NormalCopulaTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *) ((OpenTURNS::Uncertainty::Distribution::NormalCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__NormalCopulaFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::NormalCopulaFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GumbelCopulaTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *)(OpenTURNS::Uncertainty::Model::ArchimedeanCopula *) ((OpenTURNS::Uncertainty::Distribution::GumbelCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GumbelCopulaFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::GumbelCopulaFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__StudentFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::StudentFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__TrapezoidalFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::TrapezoidalFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__SafeAndSlowTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::RootStrategyImplementation *) ((OpenTURNS::Uncertainty::Algorithm::SafeAndSlow *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__UserDefinedFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::UserDefinedFactory *) x));
}
static void *_p_OpenTURNS__Base__Optim__PenalizedLeastSquaresAlgorithmTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Optim::PenalizedLeastSquaresAlgorithm *) x));
}
static void *_p_OpenTURNS__Base__Stat__LowDiscrepancySequenceImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Stat::LowDiscrepancySequenceImplementation *) x));
}
static void *_p_OpenTURNS__Base__Optim__TNCTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Optim::BoundConstrainedAlgorithmImplementation *) ((OpenTURNS::Base::Optim::TNC *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__KernelMixtureTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::KernelMixture *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalDirectionTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::SamplingStrategyImplementation *) ((OpenTURNS::Uncertainty::Algorithm::OrthogonalDirection *) x));
}
static void *_p_OpenTURNS__Base__Regression__LinearLeastSquaresTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Regression::RegressionAlgorithm *) ((OpenTURNS::Base::Regression::LinearLeastSquares *) x));
}
static void *_p_OpenTURNS__Base__Regression__QuadraticLeastSquaresTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Regression::RegressionAlgorithm *) ((OpenTURNS::Base::Regression::QuadraticLeastSquares *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__NonCentralChiSquareTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::NonCentralChiSquare *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__UserDefinedPairTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Uncertainty::Distribution::UserDefinedPair *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__MultinomialFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::MultinomialFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__NormalRBFTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::SVMKernelImplementation *) ((OpenTURNS::Uncertainty::Algorithm::NormalRBF *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BernoulliFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::BernoulliFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__UniformFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::UniformFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__ConditionalRandomVectorTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::RandomVectorImplementation *) ((OpenTURNS::Uncertainty::Model::ConditionalRandomVector *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__DirectionalSamplingTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::Simulation *) ((OpenTURNS::Uncertainty::Algorithm::DirectionalSampling *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__FrankCopulaTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *)(OpenTURNS::Uncertainty::Model::ArchimedeanCopula *) ((OpenTURNS::Uncertainty::Distribution::FrankCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__UsualRandomVectorTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::RandomVectorImplementation *) ((OpenTURNS::Uncertainty::Model::UsualRandomVector *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__CompositeRandomVectorTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::RandomVectorImplementation *) ((OpenTURNS::Uncertainty::Model::CompositeRandomVector *) x));
}
static void *_p_OpenTURNS__Base__Type__IndicesTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::UnsignedLong > *) ((OpenTURNS::Base::Type::Indices *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__AnalyticalResultTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Uncertainty::Algorithm::AnalyticalResult *) x));
}
static void *_p_OpenTURNS__Base__Algo__LeavePOutTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Algo::FittingAlgorithmImplementation *) ((OpenTURNS::Base::Algo::LeavePOut *) x));
}
static void *_p_OpenTURNS__Base__Func__ConstantNumericalMathHessianImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Base::Func::ConstantNumericalMathHessianImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__ComputedNumericalMathHessianImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Base::Func::ComputedNumericalMathHessianImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__ComposedNumericalMathHessianImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Base::Func::ComposedNumericalMathHessianImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__FixedExperimentTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *)(OpenTURNS::Uncertainty::Algorithm::WeightedExperiment *) ((OpenTURNS::Uncertainty::Algorithm::FixedExperiment *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__LHSExperimentTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *)(OpenTURNS::Uncertainty::Algorithm::WeightedExperiment *) ((OpenTURNS::Uncertainty::Algorithm::LHSExperiment *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__CopulaImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *) ((OpenTURNS::Uncertainty::Model::CopulaImplementation *) x));
}
static void *_p_OpenTURNS__Base__Optim__SQPSpecificParametersTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Optim::SQPSpecificParameters *) x));
}
static void *_p_OpenTURNS__Base__Optim__TNCSpecificParametersTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Optim::TNCSpecificParameters *) x));
}
static void *_p_OpenTURNS__Base__Optim__CobylaSpecificParametersTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Optim::CobylaSpecificParameters *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__RayleighFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::RayleighFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalProductPolynomialFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::OrthogonalFunctionFactory *) ((OpenTURNS::Uncertainty::Algorithm::OrthogonalProductPolynomialFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__FORMTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::Analytical *) ((OpenTURNS::Uncertainty::Algorithm::FORM *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__FrankCopulaFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::FrankCopulaFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__RandomMixtureTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *) ((OpenTURNS::Uncertainty::Distribution::RandomMixture *) x));
}
static void *_p_OpenTURNS__Base__Func__LinearCombinationEvaluationImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Base::Func::LinearCombinationEvaluationImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__ProductPolynomialEvaluationImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Base::Func::ProductPolynomialEvaluationImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__AxialTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *)(OpenTURNS::Uncertainty::Algorithm::StratifiedExperiment *) ((OpenTURNS::Uncertainty::Algorithm::Axial *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__DiscreteDistributionTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *) ((OpenTURNS::Uncertainty::Model::DiscreteDistribution *) x));
}
static void *_p_OpenTURNS__Base__Solver__SecantTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Solver::SolverImplementation *) ((OpenTURNS::Base::Solver::Secant *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BetaTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Beta *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__TriangularTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Triangular *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__NormalTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::EllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Normal *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__EventRandomVectorImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::RandomVectorImplementation *)(OpenTURNS::Uncertainty::Model::CompositeRandomVector *) ((OpenTURNS::Uncertainty::Model::EventRandomVectorImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__EllipticalDistributionTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *) ((OpenTURNS::Uncertainty::Model::EllipticalDistribution *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__ContinuousDistributionTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *) ((OpenTURNS::Uncertainty::Model::ContinuousDistribution *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__StandardDistributionPolynomialFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::OrthogonalUniVariatePolynomialFactory *) ((OpenTURNS::Uncertainty::Algorithm::StandardDistributionPolynomialFactory *) x));
}
static void *_p_OpenTURNS__Base__Graph__ContourTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Graph::DrawableImplementation *) ((OpenTURNS::Base::Graph::Contour *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__RationalKernelTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::SVMKernelImplementation *) ((OpenTURNS::Uncertainty::Algorithm::RationalKernel *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__LogisticFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::LogisticFactory *) x));
}
static void *_p_OpenTURNS__Base__Func__WrapperFileTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Func::WrapperFile *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategyImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Uncertainty::Algorithm::ProjectionStrategyImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__RootStrategyImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Uncertainty::Algorithm::RootStrategyImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__RiskyAndFastTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::RootStrategyImplementation *) ((OpenTURNS::Uncertainty::Algorithm::RiskyAndFast *) x));
}
static void *_p_OpenTURNS__Base__Func__NoNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Base::Func::NoNumericalMathEvaluationImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__NonCentralStudentTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::NonCentralStudent *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GammaFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::GammaFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ChiFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::ChiFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BetaFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::BetaFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__LinearEnumerateFunctionTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::EnumerateFunction *) ((OpenTURNS::Uncertainty::Algorithm::LinearEnumerateFunction *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__HermiteFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::OrthogonalUniVariatePolynomialFactory *) ((OpenTURNS::Uncertainty::Algorithm::HermiteFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__JacobiFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::OrthogonalUniVariatePolynomialFactory *) ((OpenTURNS::Uncertainty::Algorithm::JacobiFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__LaguerreFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::OrthogonalUniVariatePolynomialFactory *) ((OpenTURNS::Uncertainty::Algorithm::LaguerreFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__LegendreFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::OrthogonalUniVariatePolynomialFactory *) ((OpenTURNS::Uncertainty::Algorithm::LegendreFactory *) x));
}
static void *_p_OpenTURNS__Base__Diff__FiniteDifferenceGradientTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Base::Diff::FiniteDifferenceGradient *) x));
}
static void *_p_OpenTURNS__Base__Func__LinearNumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Base::Func::LinearNumericalMathGradientImplementation *) x));
}
static void *_p_OpenTURNS__Base__Common__EqualTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Common::ComparisonOperatorImplementation *) ((OpenTURNS::Base::Common::Equal *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosResultTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::MetaModelResult *) ((OpenTURNS::Uncertainty::Algorithm::FunctionalChaosResult *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosAlgorithmTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Regression::RegressionAlgorithm *)(OpenTURNS::Uncertainty::Algorithm::MetaModelAlgorithm *) ((OpenTURNS::Uncertainty::Algorithm::FunctionalChaosAlgorithm *) x));
}
static void *_p_OpenTURNS__Base__Stat__LastTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Stat::HistoryStrategyImplementation *) ((OpenTURNS::Base::Stat::Last *) x));
}
static void *_p_OpenTURNS__Base__Common__GreaterTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Common::ComparisonOperatorImplementation *) ((OpenTURNS::Base::Common::Greater *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BernoulliTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::Bernoulli *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__InverseRosenblattEvaluationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Uncertainty::Algorithm::InverseRosenblattEvaluation *) x));
}
static void *_p_OpenTURNS__Base__Func__NumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__TrapezoidalTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Trapezoidal *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__FixedStrategyTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::AdaptiveStrategyImplementation *) ((OpenTURNS::Uncertainty::Algorithm::FixedStrategy *) x));
}
static void *_p_OpenTURNS__Base__Stat__FullTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Stat::HistoryStrategyImplementation *) ((OpenTURNS::Base::Stat::Full *) x));
}
static void *_p_OpenTURNS__Base__Type__NumericalPointTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::NumericalScalar > *) ((OpenTURNS::Base::Type::NumericalPoint *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__ExperimentImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__SimulationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Uncertainty::Algorithm::Simulation *) x));
}
static void *_p_OpenTURNS__Base__Func__LARTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::BasisSequenceFactoryImplementation *) ((OpenTURNS::Base::Func::LAR *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__BootstrapExperimentTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *)(OpenTURNS::Uncertainty::Algorithm::WeightedExperiment *) ((OpenTURNS::Uncertainty::Algorithm::BootstrapExperiment *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ChiSquareFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::ChiSquareFactory *) x));
}
static void *_p_OpenTURNS__Base__Func__ProductNumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Base::Func::ProductNumericalMathGradientImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaEvaluationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Uncertainty::Algorithm::NatafIndependentCopulaEvaluation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaGradientTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Uncertainty::Algorithm::NatafIndependentCopulaGradient *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaHessianTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Uncertainty::Algorithm::NatafIndependentCopulaHessian *) x));
}
static void *_p_OpenTURNS__Base__Func__ProductNumericalMathFunctionTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathFunctionImplementation *) ((OpenTURNS::Base::Func::ProductNumericalMathFunction *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__LogNormalTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::LogNormal *) x));
}
static void *_p_OpenTURNS__Base__Graph__CloudTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Graph::DrawableImplementation *) ((OpenTURNS::Base::Graph::Cloud *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithmImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Uncertainty::Algorithm::OrthonormalizationAlgorithmImplementation *) x));
}
static void *_p_OpenTURNS__Base__Optim__AbdoRackwitzSpecificParametersTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Optim::AbdoRackwitzSpecificParameters *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__PoissonTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::Poisson *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__PoissonFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::PoissonFactory *) x));
}
static void *_p_IntegralCompoundPoisson__IntegralCompoundPoissonTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((IntegralCompoundPoisson::IntegralCompoundPoisson *) x));
}
static void *_p_OpenTURNS__Base__Func__LARLassoTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::BasisSequenceFactoryImplementation *) ((OpenTURNS::Base::Func::LARLasso *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ExponentialFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::ExponentialFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ChiSquareTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::ChiSquare *) x));
}
static void *_p_OpenTURNS__Base__Type__PersistentCollectionT_std__string_tTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Type::PersistentCollection< std::string > *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::UniVariatePolynomialImplementation *) ((OpenTURNS::Uncertainty::Algorithm::OrthogonalUniVariatePolynomial *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Uncertainty::Algorithm::OrthogonalUniVariatePolynomialFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__MonteCarloExperimentTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *)(OpenTURNS::Uncertainty::Algorithm::WeightedExperiment *) ((OpenTURNS::Uncertainty::Algorithm::MonteCarloExperiment *) x));
}
static void *_p_OpenTURNS__Base__Optim__SQPTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Optim::NearestPointAlgorithmImplementation *) ((OpenTURNS::Base::Optim::SQP *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__RayleighTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Rayleigh *) x));
}
static void *_p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceHessianTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathHessianImplementation *)(OpenTURNS::Base::Diff::FiniteDifferenceHessian *) ((OpenTURNS::Base::Diff::CenteredFiniteDifferenceHessian *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__GramSchmidtAlgorithmTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::OrthonormalizationAlgorithmImplementation *) ((OpenTURNS::Uncertainty::Algorithm::GramSchmidtAlgorithm *) x));
}
static void *_p_OpenTURNS__Base__Solver__BisectionTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Solver::SolverImplementation *) ((OpenTURNS::Base::Solver::Bisection *) x));
}
static void *_p_OpenTURNS__Base__Common__LessTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Common::ComparisonOperatorImplementation *) ((OpenTURNS::Base::Common::Less *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__SequentialStrategyTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::AdaptiveStrategyImplementation *) ((OpenTURNS::Uncertainty::Algorithm::SequentialStrategy *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BurrTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Burr *) x));
}
static void *_p_OT__Base__Stat__CorrelationAnalysisSobolIndiceParametersTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Stat::CorrelationAnalysisSobolIndiceParameters *) x));
}
static void *_p_OT__Base__Stat__CorrelationAnalysisSobolIndiceResultTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Stat::CorrelationAnalysisSobolIndiceResult *) x));
}
static void *_p_OpenTURNS__Base__Graph__BarPlotTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Graph::DrawableImplementation *) ((OpenTURNS::Base::Graph::BarPlot *) x));
}
static void *_p_OpenTURNS__Base__Func__ComputedNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Base::Func::ComputedNumericalMathEvaluationImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__ComposedNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Base::Func::ComposedNumericalMathEvaluationImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaEvaluationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Uncertainty::Algorithm::InverseNatafEllipticalCopulaEvaluation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaGradientTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Uncertainty::Algorithm::InverseNatafEllipticalCopulaGradient *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaHessianTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Uncertainty::Algorithm::InverseNatafEllipticalCopulaHessian *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionEvaluationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *)(OpenTURNS::Base::Func::LinearNumericalMathEvaluationImplementation *) ((OpenTURNS::Uncertainty::Algorithm::InverseNatafEllipticalDistributionEvaluation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionGradientTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathGradientImplementation *)(OpenTURNS::Base::Func::ConstantNumericalMathGradientImplementation *) ((OpenTURNS::Uncertainty::Algorithm::InverseNatafEllipticalDistributionGradient *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionHessianTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathHessianImplementation *)(OpenTURNS::Base::Func::ConstantNumericalMathHessianImplementation *) ((OpenTURNS::Uncertainty::Algorithm::InverseNatafEllipticalDistributionHessian *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__ExponentialRBFTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::SVMKernelImplementation *) ((OpenTURNS::Uncertainty::Algorithm::ExponentialRBF *) x));
}
static void *_p_OpenTURNS__Base__Algo__LeastSquaresMetaModelSelectionTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Algo::ApproximationAlgorithmImplementation *) ((OpenTURNS::Base::Algo::LeastSquaresMetaModelSelection *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__ImportanceSamplingExperimentTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *)(OpenTURNS::Uncertainty::Algorithm::WeightedExperiment *) ((OpenTURNS::Uncertainty::Algorithm::ImportanceSamplingExperiment *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__ImportanceSamplingTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::Simulation *) ((OpenTURNS::Uncertainty::Algorithm::ImportanceSampling *) x));
}
static void *_p_OpenTURNS__Base__Type__PersistentCollectionT_double_tTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Type::PersistentCollection< double > *) x));
}
static void *_p_OpenTURNS__Base__Algo__ApproximationAlgorithmImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Algo::ApproximationAlgorithmImplementation *) x));
}
static void *_p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Optim::NearestPointAlgorithmImplementation *) x));
}
static void *_p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementationResultTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Base::Optim::NearestPointAlgorithmImplementationResult *) x));
}
static void *_p_OpenTURNS__Base__Solver__BrentTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Solver::SolverImplementation *) ((OpenTURNS::Base::Solver::Brent *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__TruncatedNormalTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::TruncatedNormal *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__TruncatedNormalFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::TruncatedNormalFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__ChebychevAlgorithmTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::OrthonormalizationAlgorithmImplementation *) ((OpenTURNS::Uncertainty::Algorithm::ChebychevAlgorithm *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__MetaModelAlgorithmTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Regression::RegressionAlgorithm *) ((OpenTURNS::Uncertainty::Algorithm::MetaModelAlgorithm *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__TruncatedDistributionTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::TruncatedDistribution *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GumbelFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::GumbelFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__NormalFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::NormalFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__StudentTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::EllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Student *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__KernelSmoothingTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Uncertainty::Distribution::KernelSmoothing *) x));
}
static void *_p_IntegralCompoundPoisson__IntegralUserDefinedFactoryTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((IntegralCompoundPoisson::IntegralUserDefinedFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ArcsineTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Arcsine *) x));
}
static void *_p_OpenTURNS__Base__Func__LinearNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Base::Func::LinearNumericalMathEvaluationImplementation *) x));
}
static void *_p_OpenTURNS__Base__Graph__PieTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Graph::DrawableImplementation *) ((OpenTURNS::Base::Graph::Pie *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__LeastSquaresStrategyTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Algorithm::ProjectionStrategyImplementation *) ((OpenTURNS::Uncertainty::Algorithm::LeastSquaresStrategy *) x));
}
static void *_p_OpenTURNS__Base__Diff__FiniteDifferenceHessianTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Base::Diff::FiniteDifferenceHessian *) x));
}
static void *_p_OpenTURNS__Base__Func__ProductNumericalMathHessianImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Base::Func::ProductNumericalMathHessianImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__LinearCombinationHessianImplementationTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Base::Func::LinearCombinationHessianImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__RiceTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *) (OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Rice *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__QuadraticCumulTo_p_OpenTURNS__Base__Common__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::PersistentObject *)  ((OpenTURNS::Uncertainty::Algorithm::QuadraticCumul *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ClaytonCopulaFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::ClaytonCopulaFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ClaytonCopulaTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *)(OpenTURNS::Uncertainty::Model::ArchimedeanCopula *) ((OpenTURNS::Uncertainty::Distribution::ClaytonCopula *) x));
}
static void *_p_OpenTURNS__Base__Type__PersistentCollectionT_double_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Type::PersistentCollection< double > *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__RayleighTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Rayleigh *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionEvaluationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Uncertainty::Algorithm::SVMKernelRegressionEvaluation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionGradientTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Uncertainty::Algorithm::SVMKernelRegressionGradient *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionHessianTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Uncertainty::Algorithm::SVMKernelRegressionHessian *) x));
}
static void *_p_OpenTURNS__Base__Graph__DrawableTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Graph::DrawableImplementation > *) ((OpenTURNS::Base::Graph::Drawable *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__TriangularFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::TriangularFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__InverseRosenblattEvaluationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Uncertainty::Algorithm::InverseRosenblattEvaluation *) x));
}
static void *_p_OpenTURNS__Base__Func__WrapperParameterTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *)  ((OpenTURNS::Base::Func::WrapperParameter *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__StandardEventTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Model::RandomVectorImplementation > *)(OpenTURNS::Uncertainty::Model::RandomVector *)(OpenTURNS::Uncertainty::Model::Event *) ((OpenTURNS::Uncertainty::Model::StandardEvent *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__SimulationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Uncertainty::Algorithm::Simulation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__UsualDistributionTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *) ((OpenTURNS::Uncertainty::Model::UsualDistribution *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__DistributionTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Model::DistributionImplementation > *) ((OpenTURNS::Uncertainty::Model::Distribution *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__AnalyticalResultTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Uncertainty::Algorithm::AnalyticalResult *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BurrTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Burr *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__RayleighFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::RayleighFactory *) x));
}
static void *_p_OpenTURNS__Base__Type__IndicesTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::UnsignedLong > *) ((OpenTURNS::Base::Type::Indices *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ExponentialTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Exponential *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GeometricFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::GeometricFactory *) x));
}
static void *_p_OpenTURNS__Base__Func__NumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__QuadraticNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Base::Func::QuadraticNumericalMathEvaluationImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__IndicatorNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Base::Func::IndicatorNumericalMathEvaluationImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__AnalyticalTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Uncertainty::Algorithm::Analytical *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__FrankCopulaFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::FrankCopulaFactory *) x));
}
static void *_p_OpenTURNS__Base__Func__WrapperDataFileTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *)  ((OpenTURNS::Base::Func::WrapperDataFile *) x));
}
static void *_p_OpenTURNS__Base__Graph__CurveTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Graph::DrawableImplementation *) ((OpenTURNS::Base::Graph::Curve *) x));
}
static void *_p_OpenTURNS__Base__Algo__LassoTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Algo::ApproximationAlgorithmImplementation *) ((OpenTURNS::Base::Algo::Lasso *) x));
}
static void *_p_OpenTURNS__Base__Func__LinearCombinationHessianImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Base::Func::LinearCombinationHessianImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__LogisticTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Logistic *) x));
}
static void *_p_OpenTURNS__Base__Common__ComparisonOperatorTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Common::ComparisonOperatorImplementation > *) ((OpenTURNS::Base::Common::ComparisonOperator *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__MonteCarloExperimentTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *)(OpenTURNS::Uncertainty::Algorithm::WeightedExperiment *) ((OpenTURNS::Uncertainty::Algorithm::MonteCarloExperiment *) x));
}
static void *_p_OpenTURNS__Base__Stat__HistoryStrategyImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Stat::HistoryStrategyImplementation *) x));
}
static void *_p_OpenTURNS__Base__Stat__NumericalSampleImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Stat::NumericalSampleImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__BasisTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::Base::Func::NumericalMathFunction > *) ((OpenTURNS::Base::Func::Basis *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__InverseNormalTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::InverseNormal *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BinomialTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::Binomial *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__MultinomialTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::Multinomial *) x));
}
static void *_p_OpenTURNS__Base__Func__UniVariatePolynomialTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Func::UniVariatePolynomialImplementation > *) ((OpenTURNS::Base::Func::UniVariatePolynomial *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ArcsineTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Arcsine *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__DirectionalSamplingTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::Simulation *) ((OpenTURNS::Uncertainty::Algorithm::DirectionalSampling *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__CompositeRandomVectorTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::RandomVectorImplementation *) ((OpenTURNS::Uncertainty::Model::CompositeRandomVector *) x));
}
static void *_p_OpenTURNS__Base__Common__PersistentObjectTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *)  ((OpenTURNS::Base::Common::PersistentObject *) x));
}
static void *_p_OpenTURNS__Base__Common__InterfaceObjectTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *)  ((OpenTURNS::Base::Common::InterfaceObject *) x));
}
static void *_p_OpenTURNS__Base__Diff__ProportionalStepTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Diff::FiniteDifferenceStepImplementation *) ((OpenTURNS::Base::Diff::ProportionalStep *) x));
}
static void *_p_OpenTURNS__Base__Common__StudyTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *)  ((OpenTURNS::Base::Common::Study *) x));
}
static void *_p_OpenTURNS__Base__Diff__ConstantStepTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Diff::FiniteDifferenceStepImplementation *) ((OpenTURNS::Base::Diff::ConstantStep *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__StratifiedExperimentTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *) ((OpenTURNS::Uncertainty::Algorithm::StratifiedExperiment *) x));
}
static void *_p_OpenTURNS__Base__Func__LinearCombinationEvaluationImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Base::Func::LinearCombinationEvaluationImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__ProductPolynomialEvaluationImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Base::Func::ProductPolynomialEvaluationImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__TriangularTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Triangular *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalProductPolynomialFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::OrthogonalFunctionFactory *) ((OpenTURNS::Uncertainty::Algorithm::OrthogonalProductPolynomialFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaEvaluationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Uncertainty::Algorithm::InverseNatafIndependentCopulaEvaluation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaGradientTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Uncertainty::Algorithm::InverseNatafIndependentCopulaGradient *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaHessianTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Uncertainty::Algorithm::InverseNatafIndependentCopulaHessian *) x));
}
static void *_p_OpenTURNS__Base__Common__EqualTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Common::ComparisonOperatorImplementation *) ((OpenTURNS::Base::Common::Equal *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__MonteCarloTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::Simulation *) ((OpenTURNS::Uncertainty::Algorithm::MonteCarlo *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarloTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::Simulation *) ((OpenTURNS::Uncertainty::Algorithm::QuasiMonteCarlo *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarloResultTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::SimulationResultImplementation *) ((OpenTURNS::Uncertainty::Algorithm::QuasiMonteCarloResult *) x));
}
static void *_p_OpenTURNS__Base__Solver__SecantTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Solver::SolverImplementation *) ((OpenTURNS::Base::Solver::Secant *) x));
}
static void *_p_OpenTURNS__Base__Common__GreaterTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Common::ComparisonOperatorImplementation *) ((OpenTURNS::Base::Common::Greater *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__EventRandomVectorImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::RandomVectorImplementation *)(OpenTURNS::Uncertainty::Model::CompositeRandomVector *) ((OpenTURNS::Uncertainty::Model::EventRandomVectorImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ComposedCopulaTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *) ((OpenTURNS::Uncertainty::Distribution::ComposedCopula *) x));
}
static void *_p_OpenTURNS__Base__Stat__CorrelationMatrixTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Type::MatrixImplementation > *)(OpenTURNS::Base::Type::Matrix *)(OpenTURNS::Base::Type::SquareMatrix *)(OpenTURNS::Base::Type::SymmetricMatrix *)(OpenTURNS::Base::Stat::CovarianceMatrix *) ((OpenTURNS::Base::Stat::CorrelationMatrix *) x));
}
static void *_p_OpenTURNS__Base__Type__MatrixTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Type::MatrixImplementation > *) ((OpenTURNS::Base::Type::Matrix *) x));
}
static void *_p_OpenTURNS__Base__Type__IdentityMatrixTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Type::MatrixImplementation > *)(OpenTURNS::Base::Type::Matrix *)(OpenTURNS::Base::Type::SquareMatrix *)(OpenTURNS::Base::Type::SymmetricMatrix *)(OpenTURNS::Base::Stat::CovarianceMatrix *)(OpenTURNS::Base::Stat::CorrelationMatrix *) ((OpenTURNS::Base::Type::IdentityMatrix *) x));
}
static void *_p_OpenTURNS__Base__Stat__CovarianceMatrixTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Type::MatrixImplementation > *)(OpenTURNS::Base::Type::Matrix *)(OpenTURNS::Base::Type::SquareMatrix *)(OpenTURNS::Base::Type::SymmetricMatrix *) ((OpenTURNS::Base::Stat::CovarianceMatrix *) x));
}
static void *_p_OpenTURNS__Base__Type__SymmetricMatrixTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Type::MatrixImplementation > *)(OpenTURNS::Base::Type::Matrix *)(OpenTURNS::Base::Type::SquareMatrix *) ((OpenTURNS::Base::Type::SymmetricMatrix *) x));
}
static void *_p_OpenTURNS__Base__Type__SquareMatrixTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Type::MatrixImplementation > *)(OpenTURNS::Base::Type::Matrix *) ((OpenTURNS::Base::Type::SquareMatrix *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosResultTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::MetaModelResult *) ((OpenTURNS::Uncertainty::Algorithm::FunctionalChaosResult *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosAlgorithmTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Regression::RegressionAlgorithm *)(OpenTURNS::Uncertainty::Algorithm::MetaModelAlgorithm *) ((OpenTURNS::Uncertainty::Algorithm::FunctionalChaosAlgorithm *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__FunctionalChaosRandomVectorTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::RandomVectorImplementation *)(OpenTURNS::Uncertainty::Model::CompositeRandomVector *) ((OpenTURNS::Uncertainty::Model::FunctionalChaosRandomVector *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__RationalKernelTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::SVMKernelImplementation *) ((OpenTURNS::Uncertainty::Algorithm::RationalKernel *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__SVMKernelTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Algorithm::SVMKernelImplementation > *) ((OpenTURNS::Uncertainty::Algorithm::SVMKernel *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BinomialFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::BinomialFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__SORMTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::Analytical *) ((OpenTURNS::Uncertainty::Algorithm::SORM *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__KernelSmoothingTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Uncertainty::Distribution::KernelSmoothing *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__LinearEnumerateFunctionTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::EnumerateFunction *) ((OpenTURNS::Uncertainty::Algorithm::LinearEnumerateFunction *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__LHSExperimentTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *)(OpenTURNS::Uncertainty::Algorithm::WeightedExperiment *) ((OpenTURNS::Uncertainty::Algorithm::LHSExperiment *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__FixedExperimentTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *)(OpenTURNS::Uncertainty::Algorithm::WeightedExperiment *) ((OpenTURNS::Uncertainty::Algorithm::FixedExperiment *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__ExperimentTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation > *) ((OpenTURNS::Uncertainty::Algorithm::Experiment *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__BoxTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *)(OpenTURNS::Uncertainty::Algorithm::StratifiedExperiment *) ((OpenTURNS::Uncertainty::Algorithm::Box *) x));
}
static void *_p_OpenTURNS__Base__Algo__FittingAlgorithmImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Algo::FittingAlgorithmImplementation *) x));
}
static void *_p_OpenTURNS__Base__Stat__LastTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Stat::HistoryStrategyImplementation *) ((OpenTURNS::Base::Stat::Last *) x));
}
static void *_p_OpenTURNS__Base__Solver__BrentTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Solver::SolverImplementation *) ((OpenTURNS::Base::Solver::Brent *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__UserDefinedFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::UserDefinedFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__LaplaceFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::LaplaceFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ArcsineFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::ArcsineFactory *) x));
}
static void *_p_OpenTURNS__Base__Graph__GraphImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Graph::GraphImplementation *) x));
}
static void *_p_OpenTURNS__Base__Graph__DrawableImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Graph::DrawableImplementation *) x));
}
static void *_p_OpenTURNS__Base__Type__TensorImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::NumericalScalar > *) ((OpenTURNS::Base::Type::TensorImplementation *) x));
}
static void *_p_OpenTURNS__Base__Type__DescriptionImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::String > *) ((OpenTURNS::Base::Type::DescriptionImplementation *) x));
}
static void *_p_OpenTURNS__Base__Type__MatrixImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::NumericalScalar > *) ((OpenTURNS::Base::Type::MatrixImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__BasisSequenceImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::Base::Func::Basis > *) ((OpenTURNS::Base::Func::BasisSequenceImplementation *) x));
}
static void *_p_OpenTURNS__Base__Solver__SolverImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Solver::SolverImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithmTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Algorithm::OrthonormalizationAlgorithmImplementation > *) ((OpenTURNS::Uncertainty::Algorithm::OrthonormalizationAlgorithm *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithmImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Uncertainty::Algorithm::OrthonormalizationAlgorithmImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__NonCentralStudentTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::NonCentralStudent *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__FORMTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::Analytical *) ((OpenTURNS::Uncertainty::Algorithm::FORM *) x));
}
static void *_p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementationResultTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Optim::BoundConstrainedAlgorithmImplementationResult *) x));
}
static void *_p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Optim::BoundConstrainedAlgorithmImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__LogNormalFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::LogNormalFactory *) x));
}
static void *_p_OpenTURNS__Base__Func__LinearCombinationGradientImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Base::Func::LinearCombinationGradientImplementation *) x));
}
static void *_p_OpenTURNS__Base__Optim__NearestPointCheckerTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Optim::NearestPointChecker *) x));
}
static void *_p_OpenTURNS__Base__Solver__SolverTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Solver::SolverImplementation > *) ((OpenTURNS::Base::Solver::Solver *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__UserDefinedPairTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Uncertainty::Distribution::UserDefinedPair *) x));
}
static void *_p_OpenTURNS__Base__Func__NoNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Base::Func::NoNumericalMathEvaluationImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__NonEllipticalDistributionTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *) ((OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) x));
}
static void *_p_OpenTURNS__Base__Optim__PenalizedLeastSquaresAlgorithmTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Optim::PenalizedLeastSquaresAlgorithm *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__LHSTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::Simulation *) ((OpenTURNS::Uncertainty::Algorithm::LHS *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GumbelCopulaFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::GumbelCopulaFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GumbelCopulaTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *)(OpenTURNS::Uncertainty::Model::ArchimedeanCopula *) ((OpenTURNS::Uncertainty::Distribution::GumbelCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__NormalCopulaFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::NormalCopulaFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__NormalCopulaTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *) ((OpenTURNS::Uncertainty::Distribution::NormalCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__SklarCopulaTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *) ((OpenTURNS::Uncertainty::Model::SklarCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__ArchimedeanCopulaTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *) ((OpenTURNS::Uncertainty::Model::ArchimedeanCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__CopulaTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Model::DistributionImplementation > *)(OpenTURNS::Uncertainty::Model::Distribution *) ((OpenTURNS::Uncertainty::Model::Copula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__FrankCopulaTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *)(OpenTURNS::Uncertainty::Model::ArchimedeanCopula *) ((OpenTURNS::Uncertainty::Distribution::FrankCopula *) x));
}
static void *_p_OpenTURNS__Base__Graph__StaircaseTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Graph::DrawableImplementation *) ((OpenTURNS::Base::Graph::Staircase *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BernoulliFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::BernoulliFactory *) x));
}
static void *_p_OpenTURNS__Base__Func__ConstantNumericalMathHessianImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Base::Func::ConstantNumericalMathHessianImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__ComputedNumericalMathHessianImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Base::Func::ComputedNumericalMathHessianImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__ComposedNumericalMathHessianImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Base::Func::ComposedNumericalMathHessianImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__NormalRBFTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::SVMKernelImplementation *) ((OpenTURNS::Uncertainty::Algorithm::NormalRBF *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ChiSquareTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::ChiSquare *) x));
}
static void *_p_OpenTURNS__Base__Func__WrapperFrameworkDataTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *)  ((OpenTURNS::Base::Func::WrapperFrameworkData *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__RiskyAndFastTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::RootStrategyImplementation *) ((OpenTURNS::Uncertainty::Algorithm::RiskyAndFast *) x));
}
static void *_p_OpenTURNS__Base__Func__LinearNumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Base::Func::LinearNumericalMathGradientImplementation *) x));
}
static void *_p_OpenTURNS__Base__Diff__FiniteDifferenceGradientTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Base::Diff::FiniteDifferenceGradient *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__FixedStrategyTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::AdaptiveStrategyImplementation *) ((OpenTURNS::Uncertainty::Algorithm::FixedStrategy *) x));
}
static void *_p_OpenTURNS__Base__Stat__HistoryStrategyTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Stat::HistoryStrategyImplementation > *) ((OpenTURNS::Base::Stat::HistoryStrategy *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__RootStrategyTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Algorithm::RootStrategyImplementation > *) ((OpenTURNS::Uncertainty::Algorithm::RootStrategy *) x));
}
static void *_p_OpenTURNS__Base__Stat__LowDiscrepancySequenceImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Stat::LowDiscrepancySequenceImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__LogisticFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::LogisticFactory *) x));
}
static void *_p_OpenTURNS__Base__Diff__NonCenteredFiniteDifferenceGradientTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathGradientImplementation *)(OpenTURNS::Base::Diff::FiniteDifferenceGradient *) ((OpenTURNS::Base::Diff::NonCenteredFiniteDifferenceGradient *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__BootstrapExperimentTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *)(OpenTURNS::Uncertainty::Algorithm::WeightedExperiment *) ((OpenTURNS::Uncertainty::Algorithm::BootstrapExperiment *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__HyperbolicAnisotropicEnumerateFunctionTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::EnumerateFunction *) ((OpenTURNS::Uncertainty::Algorithm::HyperbolicAnisotropicEnumerateFunction *) x));
}
static void *_p_OpenTURNS__Base__Type__NumericalPointWithDescriptionTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::NumericalScalar > *)(OpenTURNS::Base::Type::NumericalPoint *) ((OpenTURNS::Base::Type::NumericalPointWithDescription *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalControlledImportanceSamplingTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::Simulation *)(OpenTURNS::Uncertainty::Algorithm::PostAnalyticalSimulation *) ((OpenTURNS::Uncertainty::Algorithm::PostAnalyticalControlledImportanceSampling *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__EpanechnikovTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Epanechnikov *) x));
}
static void *_p_OpenTURNS__Base__Graph__PieTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Graph::DrawableImplementation *) ((OpenTURNS::Base::Graph::Pie *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__RiceTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Rice *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalImportanceSamplingTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::Simulation *)(OpenTURNS::Uncertainty::Algorithm::PostAnalyticalSimulation *) ((OpenTURNS::Uncertainty::Algorithm::PostAnalyticalImportanceSampling *) x));
}
static void *_p_OpenTURNS__Base__Optim__AbdoRackwitzTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Optim::NearestPointAlgorithmImplementation *) ((OpenTURNS::Base::Optim::AbdoRackwitz *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedCollectionInterfaceObjectT_OpenTURNS__Base__Type__DescriptionImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Type::DescriptionImplementation > *) ((OpenTURNS::Base::Common::TypedCollectionInterfaceObject< OpenTURNS::Base::Type::DescriptionImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedCollectionInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Func::BasisSequenceImplementation > *) ((OpenTURNS::Base::Common::TypedCollectionInterfaceObject< OpenTURNS::Base::Func::BasisSequenceImplementation > *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__IndependentCopulaTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *) ((OpenTURNS::Uncertainty::Distribution::IndependentCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__TruncatedNormalFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::TruncatedNormalFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__TruncatedNormalTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::TruncatedNormal *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__PoissonFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::PoissonFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GammaTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Gamma *) x));
}
static void *_p_OpenTURNS__Base__Stat__NullTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Stat::HistoryStrategyImplementation *) ((OpenTURNS::Base::Stat::Null *) x));
}
static void *_p_OpenTURNS__Base__Func__ProductNumericalMathFunctionTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathFunctionImplementation *) ((OpenTURNS::Base::Func::ProductNumericalMathFunction *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalSimulationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::Simulation *) ((OpenTURNS::Uncertainty::Algorithm::PostAnalyticalSimulation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__AxialTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *)(OpenTURNS::Uncertainty::Algorithm::StratifiedExperiment *) ((OpenTURNS::Uncertainty::Algorithm::Axial *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__HistogramTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Histogram *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalBasisTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Algorithm::OrthogonalFunctionFactory > *) ((OpenTURNS::Uncertainty::Algorithm::OrthogonalBasis *) x));
}
static void *_p_OpenTURNS__Base__Stat__FullTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Stat::HistoryStrategyImplementation *) ((OpenTURNS::Base::Stat::Full *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BernoulliTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::Bernoulli *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__MultinomialFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::MultinomialFactory *) x));
}
static void *_p_OpenTURNS__Base__Func__NumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Func::NumericalMathGradientImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__NumericalMathFunctionImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Func::NumericalMathFunctionImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__MixtureTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *) ((OpenTURNS::Uncertainty::Distribution::Mixture *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__SVMKernelImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Uncertainty::Algorithm::SVMKernelImplementation *) x));
}
static void *_p_OpenTURNS__Base__Optim__CobylaSpecificParametersTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Optim::CobylaSpecificParameters *) x));
}
static void *_p_OpenTURNS__Base__Optim__TNCSpecificParametersTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Optim::TNCSpecificParameters *) x));
}
static void *_p_OpenTURNS__Base__Optim__SQPSpecificParametersTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Optim::SQPSpecificParameters *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__MediumSafeTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::RootStrategyImplementation *) ((OpenTURNS::Uncertainty::Algorithm::MediumSafe *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__DirichletTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Dirichlet *) x));
}
static void *_p_OpenTURNS__Base__Regression__RegressionAlgorithmTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Regression::RegressionAlgorithm *) x));
}
static void *_p_OpenTURNS__Base__Algo__ApproximationAlgorithmTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Algo::ApproximationAlgorithmImplementation > *) ((OpenTURNS::Base::Algo::ApproximationAlgorithm *) x));
}
static void *_p_OpenTURNS__Base__Algo__FittingAlgorithmTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Algo::FittingAlgorithmImplementation > *) ((OpenTURNS::Base::Algo::FittingAlgorithm *) x));
}
static void *_p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Optim::BoundConstrainedAlgorithmImplementation > *) ((OpenTURNS::Base::Optim::BoundConstrainedAlgorithm *) x));
}
static void *_p_OpenTURNS__Base__Optim__NearestPointAlgorithmTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Optim::NearestPointAlgorithmImplementation > *) ((OpenTURNS::Base::Optim::NearestPointAlgorithm *) x));
}
static void *_p_OpenTURNS__Base__Solver__BisectionTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Solver::SolverImplementation *) ((OpenTURNS::Base::Solver::Bisection *) x));
}
static void *_p_OpenTURNS__Base__Algo__LeastSquaresMetaModelSelectionTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Algo::ApproximationAlgorithmImplementation *) ((OpenTURNS::Base::Algo::LeastSquaresMetaModelSelection *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__RandomDirectionTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::SamplingStrategyImplementation *) ((OpenTURNS::Uncertainty::Algorithm::RandomDirection *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__ConditionalRandomVectorTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::RandomVectorImplementation *) ((OpenTURNS::Uncertainty::Model::ConditionalRandomVector *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__NormalTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::EllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Normal *) x));
}
static void *_p_OT__Base__Stat__CorrelationAnalysisSobolIndiceResultTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Stat::CorrelationAnalysisSobolIndiceResult *) x));
}
static void *_p_OT__Base__Stat__CorrelationAnalysisSobolIndiceParametersTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Stat::CorrelationAnalysisSobolIndiceParameters *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__LogNormalTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::LogNormal *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__CopulaImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *) ((OpenTURNS::Uncertainty::Model::CopulaImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__LeastSquaresStrategyTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::ProjectionStrategyImplementation *) ((OpenTURNS::Uncertainty::Algorithm::LeastSquaresStrategy *) x));
}
static void *_p_OpenTURNS__Base__Func__NoNumericalMathHessianImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Base::Func::NoNumericalMathHessianImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__UniformFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::UniformFactory *) x));
}
static void *_p_OpenTURNS__Base__Func__ComputedNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Base::Func::ComputedNumericalMathEvaluationImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__ComposedNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Base::Func::ComposedNumericalMathEvaluationImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ChiTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Chi *) x));
}
static void *_p_OpenTURNS__Base__Func__ProductNumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Base::Func::ProductNumericalMathGradientImplementation *) x));
}
static void *_p_OpenTURNS__Base__Regression__LinearTaylorTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Regression::RegressionAlgorithm *) ((OpenTURNS::Base::Regression::LinearTaylor *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationEvaluationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Uncertainty::Algorithm::MarginalTransformationEvaluation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationGradientTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Uncertainty::Algorithm::MarginalTransformationGradient *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationHessianTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Uncertainty::Algorithm::MarginalTransformationHessian *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__ImportanceSamplingExperimentTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *)(OpenTURNS::Uncertainty::Algorithm::WeightedExperiment *) ((OpenTURNS::Uncertainty::Algorithm::ImportanceSamplingExperiment *) x));
}
static void *_p_OpenTURNS__Base__Regression__QuadraticTaylorTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Regression::RegressionAlgorithm *) ((OpenTURNS::Base::Regression::QuadraticTaylor *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__ImportanceSamplingTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::Simulation *) ((OpenTURNS::Uncertainty::Algorithm::ImportanceSampling *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__TrapezoidalTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Trapezoidal *) x));
}
static void *_p_OpenTURNS__Base__Graph__GraphTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Graph::GraphImplementation > *) ((OpenTURNS::Base::Graph::Graph *) x));
}
static void *_p_OpenTURNS__Base__Func__LARTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::BasisSequenceFactoryImplementation *) ((OpenTURNS::Base::Func::LAR *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__FactorialTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *)(OpenTURNS::Uncertainty::Algorithm::StratifiedExperiment *) ((OpenTURNS::Uncertainty::Algorithm::Factorial *) x));
}
static void *_p_OpenTURNS__Base__Regression__QuadraticLeastSquaresTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Regression::RegressionAlgorithm *) ((OpenTURNS::Base::Regression::QuadraticLeastSquares *) x));
}
static void *_p_OpenTURNS__Base__Regression__LinearLeastSquaresTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Regression::RegressionAlgorithm *) ((OpenTURNS::Base::Regression::LinearLeastSquares *) x));
}
static void *_p_OpenTURNS__Base__Func__ComposedNumericalMathFunctionTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathFunctionImplementation *) ((OpenTURNS::Base::Func::ComposedNumericalMathFunction *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__EnumerateFunctionTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Uncertainty::Algorithm::EnumerateFunction *) x));
}
static void *_p_OpenTURNS__Base__Optim__TNCTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Optim::BoundConstrainedAlgorithmImplementation *) ((OpenTURNS::Base::Optim::TNC *) x));
}
static void *_p_OpenTURNS__Base__Func__ProductNumericalMathHessianImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Base::Func::ProductNumericalMathHessianImplementation *) x));
}
static void *_p_OpenTURNS__Base__Diff__FiniteDifferenceHessianTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Base::Diff::FiniteDifferenceHessian *) x));
}
static void *_p_OpenTURNS__Base__Func__NoNumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Base::Func::NoNumericalMathGradientImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__GramSchmidtAlgorithmTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::OrthonormalizationAlgorithmImplementation *) ((OpenTURNS::Uncertainty::Algorithm::GramSchmidtAlgorithm *) x));
}
static void *_p_OpenTURNS__Base__Type__NumericalPointTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::NumericalScalar > *) ((OpenTURNS::Base::Type::NumericalPoint *) x));
}
static void *_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFamily_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::Uncertainty::Algorithm::OrthogonalUniVariatePolynomialFamily > *) x));
}
static void *_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__UserDefinedPair_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::Uncertainty::Distribution::UserDefinedPair > *) x));
}
static void *_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__HistogramPair_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::Uncertainty::Distribution::HistogramPair > *) x));
}
static void *_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPoint_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::Base::Type::NumericalPoint > *) x));
}
static void *_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPointWithDescription_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::Base::Type::NumericalPointWithDescription > *) x));
}
static void *_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__UniVariatePolynomial_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::Base::Func::UniVariatePolynomial > *) x));
}
static void *_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__NumericalMathFunction_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::Base::Func::NumericalMathFunction > *) x));
}
static void *_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__Basis_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::Base::Func::Basis > *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__EllipticalDistributionTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *) ((OpenTURNS::Uncertainty::Model::EllipticalDistribution *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__ContinuousDistributionTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *) ((OpenTURNS::Uncertainty::Model::ContinuousDistribution *) x));
}
static void *_p_OpenTURNS__Base__Algo__ApproximationAlgorithmImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Algo::ApproximationAlgorithmImplementation *) x));
}
static void *_p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementationResultTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Optim::NearestPointAlgorithmImplementationResult *) x));
}
static void *_p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Optim::NearestPointAlgorithmImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__WeibullFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::WeibullFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ZipfMandelbrotTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::ZipfMandelbrot *) x));
}
static void *_p_OpenTURNS__Base__Common__LessTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Common::ComparisonOperatorImplementation *) ((OpenTURNS::Base::Common::Less *) x));
}
static void *_p_OpenTURNS__Base__Graph__ContourTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Graph::DrawableImplementation *) ((OpenTURNS::Base::Graph::Contour *) x));
}
static void *_p_OpenTURNS__Base__Func__NumericalMathFunctionTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Func::NumericalMathFunctionImplementation > *) ((OpenTURNS::Base::Func::NumericalMathFunction *) x));
}
static void *_p_OpenTURNS__Base__Func__LinearNumericalMathFunctionTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Func::NumericalMathFunctionImplementation > *)(OpenTURNS::Base::Func::NumericalMathFunction *) ((OpenTURNS::Base::Func::LinearNumericalMathFunction *) x));
}
static void *_p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceHessianTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathHessianImplementation *)(OpenTURNS::Base::Diff::FiniteDifferenceHessian *) ((OpenTURNS::Base::Diff::CenteredFiniteDifferenceHessian *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaEvaluationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Uncertainty::Algorithm::InverseNatafEllipticalCopulaEvaluation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaGradientTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Uncertainty::Algorithm::InverseNatafEllipticalCopulaGradient *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaHessianTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Uncertainty::Algorithm::InverseNatafEllipticalCopulaHessian *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionEvaluationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *)(OpenTURNS::Base::Func::LinearNumericalMathEvaluationImplementation *) ((OpenTURNS::Uncertainty::Algorithm::InverseNatafEllipticalDistributionEvaluation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionGradientTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathGradientImplementation *)(OpenTURNS::Base::Func::ConstantNumericalMathGradientImplementation *) ((OpenTURNS::Uncertainty::Algorithm::InverseNatafEllipticalDistributionGradient *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionHessianTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathHessianImplementation *)(OpenTURNS::Base::Func::ConstantNumericalMathHessianImplementation *) ((OpenTURNS::Uncertainty::Algorithm::InverseNatafEllipticalDistributionHessian *) x));
}
static void *_p_OpenTURNS__Base__Diff__FiniteDifferenceStepTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Diff::FiniteDifferenceStepImplementation > *) ((OpenTURNS::Base::Diff::FiniteDifferenceStep *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__DiscreteDistributionTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *) ((OpenTURNS::Uncertainty::Model::DiscreteDistribution *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__NormalFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::NormalFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GumbelFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::GumbelFactory *) x));
}
static void *_p_IntegralCompoundPoisson__IntegralUserDefinedFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((IntegralCompoundPoisson::IntegralUserDefinedFactory *) x));
}
static void *_p_OpenTURNS__Base__Optim__AbdoRackwitzSpecificParametersTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Optim::AbdoRackwitzSpecificParameters *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__LaplaceTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Laplace *) x));
}
static void *_p_OpenTURNS__Base__Algo__CorrectedLeaveOneOutTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Algo::FittingAlgorithmImplementation *) ((OpenTURNS::Base::Algo::CorrectedLeaveOneOut *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategyImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Uncertainty::Algorithm::ProjectionStrategyImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategyTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Algorithm::ProjectionStrategyImplementation > *) ((OpenTURNS::Uncertainty::Algorithm::ProjectionStrategy *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__NonCentralChiSquareTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::NonCentralChiSquare *) x));
}
static void *_p_OpenTURNS__Base__Stat__CompactTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Stat::HistoryStrategyImplementation *) ((OpenTURNS::Base::Stat::Compact *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__UserDefinedTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::UserDefined *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalDirectionTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::SamplingStrategyImplementation *) ((OpenTURNS::Uncertainty::Algorithm::OrthogonalDirection *) x));
}
static void *_p_IntegralCompoundPoisson__IntegralUserDefinedTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *)(OpenTURNS::Uncertainty::Distribution::UserDefined *) ((IntegralCompoundPoisson::IntegralUserDefined *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BetaTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Beta *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__ExponentialRBFTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::SVMKernelImplementation *) ((OpenTURNS::Uncertainty::Algorithm::ExponentialRBF *) x));
}
static void *_p_OpenTURNS__Base__Func__LinearNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Base::Func::LinearNumericalMathEvaluationImplementation *) x));
}
static void *_p_OpenTURNS__Base__Common__XMLStorageManagerTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::StorageManager *) ((OpenTURNS::Base::Common::XMLStorageManager *) x));
}
static void *_p_OpenTURNS__Base__Common__StorageManagerTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *)  ((OpenTURNS::Base::Common::StorageManager *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__QuadraticCumulTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Uncertainty::Algorithm::QuadraticCumul *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategyImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Algorithm::AdaptiveStrategyImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthogonalFunctionFactory_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Algorithm::OrthogonalFunctionFactory > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithmImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Algorithm::OrthonormalizationAlgorithmImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFactory_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Algorithm::OrthogonalUniVariatePolynomialFactory > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__ExperimentImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__RandomVectorImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Model::RandomVectorImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Model::DistributionImplementationFactory > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__DistributionImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Model::DistributionImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Algo__ApproximationAlgorithmImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Algo::ApproximationAlgorithmImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Algo__FittingAlgorithmImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Algo::FittingAlgorithmImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Graph__GraphImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Graph::GraphImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Graph__DrawableImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Graph::DrawableImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__LowDiscrepancySequenceImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Stat::LowDiscrepancySequenceImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__HistoryStrategyImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Stat::HistoryStrategyImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__NumericalSampleImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Stat::NumericalSampleImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__TensorImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Type::TensorImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__MatrixImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Type::MatrixImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Common__ComparisonOperatorImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Common::ComparisonOperatorImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__DescriptionImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Type::DescriptionImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__NumericalMathFunctionImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Func::NumericalMathFunctionImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__UniVariatePolynomialImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Func::UniVariatePolynomialImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Func::BasisSequenceImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceFactoryImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Func::BasisSequenceFactoryImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Diff__FiniteDifferenceStepImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Diff::FiniteDifferenceStepImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Optim::BoundConstrainedAlgorithmImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Optim::NearestPointAlgorithmImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Solver__SolverImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Solver::SolverImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategyImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Algorithm::ProjectionStrategyImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SVMKernelImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Algorithm::SVMKernelImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SimulationResultImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Algorithm::SimulationResultImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__RootStrategyImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Algorithm::RootStrategyImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SamplingStrategyImplementation_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *) ((OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Algorithm::SamplingStrategyImplementation > *) x));
}
static void *_p_OpenTURNS__Base__Stat__NumericalSampleTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Stat::NumericalSampleImplementation > *) ((OpenTURNS::Base::Stat::NumericalSample *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategyTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Algorithm::AdaptiveStrategyImplementation > *) ((OpenTURNS::Uncertainty::Algorithm::AdaptiveStrategy *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__CleaningStrategyTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::AdaptiveStrategyImplementation *) ((OpenTURNS::Uncertainty::Algorithm::CleaningStrategy *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategyImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Uncertainty::Algorithm::AdaptiveStrategyImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__SamplingStrategyImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Uncertainty::Algorithm::SamplingStrategyImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__SamplingStrategyTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Algorithm::SamplingStrategyImplementation > *) ((OpenTURNS::Uncertainty::Algorithm::SamplingStrategy *) x));
}
static void *_p_OpenTURNS__Base__Optim__CobylaTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Optim::NearestPointAlgorithmImplementation *) ((OpenTURNS::Base::Optim::Cobyla *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFamilyTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Algorithm::OrthogonalUniVariatePolynomialFactory > *) ((OpenTURNS::Uncertainty::Algorithm::OrthogonalUniVariatePolynomialFamily *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Uncertainty::Algorithm::OrthogonalUniVariatePolynomialFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::UniVariatePolynomialImplementation *) ((OpenTURNS::Uncertainty::Algorithm::OrthogonalUniVariatePolynomial *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__LegendreFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::OrthogonalUniVariatePolynomialFactory *) ((OpenTURNS::Uncertainty::Algorithm::LegendreFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__LaguerreFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::OrthogonalUniVariatePolynomialFactory *) ((OpenTURNS::Uncertainty::Algorithm::LaguerreFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__JacobiFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::OrthogonalUniVariatePolynomialFactory *) ((OpenTURNS::Uncertainty::Algorithm::JacobiFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__HermiteFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::OrthogonalUniVariatePolynomialFactory *) ((OpenTURNS::Uncertainty::Algorithm::HermiteFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GammaFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::GammaFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ChiFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::ChiFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BetaFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::BetaFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__DistributionFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Model::DistributionImplementationFactory > *) ((OpenTURNS::Uncertainty::Model::DistributionFactory *) x));
}
static void *_p_OpenTURNS__Base__Func__BasisSequenceFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Func::BasisSequenceFactoryImplementation > *) ((OpenTURNS::Base::Func::BasisSequenceFactory *) x));
}
static void *_p_OpenTURNS__Base__Graph__CloudTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Graph::DrawableImplementation *) ((OpenTURNS::Base::Graph::Cloud *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__WeightedExperimentTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *) ((OpenTURNS::Uncertainty::Algorithm::WeightedExperiment *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__CompositeTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *)(OpenTURNS::Uncertainty::Algorithm::StratifiedExperiment *) ((OpenTURNS::Uncertainty::Algorithm::Composite *) x));
}
static void *_p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceGradientTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathGradientImplementation *)(OpenTURNS::Base::Diff::FiniteDifferenceGradient *) ((OpenTURNS::Base::Diff::CenteredFiniteDifferenceGradient *) x));
}
static void *_p_OpenTURNS__Base__Stat__ConfidenceIntervalTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Stat::ConfidenceInterval *) x));
}
static void *_p_OpenTURNS__Base__Type__IntervalTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Type::Interval *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__KernelMixtureTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::KernelMixture *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__RandomMixtureTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *) ((OpenTURNS::Uncertainty::Distribution::RandomMixture *) x));
}
static void *_p_OpenTURNS__Base__Func__WrapperDataVariableTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *)  ((OpenTURNS::Base::Func::WrapperDataVariable *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GeometricTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::Geometric *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__HistogramPairTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Uncertainty::Distribution::HistogramPair *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__WeibullTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Weibull *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ChiSquareFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::ChiSquareFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__StandardDistributionPolynomialFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::OrthogonalUniVariatePolynomialFactory *) ((OpenTURNS::Uncertainty::Algorithm::StandardDistributionPolynomialFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__RandomVectorTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Model::RandomVectorImplementation > *) ((OpenTURNS::Uncertainty::Model::RandomVector *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__UsualRandomVectorTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::RandomVectorImplementation *) ((OpenTURNS::Uncertainty::Model::UsualRandomVector *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__HistogramFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::HistogramFactory *) x));
}
static void *_p_OpenTURNS__Base__Graph__BarPlotTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Graph::DrawableImplementation *) ((OpenTURNS::Base::Graph::BarPlot *) x));
}
static void *_p_OpenTURNS__Base__Type__PersistentCollectionT_unsigned_long_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Type::PersistentCollection< unsigned long > *) x));
}
static void *_p_OpenTURNS__Base__Optim__SQPTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Optim::NearestPointAlgorithmImplementation *) ((OpenTURNS::Base::Optim::SQP *) x));
}
static void *_p_OpenTURNS__Base__Func__ConstantNumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Base::Func::ConstantNumericalMathGradientImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__ComputedNumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Base::Func::ComputedNumericalMathGradientImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__ComposedNumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Base::Func::ComposedNumericalMathGradientImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__SimulationResultImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Uncertainty::Algorithm::SimulationResultImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__SimulationResultTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Algorithm::SimulationResultImplementation > *) ((OpenTURNS::Uncertainty::Algorithm::SimulationResult *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaEvaluationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Uncertainty::Algorithm::NatafIndependentCopulaEvaluation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaGradientTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Uncertainty::Algorithm::NatafIndependentCopulaGradient *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaHessianTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Uncertainty::Algorithm::NatafIndependentCopulaHessian *) x));
}
static void *_p_OpenTURNS__Base__Type__TensorTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Type::TensorImplementation > *) ((OpenTURNS::Base::Type::Tensor *) x));
}
static void *_p_OpenTURNS__Base__Type__SymmetricTensorTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Type::TensorImplementation > *)(OpenTURNS::Base::Type::Tensor *) ((OpenTURNS::Base::Type::SymmetricTensor *) x));
}
static void *_p_OpenTURNS__Base__Func__WrapperFunctionDescriptionTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *)  ((OpenTURNS::Base::Func::WrapperFunctionDescription *) x));
}
static void *_p_OpenTURNS__Base__Type__DescriptionTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Type::DescriptionImplementation > *)(OpenTURNS::Base::Common::TypedCollectionInterfaceObject< OpenTURNS::Base::Type::DescriptionImplementation > *) ((OpenTURNS::Base::Type::Description *) x));
}
static void *_p_OpenTURNS__Base__Func__WrapperFileTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Func::WrapperFile *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__TrapezoidalFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::TrapezoidalFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__MetaModelAlgorithmTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Regression::RegressionAlgorithm *) ((OpenTURNS::Uncertainty::Algorithm::MetaModelAlgorithm *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__ChebychevAlgorithmTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::OrthonormalizationAlgorithmImplementation *) ((OpenTURNS::Uncertainty::Algorithm::ChebychevAlgorithm *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__IntegrationStrategyTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::ProjectionStrategyImplementation *) ((OpenTURNS::Uncertainty::Algorithm::IntegrationStrategy *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__StudentFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::StudentFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ExponentialFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::ExponentialFactory *) x));
}
static void *_p_OpenTURNS__Base__Func__WrapperDataTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *)  ((OpenTURNS::Base::Func::WrapperData *) x));
}
static void *_p_OpenTURNS__Base__Func__LARLassoTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::BasisSequenceFactoryImplementation *) ((OpenTURNS::Base::Func::LARLasso *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__StrongMaximumTestTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Uncertainty::Algorithm::StrongMaximumTest *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__SequentialStrategyTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::AdaptiveStrategyImplementation *) ((OpenTURNS::Uncertainty::Algorithm::SequentialStrategy *) x));
}
static void *_p_OpenTURNS__Base__Func__ProductNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Base::Func::ProductNumericalMathEvaluationImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__RootStrategyImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Uncertainty::Algorithm::RootStrategyImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__TruncatedDistributionTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::TruncatedDistribution *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__RandomVectorImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Uncertainty::Model::RandomVectorImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__DistributionImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Uncertainty::Model::DistributionImplementation *) x));
}
static void *_p_OpenTURNS__Base__Common__ComparisonOperatorImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Common::ComparisonOperatorImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__NumericalMathHessianImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Func::NumericalMathHessianImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__UniVariatePolynomialImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Func::UniVariatePolynomialImplementation *) x));
}
static void *_p_OpenTURNS__Base__Func__BasisSequenceFactoryImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Func::BasisSequenceFactoryImplementation *) x));
}
static void *_p_OpenTURNS__Base__Diff__FiniteDifferenceStepImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Diff::FiniteDifferenceStepImplementation *) x));
}
static void *_p_OpenTURNS__Base__Type__PersistentCollectionT_std__string_tTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Type::PersistentCollection< std::string > *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__PoissonTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::Poisson *) x));
}
static void *_p_IntegralCompoundPoisson__IntegralCompoundPoissonTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((IntegralCompoundPoisson::IntegralCompoundPoisson *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__PolynomialKernelTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::SVMKernelImplementation *) ((OpenTURNS::Uncertainty::Algorithm::PolynomialKernel *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaEvaluationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Uncertainty::Algorithm::NatafEllipticalCopulaEvaluation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaGradientTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathGradientImplementation *) ((OpenTURNS::Uncertainty::Algorithm::NatafEllipticalCopulaGradient *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaHessianTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathHessianImplementation *) ((OpenTURNS::Uncertainty::Algorithm::NatafEllipticalCopulaHessian *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionEvaluationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *)(OpenTURNS::Base::Func::LinearNumericalMathEvaluationImplementation *) ((OpenTURNS::Uncertainty::Algorithm::NatafEllipticalDistributionEvaluation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionGradientTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathGradientImplementation *)(OpenTURNS::Base::Func::ConstantNumericalMathGradientImplementation *) ((OpenTURNS::Uncertainty::Algorithm::NatafEllipticalDistributionGradient *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionHessianTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathHessianImplementation *)(OpenTURNS::Base::Func::ConstantNumericalMathHessianImplementation *) ((OpenTURNS::Uncertainty::Algorithm::NatafEllipticalDistributionHessian *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__MetaModelResultTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Uncertainty::Algorithm::MetaModelResult *) x));
}
static void *_p_OpenTURNS__Base__Stat__TestResultTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Stat::TestResult *) x));
}
static void *_p_OT__Base__Optim__NearestPointChecker__ResultTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Optim::NearestPointCheckerResult *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__FORMResultTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::AnalyticalResult *) ((OpenTURNS::Uncertainty::Algorithm::FORMResult *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__SORMResultTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::AnalyticalResult *) ((OpenTURNS::Uncertainty::Algorithm::SORMResult *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__StudentTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::EllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Student *) x));
}
static void *_p_OpenTURNS__Base__Func__LARFSZeroTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::BasisSequenceFactoryImplementation *) ((OpenTURNS::Base::Func::LARFSZero *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ComposedDistributionTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *) ((OpenTURNS::Uncertainty::Distribution::ComposedDistribution *) x));
}
static void *_p_OpenTURNS__Base__Common__LessOrEqualTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Common::ComparisonOperatorImplementation *) ((OpenTURNS::Base::Common::LessOrEqual *) x));
}
static void *_p_OpenTURNS__Base__Common__GreaterOrEqualTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Common::ComparisonOperatorImplementation *) ((OpenTURNS::Base::Common::GreaterOrEqual *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__LowDiscrepancyExperimentTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *)(OpenTURNS::Uncertainty::Algorithm::WeightedExperiment *) ((OpenTURNS::Uncertainty::Algorithm::LowDiscrepancyExperiment *) x));
}
static void *_p_OpenTURNS__Base__Stat__InverseHaltonSequenceTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Stat::LowDiscrepancySequenceImplementation *) ((OpenTURNS::Base::Stat::InverseHaltonSequence *) x));
}
static void *_p_OpenTURNS__Base__Stat__HaltonSequenceTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Stat::LowDiscrepancySequenceImplementation *) ((OpenTURNS::Base::Stat::HaltonSequence *) x));
}
static void *_p_OpenTURNS__Base__Stat__FaureSequenceTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Stat::LowDiscrepancySequenceImplementation *) ((OpenTURNS::Base::Stat::FaureSequence *) x));
}
static void *_p_OpenTURNS__Base__Stat__SobolSequenceTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Stat::LowDiscrepancySequenceImplementation *) ((OpenTURNS::Base::Stat::SobolSequence *) x));
}
static void *_p_OpenTURNS__Base__Stat__LowDiscrepancySequenceTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Stat::LowDiscrepancySequenceImplementation > *) ((OpenTURNS::Base::Stat::LowDiscrepancySequence *) x));
}
static void *_p_OpenTURNS__Base__Func__BasisSequenceTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Base::Func::BasisSequenceImplementation > *)(OpenTURNS::Base::Common::TypedCollectionInterfaceObject< OpenTURNS::Base::Func::BasisSequenceImplementation > *) ((OpenTURNS::Base::Func::BasisSequence *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GumbelTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Gumbel *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__UniformTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementation *)(OpenTURNS::Uncertainty::Model::UsualDistribution *)(OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Uniform *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__SafeAndSlowTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Algorithm::RootStrategyImplementation *) ((OpenTURNS::Uncertainty::Algorithm::SafeAndSlow *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__ExperimentImplementationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Uncertainty::Algorithm::ExperimentImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalFunctionFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Uncertainty::Algorithm::OrthogonalFunctionFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Algorithm__RosenblattEvaluationTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Func::NumericalMathEvaluationImplementation *) ((OpenTURNS::Uncertainty::Algorithm::RosenblattEvaluation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__ConstantRandomVectorTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::RandomVectorImplementation *) ((OpenTURNS::Uncertainty::Model::ConstantRandomVector *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__EventTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::InterfaceObject *)(OpenTURNS::Base::Common::TypedInterfaceObject< OpenTURNS::Uncertainty::Model::RandomVectorImplementation > *)(OpenTURNS::Uncertainty::Model::RandomVector *) ((OpenTURNS::Uncertainty::Model::Event *) x));
}
static void *_p_OpenTURNS__Base__Stat__LinearModelTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *) ((OpenTURNS::Base::Stat::LinearModel *) x));
}
static void *_p_OpenTURNS__Base__Algo__LeavePOutTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Base::Algo::FittingAlgorithmImplementation *) ((OpenTURNS::Base::Algo::LeavePOut *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__DirichletFactoryTo_p_OpenTURNS__Base__Common__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Common::Object *) (OpenTURNS::Base::Common::PersistentObject *)(OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *) ((OpenTURNS::Uncertainty::Distribution::DirichletFactory *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__IndependentCopulaTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *) ((OpenTURNS::Uncertainty::Distribution::IndependentCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BinomialTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::Binomial *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__MultinomialTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::Multinomial *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__TriangularTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Triangular *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__NonEllipticalDistributionTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *) ((OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ClaytonCopulaTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *)(OpenTURNS::Uncertainty::Model::ArchimedeanCopula *) ((OpenTURNS::Uncertainty::Distribution::ClaytonCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__UniformTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Uniform *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__LogNormalTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::LogNormal *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__InverseNormalTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::InverseNormal *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__EpanechnikovTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Epanechnikov *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__PoissonTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::Poisson *) x));
}
static void *_p_IntegralCompoundPoisson__IntegralCompoundPoissonTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((IntegralCompoundPoisson::IntegralCompoundPoisson *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__ContinuousDistributionTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *)  ((OpenTURNS::Uncertainty::Model::ContinuousDistribution *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__EllipticalDistributionTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *) ((OpenTURNS::Uncertainty::Model::EllipticalDistribution *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BetaTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Beta *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ArcsineTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Arcsine *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__ArchimedeanCopulaTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *) ((OpenTURNS::Uncertainty::Model::ArchimedeanCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__SklarCopulaTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *) ((OpenTURNS::Uncertainty::Model::SklarCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__NormalCopulaTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *) ((OpenTURNS::Uncertainty::Distribution::NormalCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GumbelCopulaTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *)(OpenTURNS::Uncertainty::Model::ArchimedeanCopula *) ((OpenTURNS::Uncertainty::Distribution::GumbelCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ZipfMandelbrotTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::ZipfMandelbrot *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__RiceTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Rice *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GumbelTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Gumbel *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ChiTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Chi *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__RayleighTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Rayleigh *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__DiscreteDistributionTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *)  ((OpenTURNS::Uncertainty::Model::DiscreteDistribution *) x));
}
static void *_p_OpenTURNS__Uncertainty__Model__CopulaImplementationTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *) ((OpenTURNS::Uncertainty::Model::CopulaImplementation *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GammaTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Gamma *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__DirichletTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Dirichlet *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ComposedCopulaTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *) ((OpenTURNS::Uncertainty::Distribution::ComposedCopula *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__UserDefinedTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::UserDefined *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__FrankCopulaTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::CopulaImplementation *)(OpenTURNS::Uncertainty::Model::ArchimedeanCopula *) ((OpenTURNS::Uncertainty::Distribution::FrankCopula *) x));
}
static void *_p_IntegralCompoundPoisson__IntegralUserDefinedTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::DiscreteDistribution *)(OpenTURNS::Uncertainty::Distribution::UserDefined *) ((IntegralCompoundPoisson::IntegralUserDefined *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__WeibullTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Weibull *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__TrapezoidalTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Trapezoidal *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__HistogramTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Histogram *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GeometricTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::Geometric *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__LaplaceTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Laplace *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__LogisticTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Logistic *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BernoulliTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::DiscreteDistribution *) ((OpenTURNS::Uncertainty::Distribution::Bernoulli *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__NonCentralChiSquareTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::NonCentralChiSquare *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BurrTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Burr *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__StudentTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::EllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Student *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__TruncatedNormalTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::TruncatedNormal *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__NormalTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::EllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Normal *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__TruncatedDistributionTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::TruncatedDistribution *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__KernelMixtureTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::KernelMixture *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ChiSquareTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::ChiSquare *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ExponentialTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::Exponential *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__NonCentralStudentTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::UsualDistribution *) (OpenTURNS::Uncertainty::Model::ContinuousDistribution *)(OpenTURNS::Uncertainty::Model::NonEllipticalDistribution *) ((OpenTURNS::Uncertainty::Distribution::NonCentralStudent *) x));
}
static void *_p_OpenTURNS__Base__Type__MatrixImplementationTo_p_OpenTURNS__Base__Type__PersistentCollectionT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Type::PersistentCollection< double > *)  ((OpenTURNS::Base::Type::MatrixImplementation *) x));
}
static void *_p_OpenTURNS__Base__Type__TensorImplementationTo_p_OpenTURNS__Base__Type__PersistentCollectionT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Type::PersistentCollection< double > *)  ((OpenTURNS::Base::Type::TensorImplementation *) x));
}
static void *_p_OpenTURNS__Base__Type__NumericalPointWithDescriptionTo_p_OpenTURNS__Base__Type__PersistentCollectionT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Type::PersistentCollection< double > *) (OpenTURNS::Base::Type::NumericalPoint *) ((OpenTURNS::Base::Type::NumericalPointWithDescription *) x));
}
static void *_p_OpenTURNS__Base__Type__NumericalPointTo_p_OpenTURNS__Base__Type__PersistentCollectionT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Type::PersistentCollection< double > *)  ((OpenTURNS::Base::Type::NumericalPoint *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__UserDefinedTo_p_OpenTURNS__Uncertainty__Model__DiscreteDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DiscreteDistribution *)  ((OpenTURNS::Uncertainty::Distribution::UserDefined *) x));
}
static void *_p_IntegralCompoundPoisson__IntegralUserDefinedTo_p_OpenTURNS__Uncertainty__Model__DiscreteDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DiscreteDistribution *) (OpenTURNS::Uncertainty::Distribution::UserDefined *) ((IntegralCompoundPoisson::IntegralUserDefined *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__GeometricTo_p_OpenTURNS__Uncertainty__Model__DiscreteDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DiscreteDistribution *)  ((OpenTURNS::Uncertainty::Distribution::Geometric *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__ZipfMandelbrotTo_p_OpenTURNS__Uncertainty__Model__DiscreteDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DiscreteDistribution *)  ((OpenTURNS::Uncertainty::Distribution::ZipfMandelbrot *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__MultinomialTo_p_OpenTURNS__Uncertainty__Model__DiscreteDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DiscreteDistribution *)  ((OpenTURNS::Uncertainty::Distribution::Multinomial *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BernoulliTo_p_OpenTURNS__Uncertainty__Model__DiscreteDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DiscreteDistribution *)  ((OpenTURNS::Uncertainty::Distribution::Bernoulli *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__BinomialTo_p_OpenTURNS__Uncertainty__Model__DiscreteDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DiscreteDistribution *)  ((OpenTURNS::Uncertainty::Distribution::Binomial *) x));
}
static void *_p_OpenTURNS__Uncertainty__Distribution__PoissonTo_p_OpenTURNS__Uncertainty__Model__DiscreteDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DiscreteDistribution *)  ((OpenTURNS::Uncertainty::Distribution::Poisson *) x));
}
static void *_p_IntegralCompoundPoisson__IntegralCompoundPoissonTo_p_OpenTURNS__Uncertainty__Model__DiscreteDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Model::DiscreteDistribution *)  ((IntegralCompoundPoisson::IntegralCompoundPoisson *) x));
}
static void *_p_IntegralCompoundPoisson__IntegralUserDefinedTo_p_OpenTURNS__Uncertainty__Distribution__UserDefined(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Uncertainty::Distribution::UserDefined *)  ((IntegralCompoundPoisson::IntegralUserDefined *) x));
}
static void *_p_OpenTURNS__Base__Stat__CorrelationMatrixTo_p_OpenTURNS__Base__Stat__CovarianceMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Stat::CovarianceMatrix *)  ((OpenTURNS::Base::Stat::CorrelationMatrix *) x));
}
static void *_p_OpenTURNS__Base__Type__IdentityMatrixTo_p_OpenTURNS__Base__Stat__CovarianceMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Stat::CovarianceMatrix *) (OpenTURNS::Base::Stat::CorrelationMatrix *) ((OpenTURNS::Base::Type::IdentityMatrix *) x));
}
static void *_p_OpenTURNS__Base__Type__NumericalPointWithDescriptionTo_p_OpenTURNS__Base__Type__NumericalPoint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Type::NumericalPoint *)  ((OpenTURNS::Base::Type::NumericalPointWithDescription *) x));
}
static void *_p_OpenTURNS__Base__Func__LARTo_p_OpenTURNS__Base__Func__BasisSequenceFactoryImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Func::BasisSequenceFactoryImplementation *)  ((OpenTURNS::Base::Func::LAR *) x));
}
static void *_p_OpenTURNS__Base__Func__LARLassoTo_p_OpenTURNS__Base__Func__BasisSequenceFactoryImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Func::BasisSequenceFactoryImplementation *)  ((OpenTURNS::Base::Func::LARLasso *) x));
}
static void *_p_OpenTURNS__Base__Func__LARFSZeroTo_p_OpenTURNS__Base__Func__BasisSequenceFactoryImplementation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Func::BasisSequenceFactoryImplementation *)  ((OpenTURNS::Base::Func::LARFSZero *) x));
}
static void *_p_OpenTURNS__Base__Type__PersistentCollectionT_unsigned_long_tTo_p_OpenTURNS__Base__Type__CollectionT_unsigned_long_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Type::Collection< unsigned long > *)  ((OpenTURNS::Base::Type::PersistentCollection< unsigned long > *) x));
}
static void *_p_OpenTURNS__Base__Type__IndicesTo_p_OpenTURNS__Base__Type__CollectionT_unsigned_long_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OpenTURNS::Base::Type::Collection< unsigned long > *) (OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::UnsignedLong > *) ((OpenTURNS::Base::Type::Indices *) x));
}
static swig_type_info _swigt__p_AbdoRackwitzSpecificParameters = {"_p_AbdoRackwitzSpecificParameters", "AbdoRackwitzSpecificParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Antecedent = {"_p_Antecedent", "Antecedent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArchimedeanCopula = {"_p_ArchimedeanCopula", "ArchimedeanCopula *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Basis = {"_p_Basis", "Basis *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BoolCollection = {"_p_BoolCollection", "BoolCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BoolPersistentCollection = {"_p_BoolPersistentCollection", "BoolPersistentCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BoundingBox = {"_p_BoundingBox", "BoundingBox *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CacheImplementation = {"_p_CacheImplementation", "CacheImplementation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CacheType = {"_p_CacheType", "CacheType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CobylaSpecificParameters = {"_p_CobylaSpecificParameters", "CobylaSpecificParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Coefficients = {"_p_Coefficients", "Coefficients *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CoefficientsCollection = {"_p_CoefficientsCollection", "CoefficientsCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CoefficientsPersistentCollection = {"_p_CoefficientsPersistentCollection", "CoefficientsPersistentCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CommunicatorType = {"_p_CommunicatorType", "CommunicatorType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Compact = {"_p_Compact", "Compact *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ComparisonOperator = {"_p_ComparisonOperator", "ComparisonOperator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConfidenceIntervalCollection = {"_p_ConfidenceIntervalCollection", "ConfidenceIntervalCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConfidenceIntervalPersistentCollection = {"_p_ConfidenceIntervalPersistentCollection", "ConfidenceIntervalPersistentCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstantNumericalMathGradientImplementation = {"_p_ConstantNumericalMathGradientImplementation", "ConstantNumericalMathGradientImplementation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstantNumericalMathHessianImplementation = {"_p_ConstantNumericalMathHessianImplementation", "ConstantNumericalMathHessianImplementation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Copula = {"_p_Copula", "Copula *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CopulaCollection = {"_p_CopulaCollection", "CopulaCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CopulaImplementation = {"_p_CopulaImplementation", "CopulaImplementation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CopulaPersistentCollection = {"_p_CopulaPersistentCollection", "CopulaPersistentCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CorrelationMatrix = {"_p_CorrelationMatrix", "CorrelationMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CovarianceMatrix = {"_p_CovarianceMatrix", "CovarianceMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Description = {"_p_Description", "Description *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DirectoryList = {"_p_DirectoryList", "DirectoryList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DiscreteDistribution = {"_p_DiscreteDistribution", "DiscreteDistribution *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Distribution = {"_p_Distribution", "Distribution *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DistributionCollection = {"_p_DistributionCollection", "DistributionCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DistributionFactory = {"_p_DistributionFactory", "DistributionFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DistributionFactoryCollection = {"_p_DistributionFactoryCollection", "DistributionFactoryCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DistributionImplementation = {"_p_DistributionImplementation", "DistributionImplementation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DistributionImplementationFactory = {"_p_DistributionImplementationFactory", "DistributionImplementationFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DistributionPersistentCollection = {"_p_DistributionPersistentCollection", "DistributionPersistentCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DrawableCollection = {"_p_DrawableCollection", "DrawableCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DrawablePersistentCollection = {"_p_DrawablePersistentCollection", "DrawablePersistentCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ElementType = {"_p_ElementType", "ElementType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EllipticalDistribution = {"_p_EllipticalDistribution", "EllipticalDistribution *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EvaluationImplementation = {"_p_EvaluationImplementation", "EvaluationImplementation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Event = {"_p_Event", "Event *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Factory = {"_p_Factory", "Factory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FileListType = {"_p_FileListType", "FileListType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FileNotFoundException = {"_p_FileNotFoundException", "FileNotFoundException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FiniteDifferenceStep = {"_p_FiniteDifferenceStep", "FiniteDifferenceStep *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Format = {"_p_Format", "Format *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FunctionalChaosResult = {"_p_FunctionalChaosResult", "FunctionalChaosResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GradientImplementation = {"_p_GradientImplementation", "GradientImplementation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Graph = {"_p_Graph", "Graph *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GraphCollection = {"_p_GraphCollection", "GraphCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HessianImplementation = {"_p_HessianImplementation", "HessianImplementation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HistogramPairCollection = {"_p_HistogramPairCollection", "HistogramPairCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HistogramPairPersistentCollection = {"_p_HistogramPairPersistentCollection", "HistogramPairPersistentCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HistoryStrategy = {"_p_HistoryStrategy", "HistoryStrategy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IdentityMatrix = {"_p_IdentityMatrix", "IdentityMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Implementation = {"_p_Implementation", "Implementation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImplementationAsPersistentObject = {"_p_ImplementationAsPersistentObject", "ImplementationAsPersistentObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImplementationElementType = {"_p_ImplementationElementType", "ImplementationElementType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImplementationType = {"_p_ImplementationType", "ImplementationType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Indices = {"_p_Indices", "Indices *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IntegralCompoundPoisson__IntegralCompoundPoisson = {"_p_IntegralCompoundPoisson__IntegralCompoundPoisson", "IntegralCompoundPoisson::IntegralCompoundPoisson *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__CovarianceMatrix = {"_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__CovarianceMatrix", "IntegralCompoundPoisson::IntegralCompoundPoisson::IntegralCompoundPoisson::DiscreteDistribution::CovarianceMatrix *|IntegralCompoundPoisson::IntegralCompoundPoisson::CovarianceMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__Graph = {"_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__Graph", "IntegralCompoundPoisson::IntegralCompoundPoisson::IntegralCompoundPoisson::DiscreteDistribution::Graph *|IntegralCompoundPoisson::IntegralCompoundPoisson::Graph *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalPoint = {"_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalPoint", "IntegralCompoundPoisson::IntegralCompoundPoisson::IntegralCompoundPoisson::DiscreteDistribution::NumericalPoint *|IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalPoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalSample = {"_p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalSample", "IntegralCompoundPoisson::IntegralCompoundPoisson::IntegralCompoundPoisson::DiscreteDistribution::NumericalSample *|IntegralCompoundPoisson::IntegralCompoundPoisson::NumericalSample *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IntegralCompoundPoisson__IntegralUserDefined = {"_p_IntegralCompoundPoisson__IntegralUserDefined", "IntegralCompoundPoisson::IntegralUserDefined *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IntegralCompoundPoisson__IntegralUserDefinedFactory = {"_p_IntegralCompoundPoisson__IntegralUserDefinedFactory", "IntegralCompoundPoisson::IntegralUserDefinedFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InternalException = {"_p_InternalException", "InternalException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InternalFunction = {"_p_InternalFunction", "InternalFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InternalGradient = {"_p_InternalGradient", "InternalGradient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InternalHessian = {"_p_InternalHessian", "InternalHessian *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InternalType = {"_p_InternalType", "InternalType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Interval = {"_p_Interval", "Interval *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InvalidArgumentException = {"_p_InvalidArgumentException", "InvalidArgumentException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InvalidDimensionException = {"_p_InvalidDimensionException", "InvalidDimensionException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InvalidRangeException = {"_p_InvalidRangeException", "InvalidRangeException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InverseIsoProbabilisticTransformation = {"_p_InverseIsoProbabilisticTransformation", "InverseIsoProbabilisticTransformation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IsoProbabilisticTransformation = {"_p_IsoProbabilisticTransformation", "IsoProbabilisticTransformation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LabelMap = {"_p_LabelMap", "LabelMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Last = {"_p_Last", "Last *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LinearModel = {"_p_LinearModel", "LinearModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LinearNumericalMathEvaluationImplementation = {"_p_LinearNumericalMathEvaluationImplementation", "LinearNumericalMathEvaluationImplementation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LowDiscrepancySequence = {"_p_LowDiscrepancySequence", "LowDiscrepancySequence *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Map = {"_p_Map", "Map *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MapElement = {"_p_MapElement", "MapElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Marginals = {"_p_Marginals", "Marginals *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Matrix = {"_p_Matrix", "Matrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixImplementation = {"_p_MatrixImplementation", "MatrixImplementation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MersenneTwister = {"_p_MersenneTwister", "MersenneTwister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NearestPointAlgorithm = {"_p_NearestPointAlgorithm", "NearestPointAlgorithm *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NoWrapperFileFoundException = {"_p_NoWrapperFileFoundException", "NoWrapperFileFoundException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NonEllipticalDistribution = {"_p_NonEllipticalDistribution", "NonEllipticalDistribution *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Normal = {"_p_Normal", "Normal *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NotDefinedException = {"_p_NotDefinedException", "NotDefinedException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NotSymmetricDefinitePositiveException = {"_p_NotSymmetricDefinitePositiveException", "NotSymmetricDefinitePositiveException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NotYetImplementedException = {"_p_NotYetImplementedException", "NotYetImplementedException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NumericalComplexCollection = {"_p_NumericalComplexCollection", "NumericalComplexCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NumericalComplexPersistentCollection = {"_p_NumericalComplexPersistentCollection", "NumericalComplexPersistentCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NumericalMathEvaluationImplementation = {"_p_NumericalMathEvaluationImplementation", "NumericalMathEvaluationImplementation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NumericalMathFunction = {"_p_NumericalMathFunction", "NumericalMathFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NumericalMathFunctionCollection = {"_p_NumericalMathFunctionCollection", "NumericalMathFunctionCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NumericalMathFunctionPersistentCollection = {"_p_NumericalMathFunctionPersistentCollection", "NumericalMathFunctionPersistentCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NumericalMathGradientImplementation = {"_p_NumericalMathGradientImplementation", "NumericalMathGradientImplementation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NumericalMathHessianImplementation = {"_p_NumericalMathHessianImplementation", "NumericalMathHessianImplementation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NumericalPoint = {"_p_NumericalPoint", "NumericalPoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NumericalPointCollection = {"_p_NumericalPointCollection", "NumericalPointCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NumericalPointPersistentCollection = {"_p_NumericalPointPersistentCollection", "NumericalPointPersistentCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NumericalPointWithDescription = {"_p_NumericalPointWithDescription", "NumericalPointWithDescription *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NumericalPointWithDescriptionCollection = {"_p_NumericalPointWithDescriptionCollection", "NumericalPointWithDescriptionCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NumericalSample = {"_p_NumericalSample", "NumericalSample *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NumericalScalarCache = {"_p_NumericalScalarCache", "NumericalScalarCache *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NumericalScalarCollection = {"_p_NumericalScalarCollection", "NumericalScalarCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NumericalScalarPersistentCollection = {"_p_NumericalScalarPersistentCollection", "NumericalScalarPersistentCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OT__Base__Optim__NearestPointChecker__Result = {"_p_OT__Base__Optim__NearestPointChecker__Result", "OT::Base::Optim::NearestPointChecker::Result *|OpenTURNS::Base::Optim::NearestPointCheckerResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OT__Base__Stat__CorrelationAnalysisSobolIndiceParameters = {"_p_OT__Base__Stat__CorrelationAnalysisSobolIndiceParameters", "OpenTURNS::Base::Stat::CorrelationAnalysisSobolIndiceParameters *|OT::Base::Stat::CorrelationAnalysisSobolIndiceParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OT__Base__Stat__CorrelationAnalysisSobolIndiceResult = {"_p_OT__Base__Stat__CorrelationAnalysisSobolIndiceResult", "OpenTURNS::Base::Stat::CorrelationAnalysisSobolIndiceResult *|OT::Base::Stat::CorrelationAnalysisSobolIndiceResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OT__Base__Stat__RandomGeneratorState = {"_p_OT__Base__Stat__RandomGeneratorState", "OT::Base::Stat::RandomGeneratorState *|OpenTURNS::Base::Stat::RandomGeneratorState *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__Object = {"_p_OpenTURNS__Base__Common__Object", "OpenTURNS::Base::Common::Object *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedCollectionInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceImplementation_t = {"_p_OpenTURNS__Base__Common__TypedCollectionInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedCollectionInterfaceObjectT_OpenTURNS__Base__Type__DescriptionImplementation_t = {"_p_OpenTURNS__Base__Common__TypedCollectionInterfaceObjectT_OpenTURNS__Base__Type__DescriptionImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__BootstrapExperiment = {"_p_OpenTURNS__Uncertainty__Algorithm__BootstrapExperiment", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Model__ArchimedeanCopula = {"_p_OpenTURNS__Uncertainty__Model__ArchimedeanCopula", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__PolynomialKernel = {"_p_OpenTURNS__Uncertainty__Algorithm__PolynomialKernel", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Rayleigh = {"_p_OpenTURNS__Uncertainty__Distribution__Rayleigh", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__WeightedExperiment = {"_p_OpenTURNS__Uncertainty__Algorithm__WeightedExperiment", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Graph__Drawable = {"_p_OpenTURNS__Base__Graph__Drawable", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Burr = {"_p_OpenTURNS__Uncertainty__Distribution__Burr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__WrapperParameter = {"_p_OpenTURNS__Base__Func__WrapperParameter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Optim__CobylaSpecificParameters = {"_p_OpenTURNS__Base__Optim__CobylaSpecificParameters", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__RosenblattEvaluation = {"_p_OpenTURNS__Uncertainty__Algorithm__RosenblattEvaluation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Model__StandardEvent = {"_p_OpenTURNS__Uncertainty__Model__StandardEvent", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__Simulation = {"_p_OpenTURNS__Uncertainty__Algorithm__Simulation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Model__Distribution = {"_p_OpenTURNS__Uncertainty__Model__Distribution", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__RationalKernel = {"_p_OpenTURNS__Uncertainty__Algorithm__RationalKernel", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Algo__FittingAlgorithmImplementation = {"_p_OpenTURNS__Base__Algo__FittingAlgorithmImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__GumbelCopulaFactory = {"_p_OpenTURNS__Uncertainty__Distribution__GumbelCopulaFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__GumbelCopula = {"_p_OpenTURNS__Uncertainty__Distribution__GumbelCopula", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_std__string_t = {"_p_OpenTURNS__Base__Type__PersistentCollectionT_std__string_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__Indices = {"_p_OpenTURNS__Base__Type__Indices", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithm = {"_p_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithm", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithmImplementation = {"_p_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithmImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategyImplementation = {"_p_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategyImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategy = {"_p_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategy", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__Analytical = {"_p_OpenTURNS__Uncertainty__Algorithm__Analytical", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__LinearNumericalMathEvaluationImplementation = {"_p_OpenTURNS__Base__Func__LinearNumericalMathEvaluationImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__LinearNumericalMathGradientImplementation = {"_p_OpenTURNS__Base__Func__LinearNumericalMathGradientImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__WrapperDataFile = {"_p_OpenTURNS__Base__Func__WrapperDataFile", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__NumericalPointWithDescription = {"_p_OpenTURNS__Base__Type__NumericalPointWithDescription", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__PoissonFactory = {"_p_OpenTURNS__Uncertainty__Distribution__PoissonFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Model__FunctionalChaosRandomVector = {"_p_OpenTURNS__Uncertainty__Model__FunctionalChaosRandomVector", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseRosenblattEvaluation = {"_p_OpenTURNS__Uncertainty__Algorithm__InverseRosenblattEvaluation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaEvaluation = {"_p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaEvaluation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaGradient = {"_p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaGradient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaHessian = {"_p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaHessian", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionEvaluation = {"_p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionEvaluation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionGradient = {"_p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionGradient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionHessian = {"_p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionHessian", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Optim__SQP = {"_p_OpenTURNS__Base__Optim__SQP", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Logistic = {"_p_OpenTURNS__Uncertainty__Distribution__Logistic", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__ComparisonOperator = {"_p_OpenTURNS__Base__Common__ComparisonOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Model__CompositeRandomVector = {"_p_OpenTURNS__Uncertainty__Model__CompositeRandomVector", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Binomial = {"_p_OpenTURNS__Uncertainty__Distribution__Binomial", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__UniVariatePolynomial = {"_p_OpenTURNS__Base__Func__UniVariatePolynomial", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Arcsine = {"_p_OpenTURNS__Uncertainty__Distribution__Arcsine", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__GramSchmidtAlgorithm = {"_p_OpenTURNS__Uncertainty__Algorithm__GramSchmidtAlgorithm", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__SequentialStrategy = {"_p_OpenTURNS__Uncertainty__Algorithm__SequentialStrategy", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__SimulationResultImplementation = {"_p_OpenTURNS__Uncertainty__Algorithm__SimulationResultImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__SimulationResult = {"_p_OpenTURNS__Uncertainty__Algorithm__SimulationResult", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Diff__ProportionalStep = {"_p_OpenTURNS__Base__Diff__ProportionalStep", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__InterfaceObject = {"_p_OpenTURNS__Base__Common__InterfaceObject", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Diff__ConstantStep = {"_p_OpenTURNS__Base__Diff__ConstantStep", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__GammaFactory = {"_p_OpenTURNS__Uncertainty__Distribution__GammaFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Optim__AbdoRackwitzSpecificParameters = {"_p_OpenTURNS__Base__Optim__AbdoRackwitzSpecificParameters", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__ProductNumericalMathGradientImplementation = {"_p_OpenTURNS__Base__Func__ProductNumericalMathGradientImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__SORM = {"_p_OpenTURNS__Uncertainty__Algorithm__SORM", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Trapezoidal = {"_p_OpenTURNS__Uncertainty__Distribution__Trapezoidal", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__TrapezoidalFactory = {"_p_OpenTURNS__Uncertainty__Distribution__TrapezoidalFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__MonteCarlo = {"_p_OpenTURNS__Uncertainty__Algorithm__MonteCarlo", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__ClaytonCopula = {"_p_OpenTURNS__Uncertainty__Distribution__ClaytonCopula", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__ClaytonCopulaFactory = {"_p_OpenTURNS__Uncertainty__Distribution__ClaytonCopulaFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementationResult = {"_p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementationResult", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementation = {"_p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Algo__ApproximationAlgorithmImplementation = {"_p_OpenTURNS__Base__Algo__ApproximationAlgorithmImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Solver__Secant = {"_p_OpenTURNS__Base__Solver__Secant", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__Greater = {"_p_OpenTURNS__Base__Common__Greater", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Stat__HistoryStrategyImplementation = {"_p_OpenTURNS__Base__Stat__HistoryStrategyImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Stat__NumericalSampleImplementation = {"_p_OpenTURNS__Base__Stat__NumericalSampleImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__ComposedNumericalMathHessianImplementation = {"_p_OpenTURNS__Base__Func__ComposedNumericalMathHessianImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__ComputedNumericalMathHessianImplementation = {"_p_OpenTURNS__Base__Func__ComputedNumericalMathHessianImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__ConstantNumericalMathHessianImplementation = {"_p_OpenTURNS__Base__Func__ConstantNumericalMathHessianImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Stat__Last = {"_p_OpenTURNS__Base__Stat__Last", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Stat__CorrelationMatrix = {"_p_OpenTURNS__Base__Stat__CorrelationMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__KernelSmoothing = {"_p_OpenTURNS__Uncertainty__Distribution__KernelSmoothing", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_unsigned_long_t = {"_p_OpenTURNS__Base__Type__PersistentCollectionT_unsigned_long_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaHessian = {"_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaHessian", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaGradient = {"_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaGradient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaEvaluation = {"_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaEvaluation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaEvaluation = {"_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaEvaluation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaGradient = {"_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaGradient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaHessian = {"_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaHessian", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionEvaluation = {"_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionEvaluation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionGradient = {"_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionGradient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionHessian = {"_p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionHessian", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__SquareMatrix = {"_p_OpenTURNS__Base__Type__SquareMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__SymmetricMatrix = {"_p_OpenTURNS__Base__Type__SymmetricMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__IdentityMatrix = {"_p_OpenTURNS__Base__Type__IdentityMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__Matrix = {"_p_OpenTURNS__Base__Type__Matrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__FORM = {"_p_OpenTURNS__Uncertainty__Algorithm__FORM", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__ArcsineFactory = {"_p_OpenTURNS__Uncertainty__Distribution__ArcsineFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__SVMKernel = {"_p_OpenTURNS__Uncertainty__Algorithm__SVMKernel", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__NumericalMathGradientImplementation = {"_p_OpenTURNS__Base__Func__NumericalMathGradientImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SamplingStrategyImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SamplingStrategyImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__RootStrategyImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__RootStrategyImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SimulationResultImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SimulationResultImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SVMKernelImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SVMKernelImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategyImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategyImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Solver__SolverImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Solver__SolverImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Diff__FiniteDifferenceStepImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Diff__FiniteDifferenceStepImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceFactoryImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceFactoryImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__UniVariatePolynomialImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__UniVariatePolynomialImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__NumericalMathFunctionImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__NumericalMathFunctionImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__DescriptionImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__DescriptionImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Common__ComparisonOperatorImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Common__ComparisonOperatorImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__MatrixImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__MatrixImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__TensorImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__TensorImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__NumericalSampleImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__NumericalSampleImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__HistoryStrategyImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__HistoryStrategyImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__LowDiscrepancySequenceImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__LowDiscrepancySequenceImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Graph__DrawableImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Graph__DrawableImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Graph__GraphImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Graph__GraphImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Algo__FittingAlgorithmImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Algo__FittingAlgorithmImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Algo__ApproximationAlgorithmImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Algo__ApproximationAlgorithmImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__DistributionImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__DistributionImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__RandomVectorImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__RandomVectorImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__ExperimentImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__ExperimentImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFactory_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFactory_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithmImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithmImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthogonalFunctionFactory_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthogonalFunctionFactory_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategyImplementation_t = {"_p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategyImplementation_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__BasisSequenceImplementation = {"_p_OpenTURNS__Base__Func__BasisSequenceImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__Experiment = {"_p_OpenTURNS__Uncertainty__Algorithm__Experiment", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__RandomMixture = {"_p_OpenTURNS__Uncertainty__Distribution__RandomMixture", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__HermiteFactory = {"_p_OpenTURNS__Uncertainty__Algorithm__HermiteFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Graph__Cloud = {"_p_OpenTURNS__Base__Graph__Cloud", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Solver__SolverImplementation = {"_p_OpenTURNS__Base__Solver__SolverImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__TensorImplementation = {"_p_OpenTURNS__Base__Type__TensorImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__MatrixImplementation = {"_p_OpenTURNS__Base__Type__MatrixImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Graph__DrawableImplementation = {"_p_OpenTURNS__Base__Graph__DrawableImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Graph__GraphImplementation = {"_p_OpenTURNS__Base__Graph__GraphImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaHessian = {"_p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaHessian", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaGradient = {"_p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaGradient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaEvaluation = {"_p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaEvaluation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__LogisticFactory = {"_p_OpenTURNS__Uncertainty__Distribution__LogisticFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__NormalFactory = {"_p_OpenTURNS__Uncertainty__Distribution__NormalFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelImplementation = {"_p_OpenTURNS__Uncertainty__Algorithm__SVMKernelImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategyImplementation = {"_p_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategyImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Epanechnikov = {"_p_OpenTURNS__Uncertainty__Distribution__Epanechnikov", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Optim__NearestPointChecker = {"_p_OpenTURNS__Base__Optim__NearestPointChecker", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategy = {"_p_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategy", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__MetaModelResult = {"_p_OpenTURNS__Uncertainty__Algorithm__MetaModelResult", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__KernelMixture = {"_p_OpenTURNS__Uncertainty__Distribution__KernelMixture", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Solver__Solver = {"_p_OpenTURNS__Base__Solver__Solver", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Model__EllipticalDistribution = {"_p_OpenTURNS__Uncertainty__Model__EllipticalDistribution", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFactory = {"_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomial = {"_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomial", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Model__ContinuousDistribution = {"_p_OpenTURNS__Uncertainty__Model__ContinuousDistribution", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFamily = {"_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFamily", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__ConstantNumericalMathGradientImplementation = {"_p_OpenTURNS__Base__Func__ConstantNumericalMathGradientImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__ComputedNumericalMathGradientImplementation = {"_p_OpenTURNS__Base__Func__ComputedNumericalMathGradientImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__ComposedNumericalMathGradientImplementation = {"_p_OpenTURNS__Base__Func__ComposedNumericalMathGradientImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Model__SklarCopula = {"_p_OpenTURNS__Uncertainty__Model__SklarCopula", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Graph__Staircase = {"_p_OpenTURNS__Base__Graph__Staircase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Model__Copula = {"_p_OpenTURNS__Uncertainty__Model__Copula", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__LegendreFactory = {"_p_OpenTURNS__Uncertainty__Algorithm__LegendreFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__LaguerreFactory = {"_p_OpenTURNS__Uncertainty__Algorithm__LaguerreFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__WeibullFactory = {"_p_OpenTURNS__Uncertainty__Distribution__WeibullFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__NormalRBF = {"_p_OpenTURNS__Uncertainty__Algorithm__NormalRBF", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionEvaluation = {"_p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionEvaluation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionGradient = {"_p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionGradient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionHessian = {"_p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionHessian", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__ChiSquareFactory = {"_p_OpenTURNS__Uncertainty__Distribution__ChiSquareFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__ChiSquare = {"_p_OpenTURNS__Uncertainty__Distribution__ChiSquare", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__LinearNumericalMathFunction = {"_p_OpenTURNS__Base__Func__LinearNumericalMathFunction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__WrapperFrameworkData = {"_p_OpenTURNS__Base__Func__WrapperFrameworkData", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__RiskyAndFast = {"_p_OpenTURNS__Uncertainty__Algorithm__RiskyAndFast", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Diff__FiniteDifferenceGradient = {"_p_OpenTURNS__Base__Diff__FiniteDifferenceGradient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__RootStrategyImplementation = {"_p_OpenTURNS__Uncertainty__Algorithm__RootStrategyImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Stat__HistoryStrategy = {"_p_OpenTURNS__Base__Stat__HistoryStrategy", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__RootStrategy = {"_p_OpenTURNS__Uncertainty__Algorithm__RootStrategy", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__MetaModelAlgorithm = {"_p_OpenTURNS__Uncertainty__Algorithm__MetaModelAlgorithm", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Rice = {"_p_OpenTURNS__Uncertainty__Distribution__Rice", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__StratifiedExperiment = {"_p_OpenTURNS__Uncertainty__Algorithm__StratifiedExperiment", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceHessian = {"_p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceHessian", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceGradient = {"_p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceGradient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Algo__LeastSquaresMetaModelSelection = {"_p_OpenTURNS__Base__Algo__LeastSquaresMetaModelSelection", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Stat__Null = {"_p_OpenTURNS__Base__Stat__Null", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__WrapperFunctionDescription = {"_p_OpenTURNS__Base__Func__WrapperFunctionDescription", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__NumericalMathHessianImplementation = {"_p_OpenTURNS__Base__Func__NumericalMathHessianImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalControlledImportanceSampling = {"_p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalControlledImportanceSampling", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalImportanceSampling = {"_p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalImportanceSampling", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalSimulation = {"_p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalSimulation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__NormalCopula = {"_p_OpenTURNS__Uncertainty__Distribution__NormalCopula", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__NormalCopulaFactory = {"_p_OpenTURNS__Uncertainty__Distribution__NormalCopulaFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Stat__Full = {"_p_OpenTURNS__Base__Stat__Full", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Optim__AbdoRackwitz = {"_p_OpenTURNS__Base__Optim__AbdoRackwitz", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Stat__LowDiscrepancySequenceImplementation = {"_p_OpenTURNS__Base__Stat__LowDiscrepancySequenceImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__StudentFactory = {"_p_OpenTURNS__Uncertainty__Distribution__StudentFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalBasis = {"_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalBasis", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__NoNumericalMathHessianImplementation = {"_p_OpenTURNS__Base__Func__NoNumericalMathHessianImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__HistogramPair = {"_p_OpenTURNS__Uncertainty__Distribution__HistogramPair", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__HistogramFactory = {"_p_OpenTURNS__Uncertainty__Distribution__HistogramFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Histogram = {"_p_OpenTURNS__Uncertainty__Distribution__Histogram", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__UserDefinedPair = {"_p_OpenTURNS__Uncertainty__Distribution__UserDefinedPair", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__UserDefinedFactory = {"_p_OpenTURNS__Uncertainty__Distribution__UserDefinedFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__BernoulliFactory = {"_p_OpenTURNS__Uncertainty__Distribution__BernoulliFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Bernoulli = {"_p_OpenTURNS__Uncertainty__Distribution__Bernoulli", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__BinomialFactory = {"_p_OpenTURNS__Uncertainty__Distribution__BinomialFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Mixture = {"_p_OpenTURNS__Uncertainty__Distribution__Mixture", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__ExponentialFactory = {"_p_OpenTURNS__Uncertainty__Distribution__ExponentialFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Exponential = {"_p_OpenTURNS__Uncertainty__Distribution__Exponential", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Optim__TNCSpecificParameters = {"_p_OpenTURNS__Base__Optim__TNCSpecificParameters", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Optim__SQPSpecificParameters = {"_p_OpenTURNS__Base__Optim__SQPSpecificParameters", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__MediumSafe = {"_p_OpenTURNS__Uncertainty__Algorithm__MediumSafe", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Model__CopulaImplementation = {"_p_OpenTURNS__Uncertainty__Model__CopulaImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__LHSExperiment = {"_p_OpenTURNS__Uncertainty__Algorithm__LHSExperiment", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__InverseNormal = {"_p_OpenTURNS__Uncertainty__Distribution__InverseNormal", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__DirichletFactory = {"_p_OpenTURNS__Uncertainty__Distribution__DirichletFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Dirichlet = {"_p_OpenTURNS__Uncertainty__Distribution__Dirichlet", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Optim__NearestPointAlgorithm = {"_p_OpenTURNS__Base__Optim__NearestPointAlgorithm", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Algo__FittingAlgorithm = {"_p_OpenTURNS__Base__Algo__FittingAlgorithm", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Algo__ApproximationAlgorithm = {"_p_OpenTURNS__Base__Algo__ApproximationAlgorithm", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Solver__Bisection = {"_p_OpenTURNS__Base__Solver__Bisection", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Model__Event = {"_p_OpenTURNS__Uncertainty__Model__Event", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Model__ConstantRandomVector = {"_p_OpenTURNS__Uncertainty__Model__ConstantRandomVector", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__RandomDirection = {"_p_OpenTURNS__Uncertainty__Algorithm__RandomDirection", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Normal = {"_p_OpenTURNS__Uncertainty__Distribution__Normal", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__LogNormal = {"_p_OpenTURNS__Uncertainty__Distribution__LogNormal", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__LogNormalFactory = {"_p_OpenTURNS__Uncertainty__Distribution__LogNormalFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__DescriptionImplementation = {"_p_OpenTURNS__Base__Type__DescriptionImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__ComposedNumericalMathEvaluationImplementation = {"_p_OpenTURNS__Base__Func__ComposedNumericalMathEvaluationImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__ComputedNumericalMathEvaluationImplementation = {"_p_OpenTURNS__Base__Func__ComputedNumericalMathEvaluationImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__LinearCombinationGradientImplementation = {"_p_OpenTURNS__Base__Func__LinearCombinationGradientImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosAlgorithm = {"_p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosAlgorithm", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosResult = {"_p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosResult", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Regression__LinearTaylor = {"_p_OpenTURNS__Base__Regression__LinearTaylor", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__ComposedNumericalMathFunction = {"_p_OpenTURNS__Base__Func__ComposedNumericalMathFunction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Regression__QuadraticTaylor = {"_p_OpenTURNS__Base__Regression__QuadraticTaylor", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__HistogramPair_t = {"_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__HistogramPair_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__Basis_t = {"_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__Basis_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPointWithDescription_t = {"_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPointWithDescription_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__UniVariatePolynomial_t = {"_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__UniVariatePolynomial_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__NumericalMathFunction_t = {"_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__NumericalMathFunction_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__UserDefinedPair_t = {"_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__UserDefinedPair_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFamily_t = {"_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFamily_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__EnumerateFunction = {"_p_OpenTURNS__Uncertainty__Algorithm__EnumerateFunction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__Box = {"_p_OpenTURNS__Uncertainty__Algorithm__Box", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__Factorial = {"_p_OpenTURNS__Uncertainty__Algorithm__Factorial", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__QuadraticCumul = {"_p_OpenTURNS__Uncertainty__Algorithm__QuadraticCumul", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__LowDiscrepancyExperiment = {"_p_OpenTURNS__Uncertainty__Algorithm__LowDiscrepancyExperiment", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__LeastSquaresStrategy = {"_p_OpenTURNS__Uncertainty__Algorithm__LeastSquaresStrategy", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Regression__LinearLeastSquares = {"_p_OpenTURNS__Base__Regression__LinearLeastSquares", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationHessian = {"_p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationHessian", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationGradient = {"_p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationGradient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationEvaluation = {"_p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationEvaluation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__Less = {"_p_OpenTURNS__Base__Common__Less", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__UniVariatePolynomialImplementation = {"_p_OpenTURNS__Base__Func__UniVariatePolynomialImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Diff__FiniteDifferenceHessian = {"_p_OpenTURNS__Base__Diff__FiniteDifferenceHessian", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__LinearCombinationHessianImplementation = {"_p_OpenTURNS__Base__Func__LinearCombinationHessianImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__ProductNumericalMathEvaluationImplementation = {"_p_OpenTURNS__Base__Func__ProductNumericalMathEvaluationImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__NoNumericalMathEvaluationImplementation = {"_p_OpenTURNS__Base__Func__NoNumericalMathEvaluationImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__NumericalMathEvaluationImplementation = {"_p_OpenTURNS__Base__Func__NumericalMathEvaluationImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__UniformFactory = {"_p_OpenTURNS__Uncertainty__Distribution__UniformFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Regression__RegressionAlgorithm = {"_p_OpenTURNS__Base__Regression__RegressionAlgorithm", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__LHS = {"_p_OpenTURNS__Uncertainty__Algorithm__LHS", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__AnalyticalResult = {"_p_OpenTURNS__Uncertainty__Algorithm__AnalyticalResult", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Graph__Curve = {"_p_OpenTURNS__Base__Graph__Curve", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__TriangularFactory = {"_p_OpenTURNS__Uncertainty__Distribution__TriangularFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Triangular = {"_p_OpenTURNS__Uncertainty__Distribution__Triangular", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__CleaningStrategy = {"_p_OpenTURNS__Uncertainty__Algorithm__CleaningStrategy", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__SamplingStrategyImplementation = {"_p_OpenTURNS__Uncertainty__Algorithm__SamplingStrategyImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__IntegrationStrategy = {"_p_OpenTURNS__Uncertainty__Algorithm__IntegrationStrategy", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__SamplingStrategy = {"_p_OpenTURNS__Uncertainty__Algorithm__SamplingStrategy", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Graph__Contour = {"_p_OpenTURNS__Base__Graph__Contour", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__NumericalMathFunction = {"_p_OpenTURNS__Base__Func__NumericalMathFunction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__BetaFactory = {"_p_OpenTURNS__Uncertainty__Distribution__BetaFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalDirection = {"_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalDirection", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Diff__FiniteDifferenceStep = {"_p_OpenTURNS__Base__Diff__FiniteDifferenceStep", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Algo__Lasso = {"_p_OpenTURNS__Base__Algo__Lasso", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__IndependentCopula = {"_p_OpenTURNS__Uncertainty__Distribution__IndependentCopula", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Beta = {"_p_OpenTURNS__Uncertainty__Distribution__Beta", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__Basis = {"_p_OpenTURNS__Base__Func__Basis", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__JacobiFactory = {"_p_OpenTURNS__Uncertainty__Algorithm__JacobiFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__ChiFactory = {"_p_OpenTURNS__Uncertainty__Distribution__ChiFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__RayleighFactory = {"_p_OpenTURNS__Uncertainty__Distribution__RayleighFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__Study = {"_p_OpenTURNS__Base__Common__Study", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Laplace = {"_p_OpenTURNS__Uncertainty__Distribution__Laplace", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Model__RandomVectorImplementation = {"_p_OpenTURNS__Uncertainty__Model__RandomVectorImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__ComparisonOperatorImplementation = {"_p_OpenTURNS__Base__Common__ComparisonOperatorImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__FrankCopulaFactory = {"_p_OpenTURNS__Uncertainty__Distribution__FrankCopulaFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__FrankCopula = {"_p_OpenTURNS__Uncertainty__Distribution__FrankCopula", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Algo__CorrectedLeaveOneOut = {"_p_OpenTURNS__Base__Algo__CorrectedLeaveOneOut", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__LaplaceFactory = {"_p_OpenTURNS__Uncertainty__Distribution__LaplaceFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Stat__Compact = {"_p_OpenTURNS__Base__Stat__Compact", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__HyperbolicAnisotropicEnumerateFunction = {"_p_OpenTURNS__Uncertainty__Algorithm__HyperbolicAnisotropicEnumerateFunction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Graph__Pie = {"_p_OpenTURNS__Base__Graph__Pie", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__StorageManager = {"_p_OpenTURNS__Base__Common__StorageManager", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__XMLStorageManager = {"_p_OpenTURNS__Base__Common__XMLStorageManager", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__StandardDistributionPolynomialFactory = {"_p_OpenTURNS__Uncertainty__Algorithm__StandardDistributionPolynomialFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__Equal = {"_p_OpenTURNS__Base__Common__Equal", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__ImportanceSamplingExperiment = {"_p_OpenTURNS__Uncertainty__Algorithm__ImportanceSamplingExperiment", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__ProductNumericalMathFunction = {"_p_OpenTURNS__Base__Func__ProductNumericalMathFunction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__ComposedCopula = {"_p_OpenTURNS__Uncertainty__Distribution__ComposedCopula", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__FixedStrategy = {"_p_OpenTURNS__Uncertainty__Algorithm__FixedStrategy", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__ImportanceSampling = {"_p_OpenTURNS__Uncertainty__Algorithm__ImportanceSampling", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__ComposedDistribution = {"_p_OpenTURNS__Uncertainty__Distribution__ComposedDistribution", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__TruncatedNormalFactory = {"_p_OpenTURNS__Uncertainty__Distribution__TruncatedNormalFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__TruncatedNormal = {"_p_OpenTURNS__Uncertainty__Distribution__TruncatedNormal", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__TruncatedDistribution = {"_p_OpenTURNS__Uncertainty__Distribution__TruncatedDistribution", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Model__DistributionFactory = {"_p_OpenTURNS__Uncertainty__Model__DistributionFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementation = {"_p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementationResult = {"_p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementationResult", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Optim__Cobyla = {"_p_OpenTURNS__Base__Optim__Cobyla", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithm = {"_p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithm", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__StrongMaximumTest = {"_p_OpenTURNS__Uncertainty__Algorithm__StrongMaximumTest", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__BasisSequenceFactory = {"_p_OpenTURNS__Base__Func__BasisSequenceFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Diff__NonCenteredFiniteDifferenceGradient = {"_p_OpenTURNS__Base__Diff__NonCenteredFiniteDifferenceGradient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__FixedExperiment = {"_p_OpenTURNS__Uncertainty__Algorithm__FixedExperiment", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__Composite = {"_p_OpenTURNS__Uncertainty__Algorithm__Composite", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Stat__ConfidenceInterval = {"_p_OpenTURNS__Base__Stat__ConfidenceInterval", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__ProductNumericalMathHessianImplementation = {"_p_OpenTURNS__Base__Func__ProductNumericalMathHessianImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__GeometricFactory = {"_p_OpenTURNS__Uncertainty__Distribution__GeometricFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Geometric = {"_p_OpenTURNS__Uncertainty__Distribution__Geometric", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__WrapperDataVariable = {"_p_OpenTURNS__Base__Func__WrapperDataVariable", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__NonCentralChiSquare = {"_p_OpenTURNS__Uncertainty__Distribution__NonCentralChiSquare", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__NonCentralStudent = {"_p_OpenTURNS__Uncertainty__Distribution__NonCentralStudent", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__NumericalMathFunctionImplementation = {"_p_OpenTURNS__Base__Func__NumericalMathFunctionImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Weibull = {"_p_OpenTURNS__Uncertainty__Distribution__Weibull", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Solver__Brent = {"_p_OpenTURNS__Base__Solver__Brent", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Model__RandomVector = {"_p_OpenTURNS__Uncertainty__Model__RandomVector", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__IndicatorNumericalMathEvaluationImplementation = {"_p_OpenTURNS__Base__Func__IndicatorNumericalMathEvaluationImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__QuadraticNumericalMathEvaluationImplementation = {"_p_OpenTURNS__Base__Func__QuadraticNumericalMathEvaluationImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarloResult = {"_p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarloResult", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarlo = {"_p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarlo", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Graph__BarPlot = {"_p_OpenTURNS__Base__Graph__BarPlot", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Diff__FiniteDifferenceStepImplementation = {"_p_OpenTURNS__Base__Diff__FiniteDifferenceStepImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__LinearEnumerateFunction = {"_p_OpenTURNS__Uncertainty__Algorithm__LinearEnumerateFunction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalProductPolynomialFactory = {"_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalProductPolynomialFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Chi = {"_p_OpenTURNS__Uncertainty__Distribution__Chi", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__DirectionalSampling = {"_p_OpenTURNS__Uncertainty__Algorithm__DirectionalSampling", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__Tensor = {"_p_OpenTURNS__Base__Type__Tensor", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__SymmetricTensor = {"_p_OpenTURNS__Base__Type__SymmetricTensor", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__Description = {"_p_OpenTURNS__Base__Type__Description", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__WrapperFile = {"_p_OpenTURNS__Base__Func__WrapperFile", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Model__NonEllipticalDistribution = {"_p_OpenTURNS__Uncertainty__Model__NonEllipticalDistribution", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Multinomial = {"_p_OpenTURNS__Uncertainty__Distribution__Multinomial", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__MultinomialFactory = {"_p_OpenTURNS__Uncertainty__Distribution__MultinomialFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__LARLasso = {"_p_OpenTURNS__Base__Func__LARLasso", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__LAR = {"_p_OpenTURNS__Base__Func__LAR", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__WrapperData = {"_p_OpenTURNS__Base__Func__WrapperData", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalFunctionFactory = {"_p_OpenTURNS__Uncertainty__Algorithm__OrthogonalFunctionFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__NoNumericalMathGradientImplementation = {"_p_OpenTURNS__Base__Func__NoNumericalMathGradientImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Optim__TNC = {"_p_OpenTURNS__Base__Optim__TNC", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__ProductPolynomialEvaluationImplementation = {"_p_OpenTURNS__Base__Func__ProductPolynomialEvaluationImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__LinearCombinationEvaluationImplementation = {"_p_OpenTURNS__Base__Func__LinearCombinationEvaluationImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__ExponentialRBF = {"_p_OpenTURNS__Uncertainty__Algorithm__ExponentialRBF", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Poisson = {"_p_OpenTURNS__Uncertainty__Distribution__Poisson", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__ExperimentImplementation = {"_p_OpenTURNS__Uncertainty__Algorithm__ExperimentImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Regression__QuadraticLeastSquares = {"_p_OpenTURNS__Base__Regression__QuadraticLeastSquares", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Stat__TestResult = {"_p_OpenTURNS__Base__Stat__TestResult", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__GumbelFactory = {"_p_OpenTURNS__Uncertainty__Distribution__GumbelFactory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__SORMResult = {"_p_OpenTURNS__Uncertainty__Algorithm__SORMResult", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__FORMResult = {"_p_OpenTURNS__Uncertainty__Algorithm__FORMResult", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Student = {"_p_OpenTURNS__Uncertainty__Distribution__Student", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__LARFSZero = {"_p_OpenTURNS__Base__Func__LARFSZero", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Model__ConditionalRandomVector = {"_p_OpenTURNS__Uncertainty__Model__ConditionalRandomVector", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Optim__PenalizedLeastSquaresAlgorithm = {"_p_OpenTURNS__Base__Optim__PenalizedLeastSquaresAlgorithm", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__GreaterOrEqual = {"_p_OpenTURNS__Base__Common__GreaterOrEqual", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__LessOrEqual = {"_p_OpenTURNS__Base__Common__LessOrEqual", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__ChebychevAlgorithm = {"_p_OpenTURNS__Uncertainty__Algorithm__ChebychevAlgorithm", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Stat__SobolSequence = {"_p_OpenTURNS__Base__Stat__SobolSequence", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Stat__FaureSequence = {"_p_OpenTURNS__Base__Stat__FaureSequence", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Stat__HaltonSequence = {"_p_OpenTURNS__Base__Stat__HaltonSequence", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Stat__InverseHaltonSequence = {"_p_OpenTURNS__Base__Stat__InverseHaltonSequence", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Stat__LowDiscrepancySequence = {"_p_OpenTURNS__Base__Stat__LowDiscrepancySequence", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__BasisSequence = {"_p_OpenTURNS__Base__Func__BasisSequence", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__SafeAndSlow = {"_p_OpenTURNS__Uncertainty__Algorithm__SafeAndSlow", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Gumbel = {"_p_OpenTURNS__Uncertainty__Distribution__Gumbel", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Uniform = {"_p_OpenTURNS__Uncertainty__Distribution__Uniform", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__Gamma = {"_p_OpenTURNS__Uncertainty__Distribution__Gamma", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__ZipfMandelbrot = {"_p_OpenTURNS__Uncertainty__Distribution__ZipfMandelbrot", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__Axial = {"_p_OpenTURNS__Uncertainty__Algorithm__Axial", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Model__EventRandomVectorImplementation = {"_p_OpenTURNS__Uncertainty__Model__EventRandomVectorImplementation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Model__UsualRandomVector = {"_p_OpenTURNS__Uncertainty__Model__UsualRandomVector", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Algorithm__MonteCarloExperiment = {"_p_OpenTURNS__Uncertainty__Algorithm__MonteCarloExperiment", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Stat__LinearModel = {"_p_OpenTURNS__Base__Stat__LinearModel", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Algo__LeavePOut = {"_p_OpenTURNS__Base__Algo__LeavePOut", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Common__PersistentObject = {"_p_OpenTURNS__Base__Common__PersistentObject", "OpenTURNS::Base::Common::PersistentObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Func__BasisSequenceFactoryImplementation = {"_p_OpenTURNS__Base__Func__BasisSequenceFactoryImplementation", "OpenTURNS::Base::Func::BasisSequenceFactoryImplementation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Graph__Graph = {"_p_OpenTURNS__Base__Graph__Graph", "OpenTURNS::Base::Graph::Graph *|OpenTURNS::Uncertainty::Model::DistributionImplementation::Graph *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Stat__CovarianceMatrix = {"_p_OpenTURNS__Base__Stat__CovarianceMatrix", "OpenTURNS::Base::Stat::CovarianceMatrix *|OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::CovarianceMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Stat__NumericalSample = {"_p_OpenTURNS__Base__Stat__NumericalSample", "IntegralCompoundPoisson::IntegralUserDefined::NumericalSample *|OpenTURNS::Base::Stat::NumericalSample *|OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalSample *|OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalSample *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__CollectionT_unsigned_long_t = {"_p_OpenTURNS__Base__Type__CollectionT_unsigned_long_t", "OpenTURNS::Base::Type::Collection< unsigned long > *|IntegralCompoundPoisson::UnsignedLongCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__Interval = {"_p_OpenTURNS__Base__Type__Interval", "IntegralCompoundPoisson::IntegralUserDefined::Interval *|OpenTURNS::Base::Type::Interval *|OpenTURNS::Uncertainty::Model::DistributionImplementation::Interval *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__NumericalPoint = {"_p_OpenTURNS__Base__Type__NumericalPoint", "IntegralCompoundPoisson::IntegralUserDefined::NumericalPoint *|OpenTURNS::Base::Type::NumericalPoint *|OpenTURNS::Uncertainty::Model::DistributionImplementation::NumericalPoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPoint_t = {"_p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPoint_t", "OpenTURNS::Base::Type::PersistentCollection< OpenTURNS::Base::Type::NumericalPoint > *|OpenTURNS::Uncertainty::Model::DistributionImplementationFactory::NumericalPointCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_double_t = {"_p_OpenTURNS__Base__Type__PersistentCollectionT_double_t", "OpenTURNS::Base::Type::PersistentCollection< double > *|OpenTURNS::Base::Func::CacheKeyType *|OpenTURNS::Base::Func::CacheValueType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenTURNS__PointInSourceFile = {"_p_OpenTURNS__PointInSourceFile", "OpenTURNS::PointInSourceFile *|PointInSourceFile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Distribution__UserDefined = {"_p_OpenTURNS__Uncertainty__Distribution__UserDefined", "OpenTURNS::Uncertainty::Distribution::UserDefined *|IntegralCompoundPoisson::UserDefined *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Model__DiscreteDistribution = {"_p_OpenTURNS__Uncertainty__Model__DiscreteDistribution", "OpenTURNS::Uncertainty::Model::DiscreteDistribution *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Model__DistributionImplementation = {"_p_OpenTURNS__Uncertainty__Model__DistributionImplementation", "OpenTURNS::Uncertainty::Model::DistributionImplementation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory = {"_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory", "OpenTURNS::Uncertainty::Model::DistributionImplementationFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpenTURNS__Uncertainty__Model__UsualDistribution = {"_p_OpenTURNS__Uncertainty__Model__UsualDistribution", "OpenTURNS::Uncertainty::Model::UsualDistribution *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OptimizationProblem = {"_p_OptimizationProblem", "OptimizationProblem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OutOfBoundException = {"_p_OutOfBoundException", "OutOfBoundException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PersistentObject = {"_p_PersistentObject", "PersistentObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Poisson = {"_p_Poisson", "Poisson *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PolynomialCollection = {"_p_PolynomialCollection", "PolynomialCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PolynomialFamilyCollection = {"_p_PolynomialFamilyCollection", "PolynomialFamilyCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PolynomialFamilyPersistentCollection = {"_p_PolynomialFamilyPersistentCollection", "PolynomialFamilyPersistentCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PolynomialPersistentCollection = {"_p_PolynomialPersistentCollection", "PolynomialPersistentCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RandomVector = {"_p_RandomVector", "RandomVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Result = {"_p_Result", "Result *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SQPSpecificParameters = {"_p_SQPSpecificParameters", "SQPSpecificParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SVMEvaluation = {"_p_SVMEvaluation", "SVMEvaluation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SVMKernel = {"_p_SVMKernel", "SVMKernel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SVMKernelRegressionEvaluation = {"_p_SVMKernelRegressionEvaluation", "SVMKernelRegressionEvaluation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Sensitivity = {"_p_Sensitivity", "Sensitivity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Severity = {"_p_Severity", "Severity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimplePoint = {"_p_SimplePoint", "SimplePoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SobolIndiceParameters = {"_p_SobolIndiceParameters", "SobolIndiceParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SobolIndiceResult = {"_p_SobolIndiceResult", "SobolIndiceResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SobolSequence = {"_p_SobolSequence", "SobolSequence *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Solver = {"_p_Solver", "Solver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpecFunc = {"_p_SpecFunc", "SpecFunc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SquareMatrix = {"_p_SquareMatrix", "SquareMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StandardEvent = {"_p_StandardEvent", "StandardEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_State = {"_p_State", "State *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StorageManager = {"_p_StorageManager", "StorageManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StorageManagerImplementation = {"_p_StorageManagerImplementation", "StorageManagerImplementation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SymmetricMatrix = {"_p_SymmetricMatrix", "SymmetricMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SymmetricTensor = {"_p_SymmetricTensor", "SymmetricTensor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TNCSpecificParameters = {"_p_TNCSpecificParameters", "TNCSpecificParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Tensor = {"_p_Tensor", "Tensor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TestResult = {"_p_TestResult", "TestResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TestResultCollection = {"_p_TestResultCollection", "TestResultCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UniVariatePolynomial = {"_p_UniVariatePolynomial", "UniVariatePolynomial *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UnsignedLongCollection = {"_p_UnsignedLongCollection", "UnsignedLongCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UnsignedLongPersistentCollection = {"_p_UnsignedLongPersistentCollection", "UnsignedLongPersistentCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UserDefinedPairCollection = {"_p_UserDefinedPairCollection", "UserDefinedPairCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UserDefinedPairPersistentCollection = {"_p_UserDefinedPairPersistentCollection", "UserDefinedPairPersistentCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Value = {"_p_Value", "Value *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ValueType = {"_p_ValueType", "ValueType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VariableListType = {"_p_VariableListType", "VariableListType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WeightedExperimentImplementation = {"_p_WeightedExperimentImplementation", "WeightedExperimentImplementation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WrapperFileParsingException = {"_p_WrapperFileParsingException", "WrapperFileParsingException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WrapperInternalException = {"_p_WrapperInternalException", "WrapperInternalException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "Bool *|OpenTURNS::Bool *|IntegralCompoundPoisson::Bool *|bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_internalIterator = {"_p_const_internalIterator", "const_internalIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_iterator = {"_p_const_iterator", "const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reverse_iterator = {"_p_const_reverse_iterator", "const_reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *|OpenTURNS::NumericalScalar *|NumericalScalar *|IntegralCompoundPoisson::NumericalScalar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "OpenTURNS::IndexType *|OpenTURNS::SizeType *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pointer_type = {"_p_pointer_type", "pointer_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_reverse_iterator = {"_p_reverse_iterator", "reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "OpenTURNS::NumericalComplex *|NumericalComplex *|std::complex< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "OpenTURNS::FileName *|FileName *|std::string *|OpenTURNS::String *|String *|IntegralCompoundPoisson::String *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "Id *|OpenTURNS::UnsignedLong *|IntegralCompoundPoisson::UnsignedLong *|unsigned long *|OpenTURNS::Id *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AbdoRackwitzSpecificParameters,
  &_swigt__p_Antecedent,
  &_swigt__p_ArchimedeanCopula,
  &_swigt__p_Basis,
  &_swigt__p_BoolCollection,
  &_swigt__p_BoolPersistentCollection,
  &_swigt__p_BoundingBox,
  &_swigt__p_CacheImplementation,
  &_swigt__p_CacheType,
  &_swigt__p_CobylaSpecificParameters,
  &_swigt__p_Coefficients,
  &_swigt__p_CoefficientsCollection,
  &_swigt__p_CoefficientsPersistentCollection,
  &_swigt__p_CommunicatorType,
  &_swigt__p_Compact,
  &_swigt__p_ComparisonOperator,
  &_swigt__p_ConfidenceIntervalCollection,
  &_swigt__p_ConfidenceIntervalPersistentCollection,
  &_swigt__p_ConstantNumericalMathGradientImplementation,
  &_swigt__p_ConstantNumericalMathHessianImplementation,
  &_swigt__p_Copula,
  &_swigt__p_CopulaCollection,
  &_swigt__p_CopulaImplementation,
  &_swigt__p_CopulaPersistentCollection,
  &_swigt__p_CorrelationMatrix,
  &_swigt__p_CovarianceMatrix,
  &_swigt__p_Description,
  &_swigt__p_DirectoryList,
  &_swigt__p_DiscreteDistribution,
  &_swigt__p_Distribution,
  &_swigt__p_DistributionCollection,
  &_swigt__p_DistributionFactory,
  &_swigt__p_DistributionFactoryCollection,
  &_swigt__p_DistributionImplementation,
  &_swigt__p_DistributionImplementationFactory,
  &_swigt__p_DistributionPersistentCollection,
  &_swigt__p_DrawableCollection,
  &_swigt__p_DrawablePersistentCollection,
  &_swigt__p_ElementType,
  &_swigt__p_EllipticalDistribution,
  &_swigt__p_EvaluationImplementation,
  &_swigt__p_Event,
  &_swigt__p_Factory,
  &_swigt__p_FileListType,
  &_swigt__p_FileNotFoundException,
  &_swigt__p_FiniteDifferenceStep,
  &_swigt__p_Format,
  &_swigt__p_FunctionalChaosResult,
  &_swigt__p_GradientImplementation,
  &_swigt__p_Graph,
  &_swigt__p_GraphCollection,
  &_swigt__p_HessianImplementation,
  &_swigt__p_HistogramPairCollection,
  &_swigt__p_HistogramPairPersistentCollection,
  &_swigt__p_HistoryStrategy,
  &_swigt__p_IdentityMatrix,
  &_swigt__p_Implementation,
  &_swigt__p_ImplementationAsPersistentObject,
  &_swigt__p_ImplementationElementType,
  &_swigt__p_ImplementationType,
  &_swigt__p_Indices,
  &_swigt__p_IntegralCompoundPoisson__IntegralCompoundPoisson,
  &_swigt__p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__CovarianceMatrix,
  &_swigt__p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__Graph,
  &_swigt__p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalPoint,
  &_swigt__p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalSample,
  &_swigt__p_IntegralCompoundPoisson__IntegralUserDefined,
  &_swigt__p_IntegralCompoundPoisson__IntegralUserDefinedFactory,
  &_swigt__p_InternalException,
  &_swigt__p_InternalFunction,
  &_swigt__p_InternalGradient,
  &_swigt__p_InternalHessian,
  &_swigt__p_InternalType,
  &_swigt__p_Interval,
  &_swigt__p_InvalidArgumentException,
  &_swigt__p_InvalidDimensionException,
  &_swigt__p_InvalidRangeException,
  &_swigt__p_InverseIsoProbabilisticTransformation,
  &_swigt__p_IsoProbabilisticTransformation,
  &_swigt__p_LabelMap,
  &_swigt__p_Last,
  &_swigt__p_LinearModel,
  &_swigt__p_LinearNumericalMathEvaluationImplementation,
  &_swigt__p_LowDiscrepancySequence,
  &_swigt__p_Map,
  &_swigt__p_MapElement,
  &_swigt__p_Marginals,
  &_swigt__p_Matrix,
  &_swigt__p_MatrixImplementation,
  &_swigt__p_MersenneTwister,
  &_swigt__p_NearestPointAlgorithm,
  &_swigt__p_NoWrapperFileFoundException,
  &_swigt__p_NonEllipticalDistribution,
  &_swigt__p_Normal,
  &_swigt__p_NotDefinedException,
  &_swigt__p_NotSymmetricDefinitePositiveException,
  &_swigt__p_NotYetImplementedException,
  &_swigt__p_NumericalComplexCollection,
  &_swigt__p_NumericalComplexPersistentCollection,
  &_swigt__p_NumericalMathEvaluationImplementation,
  &_swigt__p_NumericalMathFunction,
  &_swigt__p_NumericalMathFunctionCollection,
  &_swigt__p_NumericalMathFunctionPersistentCollection,
  &_swigt__p_NumericalMathGradientImplementation,
  &_swigt__p_NumericalMathHessianImplementation,
  &_swigt__p_NumericalPoint,
  &_swigt__p_NumericalPointCollection,
  &_swigt__p_NumericalPointPersistentCollection,
  &_swigt__p_NumericalPointWithDescription,
  &_swigt__p_NumericalPointWithDescriptionCollection,
  &_swigt__p_NumericalSample,
  &_swigt__p_NumericalScalarCache,
  &_swigt__p_NumericalScalarCollection,
  &_swigt__p_NumericalScalarPersistentCollection,
  &_swigt__p_OT__Base__Optim__NearestPointChecker__Result,
  &_swigt__p_OT__Base__Stat__CorrelationAnalysisSobolIndiceParameters,
  &_swigt__p_OT__Base__Stat__CorrelationAnalysisSobolIndiceResult,
  &_swigt__p_OT__Base__Stat__RandomGeneratorState,
  &_swigt__p_OpenTURNS__Base__Algo__ApproximationAlgorithm,
  &_swigt__p_OpenTURNS__Base__Algo__ApproximationAlgorithmImplementation,
  &_swigt__p_OpenTURNS__Base__Algo__CorrectedLeaveOneOut,
  &_swigt__p_OpenTURNS__Base__Algo__FittingAlgorithm,
  &_swigt__p_OpenTURNS__Base__Algo__FittingAlgorithmImplementation,
  &_swigt__p_OpenTURNS__Base__Algo__Lasso,
  &_swigt__p_OpenTURNS__Base__Algo__LeastSquaresMetaModelSelection,
  &_swigt__p_OpenTURNS__Base__Algo__LeavePOut,
  &_swigt__p_OpenTURNS__Base__Common__ComparisonOperator,
  &_swigt__p_OpenTURNS__Base__Common__ComparisonOperatorImplementation,
  &_swigt__p_OpenTURNS__Base__Common__Equal,
  &_swigt__p_OpenTURNS__Base__Common__Greater,
  &_swigt__p_OpenTURNS__Base__Common__GreaterOrEqual,
  &_swigt__p_OpenTURNS__Base__Common__InterfaceObject,
  &_swigt__p_OpenTURNS__Base__Common__Less,
  &_swigt__p_OpenTURNS__Base__Common__LessOrEqual,
  &_swigt__p_OpenTURNS__Base__Common__Object,
  &_swigt__p_OpenTURNS__Base__Common__PersistentObject,
  &_swigt__p_OpenTURNS__Base__Common__StorageManager,
  &_swigt__p_OpenTURNS__Base__Common__Study,
  &_swigt__p_OpenTURNS__Base__Common__TypedCollectionInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedCollectionInterfaceObjectT_OpenTURNS__Base__Type__DescriptionImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Algo__ApproximationAlgorithmImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Algo__FittingAlgorithmImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Common__ComparisonOperatorImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Diff__FiniteDifferenceStepImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceFactoryImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__NumericalMathFunctionImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__UniVariatePolynomialImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Graph__DrawableImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Graph__GraphImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Solver__SolverImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__HistoryStrategyImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__LowDiscrepancySequenceImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__NumericalSampleImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__DescriptionImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__MatrixImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__TensorImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategyImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__ExperimentImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthogonalFunctionFactory_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFactory_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithmImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategyImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__RootStrategyImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SVMKernelImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SamplingStrategyImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SimulationResultImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__DistributionImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__RandomVectorImplementation_t,
  &_swigt__p_OpenTURNS__Base__Common__XMLStorageManager,
  &_swigt__p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceGradient,
  &_swigt__p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceHessian,
  &_swigt__p_OpenTURNS__Base__Diff__ConstantStep,
  &_swigt__p_OpenTURNS__Base__Diff__FiniteDifferenceGradient,
  &_swigt__p_OpenTURNS__Base__Diff__FiniteDifferenceHessian,
  &_swigt__p_OpenTURNS__Base__Diff__FiniteDifferenceStep,
  &_swigt__p_OpenTURNS__Base__Diff__FiniteDifferenceStepImplementation,
  &_swigt__p_OpenTURNS__Base__Diff__NonCenteredFiniteDifferenceGradient,
  &_swigt__p_OpenTURNS__Base__Diff__ProportionalStep,
  &_swigt__p_OpenTURNS__Base__Func__Basis,
  &_swigt__p_OpenTURNS__Base__Func__BasisSequence,
  &_swigt__p_OpenTURNS__Base__Func__BasisSequenceFactory,
  &_swigt__p_OpenTURNS__Base__Func__BasisSequenceFactoryImplementation,
  &_swigt__p_OpenTURNS__Base__Func__BasisSequenceImplementation,
  &_swigt__p_OpenTURNS__Base__Func__ComposedNumericalMathEvaluationImplementation,
  &_swigt__p_OpenTURNS__Base__Func__ComposedNumericalMathFunction,
  &_swigt__p_OpenTURNS__Base__Func__ComposedNumericalMathGradientImplementation,
  &_swigt__p_OpenTURNS__Base__Func__ComposedNumericalMathHessianImplementation,
  &_swigt__p_OpenTURNS__Base__Func__ComputedNumericalMathEvaluationImplementation,
  &_swigt__p_OpenTURNS__Base__Func__ComputedNumericalMathGradientImplementation,
  &_swigt__p_OpenTURNS__Base__Func__ComputedNumericalMathHessianImplementation,
  &_swigt__p_OpenTURNS__Base__Func__ConstantNumericalMathGradientImplementation,
  &_swigt__p_OpenTURNS__Base__Func__ConstantNumericalMathHessianImplementation,
  &_swigt__p_OpenTURNS__Base__Func__IndicatorNumericalMathEvaluationImplementation,
  &_swigt__p_OpenTURNS__Base__Func__LAR,
  &_swigt__p_OpenTURNS__Base__Func__LARFSZero,
  &_swigt__p_OpenTURNS__Base__Func__LARLasso,
  &_swigt__p_OpenTURNS__Base__Func__LinearCombinationEvaluationImplementation,
  &_swigt__p_OpenTURNS__Base__Func__LinearCombinationGradientImplementation,
  &_swigt__p_OpenTURNS__Base__Func__LinearCombinationHessianImplementation,
  &_swigt__p_OpenTURNS__Base__Func__LinearNumericalMathEvaluationImplementation,
  &_swigt__p_OpenTURNS__Base__Func__LinearNumericalMathFunction,
  &_swigt__p_OpenTURNS__Base__Func__LinearNumericalMathGradientImplementation,
  &_swigt__p_OpenTURNS__Base__Func__NoNumericalMathEvaluationImplementation,
  &_swigt__p_OpenTURNS__Base__Func__NoNumericalMathGradientImplementation,
  &_swigt__p_OpenTURNS__Base__Func__NoNumericalMathHessianImplementation,
  &_swigt__p_OpenTURNS__Base__Func__NumericalMathEvaluationImplementation,
  &_swigt__p_OpenTURNS__Base__Func__NumericalMathFunction,
  &_swigt__p_OpenTURNS__Base__Func__NumericalMathFunctionImplementation,
  &_swigt__p_OpenTURNS__Base__Func__NumericalMathGradientImplementation,
  &_swigt__p_OpenTURNS__Base__Func__NumericalMathHessianImplementation,
  &_swigt__p_OpenTURNS__Base__Func__ProductNumericalMathEvaluationImplementation,
  &_swigt__p_OpenTURNS__Base__Func__ProductNumericalMathFunction,
  &_swigt__p_OpenTURNS__Base__Func__ProductNumericalMathGradientImplementation,
  &_swigt__p_OpenTURNS__Base__Func__ProductNumericalMathHessianImplementation,
  &_swigt__p_OpenTURNS__Base__Func__ProductPolynomialEvaluationImplementation,
  &_swigt__p_OpenTURNS__Base__Func__QuadraticNumericalMathEvaluationImplementation,
  &_swigt__p_OpenTURNS__Base__Func__UniVariatePolynomial,
  &_swigt__p_OpenTURNS__Base__Func__UniVariatePolynomialImplementation,
  &_swigt__p_OpenTURNS__Base__Func__WrapperData,
  &_swigt__p_OpenTURNS__Base__Func__WrapperDataFile,
  &_swigt__p_OpenTURNS__Base__Func__WrapperDataVariable,
  &_swigt__p_OpenTURNS__Base__Func__WrapperFile,
  &_swigt__p_OpenTURNS__Base__Func__WrapperFrameworkData,
  &_swigt__p_OpenTURNS__Base__Func__WrapperFunctionDescription,
  &_swigt__p_OpenTURNS__Base__Func__WrapperParameter,
  &_swigt__p_OpenTURNS__Base__Graph__BarPlot,
  &_swigt__p_OpenTURNS__Base__Graph__Cloud,
  &_swigt__p_OpenTURNS__Base__Graph__Contour,
  &_swigt__p_OpenTURNS__Base__Graph__Curve,
  &_swigt__p_OpenTURNS__Base__Graph__Drawable,
  &_swigt__p_OpenTURNS__Base__Graph__DrawableImplementation,
  &_swigt__p_OpenTURNS__Base__Graph__Graph,
  &_swigt__p_OpenTURNS__Base__Graph__GraphImplementation,
  &_swigt__p_OpenTURNS__Base__Graph__Pie,
  &_swigt__p_OpenTURNS__Base__Graph__Staircase,
  &_swigt__p_OpenTURNS__Base__Optim__AbdoRackwitz,
  &_swigt__p_OpenTURNS__Base__Optim__AbdoRackwitzSpecificParameters,
  &_swigt__p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithm,
  &_swigt__p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementation,
  &_swigt__p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementationResult,
  &_swigt__p_OpenTURNS__Base__Optim__Cobyla,
  &_swigt__p_OpenTURNS__Base__Optim__CobylaSpecificParameters,
  &_swigt__p_OpenTURNS__Base__Optim__NearestPointAlgorithm,
  &_swigt__p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementation,
  &_swigt__p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementationResult,
  &_swigt__p_OpenTURNS__Base__Optim__NearestPointChecker,
  &_swigt__p_OpenTURNS__Base__Optim__PenalizedLeastSquaresAlgorithm,
  &_swigt__p_OpenTURNS__Base__Optim__SQP,
  &_swigt__p_OpenTURNS__Base__Optim__SQPSpecificParameters,
  &_swigt__p_OpenTURNS__Base__Optim__TNC,
  &_swigt__p_OpenTURNS__Base__Optim__TNCSpecificParameters,
  &_swigt__p_OpenTURNS__Base__Regression__LinearLeastSquares,
  &_swigt__p_OpenTURNS__Base__Regression__LinearTaylor,
  &_swigt__p_OpenTURNS__Base__Regression__QuadraticLeastSquares,
  &_swigt__p_OpenTURNS__Base__Regression__QuadraticTaylor,
  &_swigt__p_OpenTURNS__Base__Regression__RegressionAlgorithm,
  &_swigt__p_OpenTURNS__Base__Solver__Bisection,
  &_swigt__p_OpenTURNS__Base__Solver__Brent,
  &_swigt__p_OpenTURNS__Base__Solver__Secant,
  &_swigt__p_OpenTURNS__Base__Solver__Solver,
  &_swigt__p_OpenTURNS__Base__Solver__SolverImplementation,
  &_swigt__p_OpenTURNS__Base__Stat__Compact,
  &_swigt__p_OpenTURNS__Base__Stat__ConfidenceInterval,
  &_swigt__p_OpenTURNS__Base__Stat__CorrelationMatrix,
  &_swigt__p_OpenTURNS__Base__Stat__CovarianceMatrix,
  &_swigt__p_OpenTURNS__Base__Stat__FaureSequence,
  &_swigt__p_OpenTURNS__Base__Stat__Full,
  &_swigt__p_OpenTURNS__Base__Stat__HaltonSequence,
  &_swigt__p_OpenTURNS__Base__Stat__HistoryStrategy,
  &_swigt__p_OpenTURNS__Base__Stat__HistoryStrategyImplementation,
  &_swigt__p_OpenTURNS__Base__Stat__InverseHaltonSequence,
  &_swigt__p_OpenTURNS__Base__Stat__Last,
  &_swigt__p_OpenTURNS__Base__Stat__LinearModel,
  &_swigt__p_OpenTURNS__Base__Stat__LowDiscrepancySequence,
  &_swigt__p_OpenTURNS__Base__Stat__LowDiscrepancySequenceImplementation,
  &_swigt__p_OpenTURNS__Base__Stat__Null,
  &_swigt__p_OpenTURNS__Base__Stat__NumericalSample,
  &_swigt__p_OpenTURNS__Base__Stat__NumericalSampleImplementation,
  &_swigt__p_OpenTURNS__Base__Stat__SobolSequence,
  &_swigt__p_OpenTURNS__Base__Stat__TestResult,
  &_swigt__p_OpenTURNS__Base__Type__CollectionT_unsigned_long_t,
  &_swigt__p_OpenTURNS__Base__Type__Description,
  &_swigt__p_OpenTURNS__Base__Type__DescriptionImplementation,
  &_swigt__p_OpenTURNS__Base__Type__IdentityMatrix,
  &_swigt__p_OpenTURNS__Base__Type__Indices,
  &_swigt__p_OpenTURNS__Base__Type__Interval,
  &_swigt__p_OpenTURNS__Base__Type__Matrix,
  &_swigt__p_OpenTURNS__Base__Type__MatrixImplementation,
  &_swigt__p_OpenTURNS__Base__Type__NumericalPoint,
  &_swigt__p_OpenTURNS__Base__Type__NumericalPointWithDescription,
  &_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__Basis_t,
  &_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__NumericalMathFunction_t,
  &_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__UniVariatePolynomial_t,
  &_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPointWithDescription_t,
  &_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPoint_t,
  &_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFamily_t,
  &_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__HistogramPair_t,
  &_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__UserDefinedPair_t,
  &_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_double_t,
  &_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_std__string_t,
  &_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_unsigned_long_t,
  &_swigt__p_OpenTURNS__Base__Type__SquareMatrix,
  &_swigt__p_OpenTURNS__Base__Type__SymmetricMatrix,
  &_swigt__p_OpenTURNS__Base__Type__SymmetricTensor,
  &_swigt__p_OpenTURNS__Base__Type__Tensor,
  &_swigt__p_OpenTURNS__Base__Type__TensorImplementation,
  &_swigt__p_OpenTURNS__PointInSourceFile,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategy,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategyImplementation,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__Analytical,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__AnalyticalResult,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__Axial,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__BootstrapExperiment,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__Box,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__ChebychevAlgorithm,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__CleaningStrategy,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__Composite,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__DirectionalSampling,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__EnumerateFunction,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__Experiment,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__ExperimentImplementation,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__ExponentialRBF,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__FORM,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__FORMResult,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__Factorial,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__FixedExperiment,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__FixedStrategy,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosAlgorithm,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosResult,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__GramSchmidtAlgorithm,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__HermiteFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__HyperbolicAnisotropicEnumerateFunction,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__ImportanceSampling,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__ImportanceSamplingExperiment,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__IntegrationStrategy,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaEvaluation,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaGradient,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaHessian,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionEvaluation,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionGradient,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionHessian,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaEvaluation,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaGradient,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaHessian,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseRosenblattEvaluation,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__JacobiFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__LHS,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__LHSExperiment,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__LaguerreFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__LeastSquaresStrategy,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__LegendreFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__LinearEnumerateFunction,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__LowDiscrepancyExperiment,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationEvaluation,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationGradient,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationHessian,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__MediumSafe,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__MetaModelAlgorithm,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__MetaModelResult,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__MonteCarlo,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__MonteCarloExperiment,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaEvaluation,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaGradient,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaHessian,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionEvaluation,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionGradient,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionHessian,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaEvaluation,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaGradient,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaHessian,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__NormalRBF,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalBasis,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalDirection,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalFunctionFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalProductPolynomialFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomial,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFamily,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithm,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithmImplementation,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__PolynomialKernel,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalControlledImportanceSampling,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalImportanceSampling,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalSimulation,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategy,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategyImplementation,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__QuadraticCumul,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarlo,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarloResult,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__RandomDirection,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__RationalKernel,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__RiskyAndFast,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__RootStrategy,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__RootStrategyImplementation,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__RosenblattEvaluation,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__SORM,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__SORMResult,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__SVMKernel,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelImplementation,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionEvaluation,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionGradient,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionHessian,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__SafeAndSlow,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__SamplingStrategy,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__SamplingStrategyImplementation,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__SequentialStrategy,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__Simulation,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__SimulationResult,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__SimulationResultImplementation,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__StandardDistributionPolynomialFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__StratifiedExperiment,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__StrongMaximumTest,
  &_swigt__p_OpenTURNS__Uncertainty__Algorithm__WeightedExperiment,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Arcsine,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__ArcsineFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Bernoulli,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__BernoulliFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Beta,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__BetaFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Binomial,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__BinomialFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Burr,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Chi,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__ChiFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__ChiSquare,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__ChiSquareFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__ClaytonCopula,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__ClaytonCopulaFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__ComposedCopula,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__ComposedDistribution,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Dirichlet,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__DirichletFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Epanechnikov,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Exponential,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__ExponentialFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__FrankCopula,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__FrankCopulaFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Gamma,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__GammaFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Geometric,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__GeometricFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Gumbel,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__GumbelCopula,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__GumbelCopulaFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__GumbelFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Histogram,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__HistogramFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__HistogramPair,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__IndependentCopula,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__InverseNormal,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__KernelMixture,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__KernelSmoothing,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Laplace,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__LaplaceFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__LogNormal,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__LogNormalFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Logistic,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__LogisticFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Mixture,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Multinomial,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__MultinomialFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__NonCentralChiSquare,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__NonCentralStudent,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Normal,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__NormalCopula,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__NormalCopulaFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__NormalFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Poisson,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__PoissonFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__RandomMixture,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Rayleigh,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__RayleighFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Rice,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Student,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__StudentFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Trapezoidal,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__TrapezoidalFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Triangular,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__TriangularFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__TruncatedDistribution,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__TruncatedNormal,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__TruncatedNormalFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Uniform,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__UniformFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__UserDefined,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__UserDefinedFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__UserDefinedPair,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__Weibull,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__WeibullFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Distribution__ZipfMandelbrot,
  &_swigt__p_OpenTURNS__Uncertainty__Model__ArchimedeanCopula,
  &_swigt__p_OpenTURNS__Uncertainty__Model__CompositeRandomVector,
  &_swigt__p_OpenTURNS__Uncertainty__Model__ConditionalRandomVector,
  &_swigt__p_OpenTURNS__Uncertainty__Model__ConstantRandomVector,
  &_swigt__p_OpenTURNS__Uncertainty__Model__ContinuousDistribution,
  &_swigt__p_OpenTURNS__Uncertainty__Model__Copula,
  &_swigt__p_OpenTURNS__Uncertainty__Model__CopulaImplementation,
  &_swigt__p_OpenTURNS__Uncertainty__Model__DiscreteDistribution,
  &_swigt__p_OpenTURNS__Uncertainty__Model__Distribution,
  &_swigt__p_OpenTURNS__Uncertainty__Model__DistributionFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Model__DistributionImplementation,
  &_swigt__p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory,
  &_swigt__p_OpenTURNS__Uncertainty__Model__EllipticalDistribution,
  &_swigt__p_OpenTURNS__Uncertainty__Model__Event,
  &_swigt__p_OpenTURNS__Uncertainty__Model__EventRandomVectorImplementation,
  &_swigt__p_OpenTURNS__Uncertainty__Model__FunctionalChaosRandomVector,
  &_swigt__p_OpenTURNS__Uncertainty__Model__NonEllipticalDistribution,
  &_swigt__p_OpenTURNS__Uncertainty__Model__RandomVector,
  &_swigt__p_OpenTURNS__Uncertainty__Model__RandomVectorImplementation,
  &_swigt__p_OpenTURNS__Uncertainty__Model__SklarCopula,
  &_swigt__p_OpenTURNS__Uncertainty__Model__StandardEvent,
  &_swigt__p_OpenTURNS__Uncertainty__Model__UsualDistribution,
  &_swigt__p_OpenTURNS__Uncertainty__Model__UsualRandomVector,
  &_swigt__p_OptimizationProblem,
  &_swigt__p_OutOfBoundException,
  &_swigt__p_PersistentObject,
  &_swigt__p_Poisson,
  &_swigt__p_PolynomialCollection,
  &_swigt__p_PolynomialFamilyCollection,
  &_swigt__p_PolynomialFamilyPersistentCollection,
  &_swigt__p_PolynomialPersistentCollection,
  &_swigt__p_RandomVector,
  &_swigt__p_Result,
  &_swigt__p_SQPSpecificParameters,
  &_swigt__p_SVMEvaluation,
  &_swigt__p_SVMKernel,
  &_swigt__p_SVMKernelRegressionEvaluation,
  &_swigt__p_Sensitivity,
  &_swigt__p_Severity,
  &_swigt__p_SimplePoint,
  &_swigt__p_SobolIndiceParameters,
  &_swigt__p_SobolIndiceResult,
  &_swigt__p_SobolSequence,
  &_swigt__p_Solver,
  &_swigt__p_SpecFunc,
  &_swigt__p_SquareMatrix,
  &_swigt__p_StandardEvent,
  &_swigt__p_State,
  &_swigt__p_StorageManager,
  &_swigt__p_StorageManagerImplementation,
  &_swigt__p_SymmetricMatrix,
  &_swigt__p_SymmetricTensor,
  &_swigt__p_TNCSpecificParameters,
  &_swigt__p_Tensor,
  &_swigt__p_TestResult,
  &_swigt__p_TestResultCollection,
  &_swigt__p_UniVariatePolynomial,
  &_swigt__p_UnsignedLongCollection,
  &_swigt__p_UnsignedLongPersistentCollection,
  &_swigt__p_UserDefinedPairCollection,
  &_swigt__p_UserDefinedPairPersistentCollection,
  &_swigt__p_Value,
  &_swigt__p_ValueType,
  &_swigt__p_VariableListType,
  &_swigt__p_WeightedExperimentImplementation,
  &_swigt__p_WrapperFileParsingException,
  &_swigt__p_WrapperInternalException,
  &_swigt__p_allocator_type,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_const_internalIterator,
  &_swigt__p_const_iterator,
  &_swigt__p_const_reverse_iterator,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_iterator,
  &_swigt__p_key_type,
  &_swigt__p_long,
  &_swigt__p_mapped_type,
  &_swigt__p_pointer_type,
  &_swigt__p_reverse_iterator,
  &_swigt__p_size_type,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__string,
  &_swigt__p_unsigned_long,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_AbdoRackwitzSpecificParameters[] = {  {&_swigt__p_AbdoRackwitzSpecificParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Antecedent[] = {  {&_swigt__p_Antecedent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArchimedeanCopula[] = {  {&_swigt__p_ArchimedeanCopula, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Basis[] = {  {&_swigt__p_Basis, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BoolCollection[] = {  {&_swigt__p_BoolCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BoolPersistentCollection[] = {  {&_swigt__p_BoolPersistentCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BoundingBox[] = {  {&_swigt__p_BoundingBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CacheImplementation[] = {  {&_swigt__p_CacheImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CacheType[] = {  {&_swigt__p_CacheType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CobylaSpecificParameters[] = {  {&_swigt__p_CobylaSpecificParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Coefficients[] = {  {&_swigt__p_Coefficients, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CoefficientsCollection[] = {  {&_swigt__p_CoefficientsCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CoefficientsPersistentCollection[] = {  {&_swigt__p_CoefficientsPersistentCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CommunicatorType[] = {  {&_swigt__p_CommunicatorType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Compact[] = {  {&_swigt__p_Compact, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ComparisonOperator[] = {  {&_swigt__p_ComparisonOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConfidenceIntervalCollection[] = {  {&_swigt__p_ConfidenceIntervalCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConfidenceIntervalPersistentCollection[] = {  {&_swigt__p_ConfidenceIntervalPersistentCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstantNumericalMathGradientImplementation[] = {  {&_swigt__p_ConstantNumericalMathGradientImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstantNumericalMathHessianImplementation[] = {  {&_swigt__p_ConstantNumericalMathHessianImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Copula[] = {  {&_swigt__p_Copula, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CopulaCollection[] = {  {&_swigt__p_CopulaCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CopulaImplementation[] = {  {&_swigt__p_CopulaImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CopulaPersistentCollection[] = {  {&_swigt__p_CopulaPersistentCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CorrelationMatrix[] = {  {&_swigt__p_CorrelationMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CovarianceMatrix[] = {  {&_swigt__p_CovarianceMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Description[] = {  {&_swigt__p_Description, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DirectoryList[] = {  {&_swigt__p_DirectoryList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DiscreteDistribution[] = {  {&_swigt__p_DiscreteDistribution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Distribution[] = {  {&_swigt__p_Distribution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DistributionCollection[] = {  {&_swigt__p_DistributionCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DistributionFactory[] = {  {&_swigt__p_DistributionFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DistributionFactoryCollection[] = {  {&_swigt__p_DistributionFactoryCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DistributionImplementation[] = {  {&_swigt__p_DistributionImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DistributionImplementationFactory[] = {  {&_swigt__p_DistributionImplementationFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DistributionPersistentCollection[] = {  {&_swigt__p_DistributionPersistentCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DrawableCollection[] = {  {&_swigt__p_DrawableCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DrawablePersistentCollection[] = {  {&_swigt__p_DrawablePersistentCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ElementType[] = {  {&_swigt__p_ElementType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EllipticalDistribution[] = {  {&_swigt__p_EllipticalDistribution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EvaluationImplementation[] = {  {&_swigt__p_EvaluationImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Event[] = {  {&_swigt__p_Event, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Factory[] = {  {&_swigt__p_Factory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FileListType[] = {  {&_swigt__p_FileListType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FileNotFoundException[] = {  {&_swigt__p_FileNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FiniteDifferenceStep[] = {  {&_swigt__p_FiniteDifferenceStep, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Format[] = {  {&_swigt__p_Format, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FunctionalChaosResult[] = {  {&_swigt__p_FunctionalChaosResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GradientImplementation[] = {  {&_swigt__p_GradientImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Graph[] = {  {&_swigt__p_Graph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GraphCollection[] = {  {&_swigt__p_GraphCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HessianImplementation[] = {  {&_swigt__p_HessianImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HistogramPairCollection[] = {  {&_swigt__p_HistogramPairCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HistogramPairPersistentCollection[] = {  {&_swigt__p_HistogramPairPersistentCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HistoryStrategy[] = {  {&_swigt__p_HistoryStrategy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IdentityMatrix[] = {  {&_swigt__p_IdentityMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Implementation[] = {  {&_swigt__p_Implementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImplementationAsPersistentObject[] = {  {&_swigt__p_ImplementationAsPersistentObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImplementationElementType[] = {  {&_swigt__p_ImplementationElementType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImplementationType[] = {  {&_swigt__p_ImplementationType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Indices[] = {  {&_swigt__p_Indices, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IntegralCompoundPoisson__IntegralCompoundPoisson[] = {  {&_swigt__p_IntegralCompoundPoisson__IntegralCompoundPoisson, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__CovarianceMatrix[] = {  {&_swigt__p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__CovarianceMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__Graph[] = {  {&_swigt__p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__Graph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalPoint[] = {  {&_swigt__p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalSample[] = {  {&_swigt__p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalSample, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IntegralCompoundPoisson__IntegralUserDefined[] = {  {&_swigt__p_IntegralCompoundPoisson__IntegralUserDefined, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IntegralCompoundPoisson__IntegralUserDefinedFactory[] = {  {&_swigt__p_IntegralCompoundPoisson__IntegralUserDefinedFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InternalException[] = {  {&_swigt__p_InternalException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InternalFunction[] = {  {&_swigt__p_InternalFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InternalGradient[] = {  {&_swigt__p_InternalGradient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InternalHessian[] = {  {&_swigt__p_InternalHessian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InternalType[] = {  {&_swigt__p_InternalType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Interval[] = {  {&_swigt__p_Interval, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InvalidArgumentException[] = {  {&_swigt__p_InvalidArgumentException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InvalidDimensionException[] = {  {&_swigt__p_InvalidDimensionException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InvalidRangeException[] = {  {&_swigt__p_InvalidRangeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InverseIsoProbabilisticTransformation[] = {  {&_swigt__p_InverseIsoProbabilisticTransformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IsoProbabilisticTransformation[] = {  {&_swigt__p_IsoProbabilisticTransformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LabelMap[] = {  {&_swigt__p_LabelMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Last[] = {  {&_swigt__p_Last, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LinearModel[] = {  {&_swigt__p_LinearModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LinearNumericalMathEvaluationImplementation[] = {  {&_swigt__p_LinearNumericalMathEvaluationImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LowDiscrepancySequence[] = {  {&_swigt__p_LowDiscrepancySequence, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Map[] = {  {&_swigt__p_Map, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MapElement[] = {  {&_swigt__p_MapElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Marginals[] = {  {&_swigt__p_Marginals, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Matrix[] = {  {&_swigt__p_Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixImplementation[] = {  {&_swigt__p_MatrixImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MersenneTwister[] = {  {&_swigt__p_MersenneTwister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NearestPointAlgorithm[] = {  {&_swigt__p_NearestPointAlgorithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NoWrapperFileFoundException[] = {  {&_swigt__p_NoWrapperFileFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NonEllipticalDistribution[] = {  {&_swigt__p_NonEllipticalDistribution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Normal[] = {  {&_swigt__p_Normal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NotDefinedException[] = {  {&_swigt__p_NotDefinedException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NotSymmetricDefinitePositiveException[] = {  {&_swigt__p_NotSymmetricDefinitePositiveException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NotYetImplementedException[] = {  {&_swigt__p_NotYetImplementedException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NumericalComplexCollection[] = {  {&_swigt__p_NumericalComplexCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NumericalComplexPersistentCollection[] = {  {&_swigt__p_NumericalComplexPersistentCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NumericalMathEvaluationImplementation[] = {  {&_swigt__p_NumericalMathEvaluationImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NumericalMathFunction[] = {  {&_swigt__p_NumericalMathFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NumericalMathFunctionCollection[] = {  {&_swigt__p_NumericalMathFunctionCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NumericalMathFunctionPersistentCollection[] = {  {&_swigt__p_NumericalMathFunctionPersistentCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NumericalMathGradientImplementation[] = {  {&_swigt__p_NumericalMathGradientImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NumericalMathHessianImplementation[] = {  {&_swigt__p_NumericalMathHessianImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NumericalPoint[] = {  {&_swigt__p_NumericalPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NumericalPointCollection[] = {  {&_swigt__p_NumericalPointCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NumericalPointPersistentCollection[] = {  {&_swigt__p_NumericalPointPersistentCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NumericalPointWithDescription[] = {  {&_swigt__p_NumericalPointWithDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NumericalPointWithDescriptionCollection[] = {  {&_swigt__p_NumericalPointWithDescriptionCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NumericalSample[] = {  {&_swigt__p_NumericalSample, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NumericalScalarCache[] = {  {&_swigt__p_NumericalScalarCache, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NumericalScalarCollection[] = {  {&_swigt__p_NumericalScalarCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NumericalScalarPersistentCollection[] = {  {&_swigt__p_NumericalScalarPersistentCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OT__Base__Optim__NearestPointChecker__Result[] = {  {&_swigt__p_OT__Base__Optim__NearestPointChecker__Result, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OT__Base__Stat__CorrelationAnalysisSobolIndiceParameters[] = {  {&_swigt__p_OT__Base__Stat__CorrelationAnalysisSobolIndiceParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OT__Base__Stat__CorrelationAnalysisSobolIndiceResult[] = {  {&_swigt__p_OT__Base__Stat__CorrelationAnalysisSobolIndiceResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OT__Base__Stat__RandomGeneratorState[] = {  {&_swigt__p_OT__Base__Stat__RandomGeneratorState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedCollectionInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedCollectionInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedCollectionInterfaceObjectT_OpenTURNS__Base__Type__DescriptionImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedCollectionInterfaceObjectT_OpenTURNS__Base__Type__DescriptionImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__BootstrapExperiment[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__BootstrapExperiment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Model__ArchimedeanCopula[] = {{&_swigt__p_OpenTURNS__Uncertainty__Model__ArchimedeanCopula, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__PolynomialKernel[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__PolynomialKernel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Rayleigh[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Rayleigh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__WeightedExperiment[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__WeightedExperiment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Graph__Drawable[] = {{&_swigt__p_OpenTURNS__Base__Graph__Drawable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Burr[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Burr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__WrapperParameter[] = {{&_swigt__p_OpenTURNS__Base__Func__WrapperParameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Optim__CobylaSpecificParameters[] = {{&_swigt__p_OpenTURNS__Base__Optim__CobylaSpecificParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__RosenblattEvaluation[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__RosenblattEvaluation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Model__StandardEvent[] = {{&_swigt__p_OpenTURNS__Uncertainty__Model__StandardEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__Simulation[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__Simulation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Model__Distribution[] = {{&_swigt__p_OpenTURNS__Uncertainty__Model__Distribution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__RationalKernel[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__RationalKernel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Algo__FittingAlgorithmImplementation[] = {{&_swigt__p_OpenTURNS__Base__Algo__FittingAlgorithmImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__GumbelCopulaFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__GumbelCopulaFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__GumbelCopula[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__GumbelCopula, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__PersistentCollectionT_std__string_t[] = {{&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__Indices[] = {{&_swigt__p_OpenTURNS__Base__Type__Indices, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithm[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithmImplementation[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithmImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategyImplementation[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategyImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategy[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__Analytical[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__Analytical, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__LinearNumericalMathEvaluationImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__LinearNumericalMathEvaluationImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__LinearNumericalMathGradientImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__LinearNumericalMathGradientImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__WrapperDataFile[] = {{&_swigt__p_OpenTURNS__Base__Func__WrapperDataFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__NumericalPointWithDescription[] = {{&_swigt__p_OpenTURNS__Base__Type__NumericalPointWithDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__PoissonFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__PoissonFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Model__FunctionalChaosRandomVector[] = {{&_swigt__p_OpenTURNS__Uncertainty__Model__FunctionalChaosRandomVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__InverseRosenblattEvaluation[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseRosenblattEvaluation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaEvaluation[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaEvaluation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaGradient[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaGradient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaHessian[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaHessian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionEvaluation[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionEvaluation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionGradient[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionGradient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionHessian[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionHessian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Optim__SQP[] = {{&_swigt__p_OpenTURNS__Base__Optim__SQP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Logistic[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Logistic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__ComparisonOperator[] = {{&_swigt__p_OpenTURNS__Base__Common__ComparisonOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Model__CompositeRandomVector[] = {{&_swigt__p_OpenTURNS__Uncertainty__Model__CompositeRandomVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Binomial[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Binomial, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__UniVariatePolynomial[] = {{&_swigt__p_OpenTURNS__Base__Func__UniVariatePolynomial, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Arcsine[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Arcsine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__GramSchmidtAlgorithm[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__GramSchmidtAlgorithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__SequentialStrategy[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SequentialStrategy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__SimulationResultImplementation[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SimulationResultImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__SimulationResult[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SimulationResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Diff__ProportionalStep[] = {{&_swigt__p_OpenTURNS__Base__Diff__ProportionalStep, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__InterfaceObject[] = {{&_swigt__p_OpenTURNS__Base__Common__InterfaceObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Diff__ConstantStep[] = {{&_swigt__p_OpenTURNS__Base__Diff__ConstantStep, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__GammaFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__GammaFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Optim__AbdoRackwitzSpecificParameters[] = {{&_swigt__p_OpenTURNS__Base__Optim__AbdoRackwitzSpecificParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__ProductNumericalMathGradientImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__ProductNumericalMathGradientImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__SORM[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SORM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Trapezoidal[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Trapezoidal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__TrapezoidalFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__TrapezoidalFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__MonteCarlo[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__MonteCarlo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__ClaytonCopula[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__ClaytonCopula, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__ClaytonCopulaFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__ClaytonCopulaFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementationResult[] = {{&_swigt__p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementationResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementation[] = {{&_swigt__p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Algo__ApproximationAlgorithmImplementation[] = {{&_swigt__p_OpenTURNS__Base__Algo__ApproximationAlgorithmImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Solver__Secant[] = {{&_swigt__p_OpenTURNS__Base__Solver__Secant, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__Greater[] = {{&_swigt__p_OpenTURNS__Base__Common__Greater, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Stat__HistoryStrategyImplementation[] = {{&_swigt__p_OpenTURNS__Base__Stat__HistoryStrategyImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Stat__NumericalSampleImplementation[] = {{&_swigt__p_OpenTURNS__Base__Stat__NumericalSampleImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__ComposedNumericalMathHessianImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__ComposedNumericalMathHessianImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__ComputedNumericalMathHessianImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__ComputedNumericalMathHessianImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__ConstantNumericalMathHessianImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__ConstantNumericalMathHessianImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Stat__Last[] = {{&_swigt__p_OpenTURNS__Base__Stat__Last, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Stat__CorrelationMatrix[] = {{&_swigt__p_OpenTURNS__Base__Stat__CorrelationMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__KernelSmoothing[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__KernelSmoothing, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__PersistentCollectionT_unsigned_long_t[] = {{&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaHessian[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaHessian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaGradient[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaGradient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaEvaluation[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaEvaluation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaEvaluation[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaEvaluation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaGradient[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaGradient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaHessian[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaHessian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionEvaluation[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionEvaluation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionGradient[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionGradient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionHessian[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionHessian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__SquareMatrix[] = {{&_swigt__p_OpenTURNS__Base__Type__SquareMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__SymmetricMatrix[] = {{&_swigt__p_OpenTURNS__Base__Type__SymmetricMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__IdentityMatrix[] = {{&_swigt__p_OpenTURNS__Base__Type__IdentityMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__Matrix[] = {{&_swigt__p_OpenTURNS__Base__Type__Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__FORM[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__FORM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__ArcsineFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__ArcsineFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__SVMKernel[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SVMKernel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__NumericalMathGradientImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__NumericalMathGradientImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SamplingStrategyImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SamplingStrategyImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__RootStrategyImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__RootStrategyImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SimulationResultImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SimulationResultImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SVMKernelImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SVMKernelImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategyImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategyImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Solver__SolverImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Solver__SolverImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Diff__FiniteDifferenceStepImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Diff__FiniteDifferenceStepImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceFactoryImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceFactoryImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__UniVariatePolynomialImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__UniVariatePolynomialImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__NumericalMathFunctionImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__NumericalMathFunctionImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__DescriptionImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__DescriptionImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Common__ComparisonOperatorImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Common__ComparisonOperatorImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__MatrixImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__MatrixImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__TensorImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__TensorImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__NumericalSampleImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__NumericalSampleImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__HistoryStrategyImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__HistoryStrategyImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__LowDiscrepancySequenceImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__LowDiscrepancySequenceImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Graph__DrawableImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Graph__DrawableImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Graph__GraphImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Graph__GraphImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Algo__FittingAlgorithmImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Algo__FittingAlgorithmImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Algo__ApproximationAlgorithmImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Algo__ApproximationAlgorithmImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__DistributionImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__DistributionImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__RandomVectorImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__RandomVectorImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__ExperimentImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__ExperimentImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFactory_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFactory_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithmImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithmImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthogonalFunctionFactory_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthogonalFunctionFactory_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategyImplementation_t[] = {{&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategyImplementation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__BasisSequenceImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__BasisSequenceImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__Experiment[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__Experiment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__RandomMixture[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__RandomMixture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__HermiteFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__HermiteFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Graph__Cloud[] = {{&_swigt__p_OpenTURNS__Base__Graph__Cloud, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Solver__SolverImplementation[] = {{&_swigt__p_OpenTURNS__Base__Solver__SolverImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__TensorImplementation[] = {{&_swigt__p_OpenTURNS__Base__Type__TensorImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__MatrixImplementation[] = {{&_swigt__p_OpenTURNS__Base__Type__MatrixImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Graph__DrawableImplementation[] = {{&_swigt__p_OpenTURNS__Base__Graph__DrawableImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Graph__GraphImplementation[] = {{&_swigt__p_OpenTURNS__Base__Graph__GraphImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaHessian[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaHessian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaGradient[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaGradient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaEvaluation[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaEvaluation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__LogisticFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__LogisticFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__NormalFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__NormalFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelImplementation[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategyImplementation[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategyImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Epanechnikov[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Epanechnikov, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Optim__NearestPointChecker[] = {{&_swigt__p_OpenTURNS__Base__Optim__NearestPointChecker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategy[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__MetaModelResult[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__MetaModelResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__KernelMixture[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__KernelMixture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Solver__Solver[] = {{&_swigt__p_OpenTURNS__Base__Solver__Solver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Model__EllipticalDistribution[] = {{&_swigt__p_OpenTURNS__Uncertainty__Model__EllipticalDistribution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomial[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomial, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Model__ContinuousDistribution[] = {{&_swigt__p_OpenTURNS__Uncertainty__Model__ContinuousDistribution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFamily[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFamily, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__ConstantNumericalMathGradientImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__ConstantNumericalMathGradientImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__ComputedNumericalMathGradientImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__ComputedNumericalMathGradientImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__ComposedNumericalMathGradientImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__ComposedNumericalMathGradientImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Model__SklarCopula[] = {{&_swigt__p_OpenTURNS__Uncertainty__Model__SklarCopula, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Graph__Staircase[] = {{&_swigt__p_OpenTURNS__Base__Graph__Staircase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Model__Copula[] = {{&_swigt__p_OpenTURNS__Uncertainty__Model__Copula, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__LegendreFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__LegendreFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__LaguerreFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__LaguerreFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__WeibullFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__WeibullFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__NormalRBF[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NormalRBF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionEvaluation[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionEvaluation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionGradient[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionGradient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionHessian[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionHessian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__ChiSquareFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__ChiSquareFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__ChiSquare[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__ChiSquare, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__LinearNumericalMathFunction[] = {{&_swigt__p_OpenTURNS__Base__Func__LinearNumericalMathFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__WrapperFrameworkData[] = {{&_swigt__p_OpenTURNS__Base__Func__WrapperFrameworkData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__RiskyAndFast[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__RiskyAndFast, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Diff__FiniteDifferenceGradient[] = {{&_swigt__p_OpenTURNS__Base__Diff__FiniteDifferenceGradient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__RootStrategyImplementation[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__RootStrategyImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Stat__HistoryStrategy[] = {{&_swigt__p_OpenTURNS__Base__Stat__HistoryStrategy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__RootStrategy[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__RootStrategy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__MetaModelAlgorithm[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__MetaModelAlgorithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Rice[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Rice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__StratifiedExperiment[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__StratifiedExperiment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceHessian[] = {{&_swigt__p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceHessian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceGradient[] = {{&_swigt__p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceGradient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Algo__LeastSquaresMetaModelSelection[] = {{&_swigt__p_OpenTURNS__Base__Algo__LeastSquaresMetaModelSelection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Stat__Null[] = {{&_swigt__p_OpenTURNS__Base__Stat__Null, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__WrapperFunctionDescription[] = {{&_swigt__p_OpenTURNS__Base__Func__WrapperFunctionDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__NumericalMathHessianImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__NumericalMathHessianImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalControlledImportanceSampling[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalControlledImportanceSampling, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalImportanceSampling[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalImportanceSampling, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalSimulation[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalSimulation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__NormalCopula[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__NormalCopula, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__NormalCopulaFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__NormalCopulaFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Stat__Full[] = {{&_swigt__p_OpenTURNS__Base__Stat__Full, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Optim__AbdoRackwitz[] = {{&_swigt__p_OpenTURNS__Base__Optim__AbdoRackwitz, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Stat__LowDiscrepancySequenceImplementation[] = {{&_swigt__p_OpenTURNS__Base__Stat__LowDiscrepancySequenceImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__StudentFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__StudentFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalBasis[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalBasis, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__NoNumericalMathHessianImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__NoNumericalMathHessianImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__HistogramPair[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__HistogramPair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__HistogramFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__HistogramFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Histogram[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Histogram, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__UserDefinedPair[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__UserDefinedPair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__UserDefinedFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__UserDefinedFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__BernoulliFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__BernoulliFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Bernoulli[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Bernoulli, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__BinomialFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__BinomialFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Mixture[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Mixture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__ExponentialFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__ExponentialFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Exponential[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Exponential, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Optim__TNCSpecificParameters[] = {{&_swigt__p_OpenTURNS__Base__Optim__TNCSpecificParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Optim__SQPSpecificParameters[] = {{&_swigt__p_OpenTURNS__Base__Optim__SQPSpecificParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__MediumSafe[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__MediumSafe, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Model__CopulaImplementation[] = {{&_swigt__p_OpenTURNS__Uncertainty__Model__CopulaImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__LHSExperiment[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__LHSExperiment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__InverseNormal[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__InverseNormal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__DirichletFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__DirichletFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Dirichlet[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Dirichlet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Optim__NearestPointAlgorithm[] = {{&_swigt__p_OpenTURNS__Base__Optim__NearestPointAlgorithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Algo__FittingAlgorithm[] = {{&_swigt__p_OpenTURNS__Base__Algo__FittingAlgorithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Algo__ApproximationAlgorithm[] = {{&_swigt__p_OpenTURNS__Base__Algo__ApproximationAlgorithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Solver__Bisection[] = {{&_swigt__p_OpenTURNS__Base__Solver__Bisection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Model__Event[] = {{&_swigt__p_OpenTURNS__Uncertainty__Model__Event, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Model__ConstantRandomVector[] = {{&_swigt__p_OpenTURNS__Uncertainty__Model__ConstantRandomVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__RandomDirection[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__RandomDirection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Normal[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Normal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__LogNormal[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__LogNormal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__LogNormalFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__LogNormalFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__DescriptionImplementation[] = {{&_swigt__p_OpenTURNS__Base__Type__DescriptionImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__ComposedNumericalMathEvaluationImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__ComposedNumericalMathEvaluationImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__ComputedNumericalMathEvaluationImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__ComputedNumericalMathEvaluationImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__LinearCombinationGradientImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__LinearCombinationGradientImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosAlgorithm[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosAlgorithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosResult[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Regression__LinearTaylor[] = {{&_swigt__p_OpenTURNS__Base__Regression__LinearTaylor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__ComposedNumericalMathFunction[] = {{&_swigt__p_OpenTURNS__Base__Func__ComposedNumericalMathFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Regression__QuadraticTaylor[] = {{&_swigt__p_OpenTURNS__Base__Regression__QuadraticTaylor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__HistogramPair_t[] = {{&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__HistogramPair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__Basis_t[] = {{&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__Basis_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPointWithDescription_t[] = {{&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPointWithDescription_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__UniVariatePolynomial_t[] = {{&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__UniVariatePolynomial_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__NumericalMathFunction_t[] = {{&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__NumericalMathFunction_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__UserDefinedPair_t[] = {{&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__UserDefinedPair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFamily_t[] = {{&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFamily_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__EnumerateFunction[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__EnumerateFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__Box[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__Box, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__Factorial[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__Factorial, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__QuadraticCumul[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__QuadraticCumul, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__LowDiscrepancyExperiment[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__LowDiscrepancyExperiment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__LeastSquaresStrategy[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__LeastSquaresStrategy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Regression__LinearLeastSquares[] = {{&_swigt__p_OpenTURNS__Base__Regression__LinearLeastSquares, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationHessian[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationHessian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationGradient[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationGradient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationEvaluation[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationEvaluation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__Less[] = {{&_swigt__p_OpenTURNS__Base__Common__Less, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__UniVariatePolynomialImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__UniVariatePolynomialImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Diff__FiniteDifferenceHessian[] = {{&_swigt__p_OpenTURNS__Base__Diff__FiniteDifferenceHessian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__LinearCombinationHessianImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__LinearCombinationHessianImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__ProductNumericalMathEvaluationImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__ProductNumericalMathEvaluationImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__NoNumericalMathEvaluationImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__NoNumericalMathEvaluationImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__NumericalMathEvaluationImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__NumericalMathEvaluationImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__UniformFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__UniformFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Regression__RegressionAlgorithm[] = {{&_swigt__p_OpenTURNS__Base__Regression__RegressionAlgorithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__LHS[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__LHS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__AnalyticalResult[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__AnalyticalResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Graph__Curve[] = {{&_swigt__p_OpenTURNS__Base__Graph__Curve, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__TriangularFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__TriangularFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Triangular[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Triangular, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__CleaningStrategy[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__CleaningStrategy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__SamplingStrategyImplementation[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SamplingStrategyImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__IntegrationStrategy[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__IntegrationStrategy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__SamplingStrategy[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SamplingStrategy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Graph__Contour[] = {{&_swigt__p_OpenTURNS__Base__Graph__Contour, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__NumericalMathFunction[] = {{&_swigt__p_OpenTURNS__Base__Func__NumericalMathFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__BetaFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__BetaFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalDirection[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalDirection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Diff__FiniteDifferenceStep[] = {{&_swigt__p_OpenTURNS__Base__Diff__FiniteDifferenceStep, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Algo__Lasso[] = {{&_swigt__p_OpenTURNS__Base__Algo__Lasso, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__IndependentCopula[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__IndependentCopula, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Beta[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Beta, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__Basis[] = {{&_swigt__p_OpenTURNS__Base__Func__Basis, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__JacobiFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__JacobiFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__ChiFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__ChiFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__RayleighFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__RayleighFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__Study[] = {{&_swigt__p_OpenTURNS__Base__Common__Study, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Laplace[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Laplace, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Model__RandomVectorImplementation[] = {{&_swigt__p_OpenTURNS__Uncertainty__Model__RandomVectorImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__ComparisonOperatorImplementation[] = {{&_swigt__p_OpenTURNS__Base__Common__ComparisonOperatorImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__FrankCopulaFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__FrankCopulaFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__FrankCopula[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__FrankCopula, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Algo__CorrectedLeaveOneOut[] = {{&_swigt__p_OpenTURNS__Base__Algo__CorrectedLeaveOneOut, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__LaplaceFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__LaplaceFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Stat__Compact[] = {{&_swigt__p_OpenTURNS__Base__Stat__Compact, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__HyperbolicAnisotropicEnumerateFunction[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__HyperbolicAnisotropicEnumerateFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Graph__Pie[] = {{&_swigt__p_OpenTURNS__Base__Graph__Pie, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__StorageManager[] = {{&_swigt__p_OpenTURNS__Base__Common__StorageManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__XMLStorageManager[] = {{&_swigt__p_OpenTURNS__Base__Common__XMLStorageManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__StandardDistributionPolynomialFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__StandardDistributionPolynomialFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__Equal[] = {{&_swigt__p_OpenTURNS__Base__Common__Equal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__ImportanceSamplingExperiment[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__ImportanceSamplingExperiment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__ProductNumericalMathFunction[] = {{&_swigt__p_OpenTURNS__Base__Func__ProductNumericalMathFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__ComposedCopula[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__ComposedCopula, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__FixedStrategy[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__FixedStrategy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__ImportanceSampling[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__ImportanceSampling, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__ComposedDistribution[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__ComposedDistribution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__TruncatedNormalFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__TruncatedNormalFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__TruncatedNormal[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__TruncatedNormal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__TruncatedDistribution[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__TruncatedDistribution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Model__DistributionFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Model__DistributionFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementation[] = {{&_swigt__p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementationResult[] = {{&_swigt__p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementationResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Optim__Cobyla[] = {{&_swigt__p_OpenTURNS__Base__Optim__Cobyla, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithm[] = {{&_swigt__p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__StrongMaximumTest[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__StrongMaximumTest, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__BasisSequenceFactory[] = {{&_swigt__p_OpenTURNS__Base__Func__BasisSequenceFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Diff__NonCenteredFiniteDifferenceGradient[] = {{&_swigt__p_OpenTURNS__Base__Diff__NonCenteredFiniteDifferenceGradient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__FixedExperiment[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__FixedExperiment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__Composite[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__Composite, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Stat__ConfidenceInterval[] = {{&_swigt__p_OpenTURNS__Base__Stat__ConfidenceInterval, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__ProductNumericalMathHessianImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__ProductNumericalMathHessianImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__GeometricFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__GeometricFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Geometric[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Geometric, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__WrapperDataVariable[] = {{&_swigt__p_OpenTURNS__Base__Func__WrapperDataVariable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__NonCentralChiSquare[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__NonCentralChiSquare, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__NonCentralStudent[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__NonCentralStudent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__NumericalMathFunctionImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__NumericalMathFunctionImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Weibull[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Weibull, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Solver__Brent[] = {{&_swigt__p_OpenTURNS__Base__Solver__Brent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Model__RandomVector[] = {{&_swigt__p_OpenTURNS__Uncertainty__Model__RandomVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__IndicatorNumericalMathEvaluationImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__IndicatorNumericalMathEvaluationImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__QuadraticNumericalMathEvaluationImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__QuadraticNumericalMathEvaluationImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarloResult[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarloResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarlo[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarlo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Graph__BarPlot[] = {{&_swigt__p_OpenTURNS__Base__Graph__BarPlot, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Diff__FiniteDifferenceStepImplementation[] = {{&_swigt__p_OpenTURNS__Base__Diff__FiniteDifferenceStepImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__LinearEnumerateFunction[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__LinearEnumerateFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalProductPolynomialFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalProductPolynomialFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Chi[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Chi, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__DirectionalSampling[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__DirectionalSampling, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__Tensor[] = {{&_swigt__p_OpenTURNS__Base__Type__Tensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__SymmetricTensor[] = {{&_swigt__p_OpenTURNS__Base__Type__SymmetricTensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__Description[] = {{&_swigt__p_OpenTURNS__Base__Type__Description, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__WrapperFile[] = {{&_swigt__p_OpenTURNS__Base__Func__WrapperFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Model__NonEllipticalDistribution[] = {{&_swigt__p_OpenTURNS__Uncertainty__Model__NonEllipticalDistribution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Multinomial[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Multinomial, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__MultinomialFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__MultinomialFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__LARLasso[] = {{&_swigt__p_OpenTURNS__Base__Func__LARLasso, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__LAR[] = {{&_swigt__p_OpenTURNS__Base__Func__LAR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__WrapperData[] = {{&_swigt__p_OpenTURNS__Base__Func__WrapperData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalFunctionFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalFunctionFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__NoNumericalMathGradientImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__NoNumericalMathGradientImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Optim__TNC[] = {{&_swigt__p_OpenTURNS__Base__Optim__TNC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__ProductPolynomialEvaluationImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__ProductPolynomialEvaluationImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__LinearCombinationEvaluationImplementation[] = {{&_swigt__p_OpenTURNS__Base__Func__LinearCombinationEvaluationImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__ExponentialRBF[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__ExponentialRBF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Poisson[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Poisson, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__ExperimentImplementation[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__ExperimentImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Regression__QuadraticLeastSquares[] = {{&_swigt__p_OpenTURNS__Base__Regression__QuadraticLeastSquares, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Stat__TestResult[] = {{&_swigt__p_OpenTURNS__Base__Stat__TestResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__GumbelFactory[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__GumbelFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__SORMResult[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SORMResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__FORMResult[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__FORMResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Student[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Student, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__LARFSZero[] = {{&_swigt__p_OpenTURNS__Base__Func__LARFSZero, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Model__ConditionalRandomVector[] = {{&_swigt__p_OpenTURNS__Uncertainty__Model__ConditionalRandomVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Optim__PenalizedLeastSquaresAlgorithm[] = {{&_swigt__p_OpenTURNS__Base__Optim__PenalizedLeastSquaresAlgorithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__GreaterOrEqual[] = {{&_swigt__p_OpenTURNS__Base__Common__GreaterOrEqual, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__LessOrEqual[] = {{&_swigt__p_OpenTURNS__Base__Common__LessOrEqual, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__ChebychevAlgorithm[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__ChebychevAlgorithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Stat__SobolSequence[] = {{&_swigt__p_OpenTURNS__Base__Stat__SobolSequence, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Stat__FaureSequence[] = {{&_swigt__p_OpenTURNS__Base__Stat__FaureSequence, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Stat__HaltonSequence[] = {{&_swigt__p_OpenTURNS__Base__Stat__HaltonSequence, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Stat__InverseHaltonSequence[] = {{&_swigt__p_OpenTURNS__Base__Stat__InverseHaltonSequence, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Stat__LowDiscrepancySequence[] = {{&_swigt__p_OpenTURNS__Base__Stat__LowDiscrepancySequence, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__BasisSequence[] = {{&_swigt__p_OpenTURNS__Base__Func__BasisSequence, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__SafeAndSlow[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SafeAndSlow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Gumbel[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Gumbel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Uniform[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Uniform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__Gamma[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__Gamma, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__ZipfMandelbrot[] = {{&_swigt__p_OpenTURNS__Uncertainty__Distribution__ZipfMandelbrot, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__Axial[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__Axial, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Model__EventRandomVectorImplementation[] = {{&_swigt__p_OpenTURNS__Uncertainty__Model__EventRandomVectorImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Model__UsualRandomVector[] = {{&_swigt__p_OpenTURNS__Uncertainty__Model__UsualRandomVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Algorithm__MonteCarloExperiment[] = {{&_swigt__p_OpenTURNS__Uncertainty__Algorithm__MonteCarloExperiment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Stat__LinearModel[] = {{&_swigt__p_OpenTURNS__Base__Stat__LinearModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Algo__LeavePOut[] = {{&_swigt__p_OpenTURNS__Base__Algo__LeavePOut, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__Object[] = {  {&_swigt__p_OpenTURNS__Base__Common__TypedCollectionInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceImplementation_t, _p_OpenTURNS__Base__Common__TypedCollectionInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedCollectionInterfaceObjectT_OpenTURNS__Base__Type__DescriptionImplementation_t, _p_OpenTURNS__Base__Common__TypedCollectionInterfaceObjectT_OpenTURNS__Base__Type__DescriptionImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__BootstrapExperiment, _p_OpenTURNS__Uncertainty__Algorithm__BootstrapExperimentTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__ArchimedeanCopula, _p_OpenTURNS__Uncertainty__Model__ArchimedeanCopulaTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__PolynomialKernel, _p_OpenTURNS__Uncertainty__Algorithm__PolynomialKernelTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Rayleigh, _p_OpenTURNS__Uncertainty__Distribution__RayleighTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__WeightedExperiment, _p_OpenTURNS__Uncertainty__Algorithm__WeightedExperimentTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Graph__Drawable, _p_OpenTURNS__Base__Graph__DrawableTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Burr, _p_OpenTURNS__Uncertainty__Distribution__BurrTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__WrapperParameter, _p_OpenTURNS__Base__Func__WrapperParameterTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__CobylaSpecificParameters, _p_OpenTURNS__Base__Optim__CobylaSpecificParametersTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__RosenblattEvaluation, _p_OpenTURNS__Uncertainty__Algorithm__RosenblattEvaluationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__StandardEvent, _p_OpenTURNS__Uncertainty__Model__StandardEventTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__Simulation, _p_OpenTURNS__Uncertainty__Algorithm__SimulationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__Distribution, _p_OpenTURNS__Uncertainty__Model__DistributionTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__RationalKernel, _p_OpenTURNS__Uncertainty__Algorithm__RationalKernelTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Algo__FittingAlgorithmImplementation, _p_OpenTURNS__Base__Algo__FittingAlgorithmImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__GumbelCopulaFactory, _p_OpenTURNS__Uncertainty__Distribution__GumbelCopulaFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__GumbelCopula, _p_OpenTURNS__Uncertainty__Distribution__GumbelCopulaTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_std__string_t, _p_OpenTURNS__Base__Type__PersistentCollectionT_std__string_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__Indices, _p_OpenTURNS__Base__Type__IndicesTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithm, _p_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithmTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithmImplementation, _p_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithmImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__DistributionImplementation, _p_OpenTURNS__Uncertainty__Model__DistributionImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, _p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategyImplementation, _p_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategyImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategy, _p_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategyTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__Analytical, _p_OpenTURNS__Uncertainty__Algorithm__AnalyticalTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__LinearNumericalMathEvaluationImplementation, _p_OpenTURNS__Base__Func__LinearNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Graph__Graph, _p_OpenTURNS__Base__Graph__GraphTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__LinearNumericalMathGradientImplementation, _p_OpenTURNS__Base__Func__LinearNumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__WrapperDataFile, _p_OpenTURNS__Base__Func__WrapperDataFileTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__NumericalPointWithDescription, _p_OpenTURNS__Base__Type__NumericalPointWithDescriptionTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__PoissonFactory, _p_OpenTURNS__Uncertainty__Distribution__PoissonFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__FunctionalChaosRandomVector, _p_OpenTURNS__Uncertainty__Model__FunctionalChaosRandomVectorTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseRosenblattEvaluation, _p_OpenTURNS__Uncertainty__Algorithm__InverseRosenblattEvaluationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaEvaluation, _p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaEvaluationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaGradient, _p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaGradientTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaHessian, _p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaHessianTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionEvaluation, _p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionEvaluationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionGradient, _p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionGradientTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionHessian, _p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionHessianTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__SQP, _p_OpenTURNS__Base__Optim__SQPTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Logistic, _p_OpenTURNS__Uncertainty__Distribution__LogisticTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__ComparisonOperator, _p_OpenTURNS__Base__Common__ComparisonOperatorTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__CompositeRandomVector, _p_OpenTURNS__Uncertainty__Model__CompositeRandomVectorTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Binomial, _p_OpenTURNS__Uncertainty__Distribution__BinomialTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__UniVariatePolynomial, _p_OpenTURNS__Base__Func__UniVariatePolynomialTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Arcsine, _p_OpenTURNS__Uncertainty__Distribution__ArcsineTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__GramSchmidtAlgorithm, _p_OpenTURNS__Uncertainty__Algorithm__GramSchmidtAlgorithmTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SequentialStrategy, _p_OpenTURNS__Uncertainty__Algorithm__SequentialStrategyTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SimulationResultImplementation, _p_OpenTURNS__Uncertainty__Algorithm__SimulationResultImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SimulationResult, _p_OpenTURNS__Uncertainty__Algorithm__SimulationResultTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__PersistentObject, _p_OpenTURNS__Base__Common__PersistentObjectTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__Object, 0, 0, 0},  {&_swigt__p_OpenTURNS__Base__Diff__ProportionalStep, _p_OpenTURNS__Base__Diff__ProportionalStepTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__InterfaceObject, _p_OpenTURNS__Base__Common__InterfaceObjectTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Diff__ConstantStep, _p_OpenTURNS__Base__Diff__ConstantStepTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__GammaFactory, _p_OpenTURNS__Uncertainty__Distribution__GammaFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__AbdoRackwitzSpecificParameters, _p_OpenTURNS__Base__Optim__AbdoRackwitzSpecificParametersTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ProductNumericalMathGradientImplementation, _p_OpenTURNS__Base__Func__ProductNumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SORM, _p_OpenTURNS__Uncertainty__Algorithm__SORMTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Trapezoidal, _p_OpenTURNS__Uncertainty__Distribution__TrapezoidalTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__TrapezoidalFactory, _p_OpenTURNS__Uncertainty__Distribution__TrapezoidalFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__MonteCarlo, _p_OpenTURNS__Uncertainty__Algorithm__MonteCarloTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ClaytonCopula, _p_OpenTURNS__Uncertainty__Distribution__ClaytonCopulaTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ClaytonCopulaFactory, _p_OpenTURNS__Uncertainty__Distribution__ClaytonCopulaFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementationResult, _p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementationResultTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementation, _p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Algo__ApproximationAlgorithmImplementation, _p_OpenTURNS__Base__Algo__ApproximationAlgorithmImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Solver__Secant, _p_OpenTURNS__Base__Solver__SecantTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__Greater, _p_OpenTURNS__Base__Common__GreaterTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__HistoryStrategyImplementation, _p_OpenTURNS__Base__Stat__HistoryStrategyImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__NumericalSampleImplementation, _p_OpenTURNS__Base__Stat__NumericalSampleImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ComposedNumericalMathHessianImplementation, _p_OpenTURNS__Base__Func__ComposedNumericalMathHessianImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ComputedNumericalMathHessianImplementation, _p_OpenTURNS__Base__Func__ComputedNumericalMathHessianImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ConstantNumericalMathHessianImplementation, _p_OpenTURNS__Base__Func__ConstantNumericalMathHessianImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__Last, _p_OpenTURNS__Base__Stat__LastTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__CorrelationMatrix, _p_OpenTURNS__Base__Stat__CorrelationMatrixTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__KernelSmoothing, _p_OpenTURNS__Uncertainty__Distribution__KernelSmoothingTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_unsigned_long_t, _p_OpenTURNS__Base__Type__PersistentCollectionT_unsigned_long_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaHessian, _p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaHessianTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaGradient, _p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaGradientTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaEvaluation, _p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaEvaluationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaEvaluation, _p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaEvaluationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaGradient, _p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaGradientTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaHessian, _p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaHessianTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionEvaluation, _p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionEvaluationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionGradient, _p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionGradientTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionHessian, _p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionHessianTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__SquareMatrix, _p_OpenTURNS__Base__Type__SquareMatrixTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__SymmetricMatrix, _p_OpenTURNS__Base__Type__SymmetricMatrixTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__CovarianceMatrix, _p_OpenTURNS__Base__Stat__CovarianceMatrixTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__IdentityMatrix, _p_OpenTURNS__Base__Type__IdentityMatrixTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__Matrix, _p_OpenTURNS__Base__Type__MatrixTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__FORM, _p_OpenTURNS__Uncertainty__Algorithm__FORMTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ArcsineFactory, _p_OpenTURNS__Uncertainty__Distribution__ArcsineFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SVMKernel, _p_OpenTURNS__Uncertainty__Algorithm__SVMKernelTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__NumericalMathGradientImplementation, _p_OpenTURNS__Base__Func__NumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SamplingStrategyImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SamplingStrategyImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__RootStrategyImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__RootStrategyImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SimulationResultImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SimulationResultImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SVMKernelImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SVMKernelImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategyImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategyImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Solver__SolverImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Solver__SolverImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Diff__FiniteDifferenceStepImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Diff__FiniteDifferenceStepImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceFactoryImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceFactoryImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__UniVariatePolynomialImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__UniVariatePolynomialImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__NumericalMathFunctionImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__NumericalMathFunctionImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__DescriptionImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__DescriptionImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Common__ComparisonOperatorImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Common__ComparisonOperatorImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__MatrixImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__MatrixImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__TensorImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__TensorImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__NumericalSampleImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__NumericalSampleImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__HistoryStrategyImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__HistoryStrategyImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__LowDiscrepancySequenceImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__LowDiscrepancySequenceImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Graph__DrawableImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Graph__DrawableImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Graph__GraphImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Graph__GraphImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Algo__FittingAlgorithmImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Algo__FittingAlgorithmImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Algo__ApproximationAlgorithmImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Algo__ApproximationAlgorithmImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__DistributionImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__DistributionImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__RandomVectorImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__RandomVectorImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__ExperimentImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__ExperimentImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFactory_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFactory_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithmImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithmImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthogonalFunctionFactory_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthogonalFunctionFactory_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategyImplementation_t, _p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategyImplementation_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__BasisSequenceImplementation, _p_OpenTURNS__Base__Func__BasisSequenceImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__Experiment, _p_OpenTURNS__Uncertainty__Algorithm__ExperimentTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__RandomMixture, _p_OpenTURNS__Uncertainty__Distribution__RandomMixtureTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__HermiteFactory, _p_OpenTURNS__Uncertainty__Algorithm__HermiteFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Graph__Cloud, _p_OpenTURNS__Base__Graph__CloudTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Solver__SolverImplementation, _p_OpenTURNS__Base__Solver__SolverImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__TensorImplementation, _p_OpenTURNS__Base__Type__TensorImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__MatrixImplementation, _p_OpenTURNS__Base__Type__MatrixImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Graph__DrawableImplementation, _p_OpenTURNS__Base__Graph__DrawableImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Graph__GraphImplementation, _p_OpenTURNS__Base__Graph__GraphImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaHessian, _p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaHessianTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaGradient, _p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaGradientTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaEvaluation, _p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaEvaluationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__LogisticFactory, _p_OpenTURNS__Uncertainty__Distribution__LogisticFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__NormalFactory, _p_OpenTURNS__Uncertainty__Distribution__NormalFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelImplementation, _p_OpenTURNS__Uncertainty__Algorithm__SVMKernelImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategyImplementation, _p_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategyImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Epanechnikov, _p_OpenTURNS__Uncertainty__Distribution__EpanechnikovTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__NearestPointChecker, _p_OpenTURNS__Base__Optim__NearestPointCheckerTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategy, _p_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategyTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__DiscreteDistribution, _p_OpenTURNS__Uncertainty__Model__DiscreteDistributionTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__MetaModelResult, _p_OpenTURNS__Uncertainty__Algorithm__MetaModelResultTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__KernelMixture, _p_OpenTURNS__Uncertainty__Distribution__KernelMixtureTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Solver__Solver, _p_OpenTURNS__Base__Solver__SolverTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__EllipticalDistribution, _p_OpenTURNS__Uncertainty__Model__EllipticalDistributionTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFactory, _p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomial, _p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__ContinuousDistribution, _p_OpenTURNS__Uncertainty__Model__ContinuousDistributionTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFamily, _p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFamilyTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ConstantNumericalMathGradientImplementation, _p_OpenTURNS__Base__Func__ConstantNumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ComputedNumericalMathGradientImplementation, _p_OpenTURNS__Base__Func__ComputedNumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ComposedNumericalMathGradientImplementation, _p_OpenTURNS__Base__Func__ComposedNumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__SklarCopula, _p_OpenTURNS__Uncertainty__Model__SklarCopulaTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Graph__Staircase, _p_OpenTURNS__Base__Graph__StaircaseTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__Copula, _p_OpenTURNS__Uncertainty__Model__CopulaTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__LegendreFactory, _p_OpenTURNS__Uncertainty__Algorithm__LegendreFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__LaguerreFactory, _p_OpenTURNS__Uncertainty__Algorithm__LaguerreFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__WeibullFactory, _p_OpenTURNS__Uncertainty__Distribution__WeibullFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NormalRBF, _p_OpenTURNS__Uncertainty__Algorithm__NormalRBFTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionEvaluation, _p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionEvaluationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionGradient, _p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionGradientTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionHessian, _p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionHessianTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ChiSquareFactory, _p_OpenTURNS__Uncertainty__Distribution__ChiSquareFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ChiSquare, _p_OpenTURNS__Uncertainty__Distribution__ChiSquareTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__LinearNumericalMathFunction, _p_OpenTURNS__Base__Func__LinearNumericalMathFunctionTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__WrapperFrameworkData, _p_OpenTURNS__Base__Func__WrapperFrameworkDataTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__RiskyAndFast, _p_OpenTURNS__Uncertainty__Algorithm__RiskyAndFastTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Diff__FiniteDifferenceGradient, _p_OpenTURNS__Base__Diff__FiniteDifferenceGradientTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__RootStrategyImplementation, _p_OpenTURNS__Uncertainty__Algorithm__RootStrategyImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__HistoryStrategy, _p_OpenTURNS__Base__Stat__HistoryStrategyTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__RootStrategy, _p_OpenTURNS__Uncertainty__Algorithm__RootStrategyTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__MetaModelAlgorithm, _p_OpenTURNS__Uncertainty__Algorithm__MetaModelAlgorithmTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Rice, _p_OpenTURNS__Uncertainty__Distribution__RiceTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__StratifiedExperiment, _p_OpenTURNS__Uncertainty__Algorithm__StratifiedExperimentTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceHessian, _p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceHessianTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceGradient, _p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceGradientTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Algo__LeastSquaresMetaModelSelection, _p_OpenTURNS__Base__Algo__LeastSquaresMetaModelSelectionTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__Null, _p_OpenTURNS__Base__Stat__NullTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__WrapperFunctionDescription, _p_OpenTURNS__Base__Func__WrapperFunctionDescriptionTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__NumericalMathHessianImplementation, _p_OpenTURNS__Base__Func__NumericalMathHessianImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalControlledImportanceSampling, _p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalControlledImportanceSamplingTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalImportanceSampling, _p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalImportanceSamplingTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalSimulation, _p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalSimulationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__NormalCopula, _p_OpenTURNS__Uncertainty__Distribution__NormalCopulaTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__NormalCopulaFactory, _p_OpenTURNS__Uncertainty__Distribution__NormalCopulaFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__Full, _p_OpenTURNS__Base__Stat__FullTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__AbdoRackwitz, _p_OpenTURNS__Base__Optim__AbdoRackwitzTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__LowDiscrepancySequenceImplementation, _p_OpenTURNS__Base__Stat__LowDiscrepancySequenceImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__StudentFactory, _p_OpenTURNS__Uncertainty__Distribution__StudentFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalBasis, _p_OpenTURNS__Uncertainty__Algorithm__OrthogonalBasisTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__NoNumericalMathHessianImplementation, _p_OpenTURNS__Base__Func__NoNumericalMathHessianImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__HistogramPair, _p_OpenTURNS__Uncertainty__Distribution__HistogramPairTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__HistogramFactory, _p_OpenTURNS__Uncertainty__Distribution__HistogramFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Histogram, _p_OpenTURNS__Uncertainty__Distribution__HistogramTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__UserDefinedPair, _p_OpenTURNS__Uncertainty__Distribution__UserDefinedPairTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__UserDefinedFactory, _p_OpenTURNS__Uncertainty__Distribution__UserDefinedFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__UserDefined, _p_OpenTURNS__Uncertainty__Distribution__UserDefinedTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__BernoulliFactory, _p_OpenTURNS__Uncertainty__Distribution__BernoulliFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Bernoulli, _p_OpenTURNS__Uncertainty__Distribution__BernoulliTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__BinomialFactory, _p_OpenTURNS__Uncertainty__Distribution__BinomialFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Mixture, _p_OpenTURNS__Uncertainty__Distribution__MixtureTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ExponentialFactory, _p_OpenTURNS__Uncertainty__Distribution__ExponentialFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Exponential, _p_OpenTURNS__Uncertainty__Distribution__ExponentialTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__TNCSpecificParameters, _p_OpenTURNS__Base__Optim__TNCSpecificParametersTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__SQPSpecificParameters, _p_OpenTURNS__Base__Optim__SQPSpecificParametersTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__MediumSafe, _p_OpenTURNS__Uncertainty__Algorithm__MediumSafeTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__CopulaImplementation, _p_OpenTURNS__Uncertainty__Model__CopulaImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__LHSExperiment, _p_OpenTURNS__Uncertainty__Algorithm__LHSExperimentTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__InverseNormal, _p_OpenTURNS__Uncertainty__Distribution__InverseNormalTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__DirichletFactory, _p_OpenTURNS__Uncertainty__Distribution__DirichletFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Dirichlet, _p_OpenTURNS__Uncertainty__Distribution__DirichletTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__NearestPointAlgorithm, _p_OpenTURNS__Base__Optim__NearestPointAlgorithmTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Algo__FittingAlgorithm, _p_OpenTURNS__Base__Algo__FittingAlgorithmTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Algo__ApproximationAlgorithm, _p_OpenTURNS__Base__Algo__ApproximationAlgorithmTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Solver__Bisection, _p_OpenTURNS__Base__Solver__BisectionTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__Event, _p_OpenTURNS__Uncertainty__Model__EventTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__ConstantRandomVector, _p_OpenTURNS__Uncertainty__Model__ConstantRandomVectorTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__RandomDirection, _p_OpenTURNS__Uncertainty__Algorithm__RandomDirectionTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Normal, _p_OpenTURNS__Uncertainty__Distribution__NormalTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__LogNormal, _p_OpenTURNS__Uncertainty__Distribution__LogNormalTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__LogNormalFactory, _p_OpenTURNS__Uncertainty__Distribution__LogNormalFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__DescriptionImplementation, _p_OpenTURNS__Base__Type__DescriptionImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ComposedNumericalMathEvaluationImplementation, _p_OpenTURNS__Base__Func__ComposedNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ComputedNumericalMathEvaluationImplementation, _p_OpenTURNS__Base__Func__ComputedNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__LinearCombinationGradientImplementation, _p_OpenTURNS__Base__Func__LinearCombinationGradientImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosAlgorithm, _p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosAlgorithmTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosResult, _p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosResultTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Regression__LinearTaylor, _p_OpenTURNS__Base__Regression__LinearTaylorTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ComposedNumericalMathFunction, _p_OpenTURNS__Base__Func__ComposedNumericalMathFunctionTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Regression__QuadraticTaylor, _p_OpenTURNS__Base__Regression__QuadraticTaylorTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__HistogramPair_t, _p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__HistogramPair_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__Basis_t, _p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__Basis_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPointWithDescription_t, _p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPointWithDescription_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPoint_t, _p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPoint_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__UniVariatePolynomial_t, _p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__UniVariatePolynomial_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__NumericalMathFunction_t, _p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__NumericalMathFunction_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__UserDefinedPair_t, _p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__UserDefinedPair_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFamily_t, _p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFamily_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__EnumerateFunction, _p_OpenTURNS__Uncertainty__Algorithm__EnumerateFunctionTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__Box, _p_OpenTURNS__Uncertainty__Algorithm__BoxTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__Factorial, _p_OpenTURNS__Uncertainty__Algorithm__FactorialTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__QuadraticCumul, _p_OpenTURNS__Uncertainty__Algorithm__QuadraticCumulTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__LowDiscrepancyExperiment, _p_OpenTURNS__Uncertainty__Algorithm__LowDiscrepancyExperimentTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__LeastSquaresStrategy, _p_OpenTURNS__Uncertainty__Algorithm__LeastSquaresStrategyTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Regression__LinearLeastSquares, _p_OpenTURNS__Base__Regression__LinearLeastSquaresTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationHessian, _p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationHessianTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationGradient, _p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationGradientTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationEvaluation, _p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationEvaluationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_double_t, _p_OpenTURNS__Base__Type__PersistentCollectionT_double_tTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__Less, _p_OpenTURNS__Base__Common__LessTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__UniVariatePolynomialImplementation, _p_OpenTURNS__Base__Func__UniVariatePolynomialImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Diff__FiniteDifferenceHessian, _p_OpenTURNS__Base__Diff__FiniteDifferenceHessianTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__LinearCombinationHessianImplementation, _p_OpenTURNS__Base__Func__LinearCombinationHessianImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ProductNumericalMathEvaluationImplementation, _p_OpenTURNS__Base__Func__ProductNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__NoNumericalMathEvaluationImplementation, _p_OpenTURNS__Base__Func__NoNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__NumericalMathEvaluationImplementation, _p_OpenTURNS__Base__Func__NumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__NumericalPoint, _p_OpenTURNS__Base__Type__NumericalPointTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__UniformFactory, _p_OpenTURNS__Uncertainty__Distribution__UniformFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Regression__RegressionAlgorithm, _p_OpenTURNS__Base__Regression__RegressionAlgorithmTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__LHS, _p_OpenTURNS__Uncertainty__Algorithm__LHSTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__AnalyticalResult, _p_OpenTURNS__Uncertainty__Algorithm__AnalyticalResultTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Graph__Curve, _p_OpenTURNS__Base__Graph__CurveTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__TriangularFactory, _p_OpenTURNS__Uncertainty__Distribution__TriangularFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Triangular, _p_OpenTURNS__Uncertainty__Distribution__TriangularTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__CleaningStrategy, _p_OpenTURNS__Uncertainty__Algorithm__CleaningStrategyTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SamplingStrategyImplementation, _p_OpenTURNS__Uncertainty__Algorithm__SamplingStrategyImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__IntegrationStrategy, _p_OpenTURNS__Uncertainty__Algorithm__IntegrationStrategyTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SamplingStrategy, _p_OpenTURNS__Uncertainty__Algorithm__SamplingStrategyTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Graph__Contour, _p_OpenTURNS__Base__Graph__ContourTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__NumericalMathFunction, _p_OpenTURNS__Base__Func__NumericalMathFunctionTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__BetaFactory, _p_OpenTURNS__Uncertainty__Distribution__BetaFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalDirection, _p_OpenTURNS__Uncertainty__Algorithm__OrthogonalDirectionTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Diff__FiniteDifferenceStep, _p_OpenTURNS__Base__Diff__FiniteDifferenceStepTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Algo__Lasso, _p_OpenTURNS__Base__Algo__LassoTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__IndependentCopula, _p_OpenTURNS__Uncertainty__Distribution__IndependentCopulaTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_IntegralCompoundPoisson__IntegralCompoundPoisson, _p_IntegralCompoundPoisson__IntegralCompoundPoissonTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Beta, _p_OpenTURNS__Uncertainty__Distribution__BetaTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__UsualDistribution, _p_OpenTURNS__Uncertainty__Model__UsualDistributionTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__Basis, _p_OpenTURNS__Base__Func__BasisTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__JacobiFactory, _p_OpenTURNS__Uncertainty__Algorithm__JacobiFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ChiFactory, _p_OpenTURNS__Uncertainty__Distribution__ChiFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__RayleighFactory, _p_OpenTURNS__Uncertainty__Distribution__RayleighFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__Study, _p_OpenTURNS__Base__Common__StudyTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Laplace, _p_OpenTURNS__Uncertainty__Distribution__LaplaceTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__RandomVectorImplementation, _p_OpenTURNS__Uncertainty__Model__RandomVectorImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__ComparisonOperatorImplementation, _p_OpenTURNS__Base__Common__ComparisonOperatorImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__FrankCopulaFactory, _p_OpenTURNS__Uncertainty__Distribution__FrankCopulaFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__FrankCopula, _p_OpenTURNS__Uncertainty__Distribution__FrankCopulaTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Algo__CorrectedLeaveOneOut, _p_OpenTURNS__Base__Algo__CorrectedLeaveOneOutTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__LaplaceFactory, _p_OpenTURNS__Uncertainty__Distribution__LaplaceFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__Compact, _p_OpenTURNS__Base__Stat__CompactTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_IntegralCompoundPoisson__IntegralUserDefined, _p_IntegralCompoundPoisson__IntegralUserDefinedTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__HyperbolicAnisotropicEnumerateFunction, _p_OpenTURNS__Uncertainty__Algorithm__HyperbolicAnisotropicEnumerateFunctionTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Graph__Pie, _p_OpenTURNS__Base__Graph__PieTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__StorageManager, _p_OpenTURNS__Base__Common__StorageManagerTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__XMLStorageManager, _p_OpenTURNS__Base__Common__XMLStorageManagerTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__StandardDistributionPolynomialFactory, _p_OpenTURNS__Uncertainty__Algorithm__StandardDistributionPolynomialFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__Equal, _p_OpenTURNS__Base__Common__EqualTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__NumericalSample, _p_OpenTURNS__Base__Stat__NumericalSampleTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__ImportanceSamplingExperiment, _p_OpenTURNS__Uncertainty__Algorithm__ImportanceSamplingExperimentTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ProductNumericalMathFunction, _p_OpenTURNS__Base__Func__ProductNumericalMathFunctionTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ComposedCopula, _p_OpenTURNS__Uncertainty__Distribution__ComposedCopulaTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__FixedStrategy, _p_OpenTURNS__Uncertainty__Algorithm__FixedStrategyTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__ImportanceSampling, _p_OpenTURNS__Uncertainty__Algorithm__ImportanceSamplingTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ComposedDistribution, _p_OpenTURNS__Uncertainty__Distribution__ComposedDistributionTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__TruncatedNormalFactory, _p_OpenTURNS__Uncertainty__Distribution__TruncatedNormalFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__TruncatedNormal, _p_OpenTURNS__Uncertainty__Distribution__TruncatedNormalTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__TruncatedDistribution, _p_OpenTURNS__Uncertainty__Distribution__TruncatedDistributionTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__DistributionFactory, _p_OpenTURNS__Uncertainty__Model__DistributionFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__BasisSequenceFactoryImplementation, _p_OpenTURNS__Base__Func__BasisSequenceFactoryImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementation, _p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementationResult, _p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementationResultTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__Cobyla, _p_OpenTURNS__Base__Optim__CobylaTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithm, _p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__StrongMaximumTest, _p_OpenTURNS__Uncertainty__Algorithm__StrongMaximumTestTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__BasisSequenceFactory, _p_OpenTURNS__Base__Func__BasisSequenceFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Diff__NonCenteredFiniteDifferenceGradient, _p_OpenTURNS__Base__Diff__NonCenteredFiniteDifferenceGradientTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__FixedExperiment, _p_OpenTURNS__Uncertainty__Algorithm__FixedExperimentTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__Composite, _p_OpenTURNS__Uncertainty__Algorithm__CompositeTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__ConfidenceInterval, _p_OpenTURNS__Base__Stat__ConfidenceIntervalTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__Interval, _p_OpenTURNS__Base__Type__IntervalTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ProductNumericalMathHessianImplementation, _p_OpenTURNS__Base__Func__ProductNumericalMathHessianImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__GeometricFactory, _p_OpenTURNS__Uncertainty__Distribution__GeometricFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Geometric, _p_OpenTURNS__Uncertainty__Distribution__GeometricTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__WrapperDataVariable, _p_OpenTURNS__Base__Func__WrapperDataVariableTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__NonCentralChiSquare, _p_OpenTURNS__Uncertainty__Distribution__NonCentralChiSquareTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__NonCentralStudent, _p_OpenTURNS__Uncertainty__Distribution__NonCentralStudentTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__NumericalMathFunctionImplementation, _p_OpenTURNS__Base__Func__NumericalMathFunctionImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Weibull, _p_OpenTURNS__Uncertainty__Distribution__WeibullTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Solver__Brent, _p_OpenTURNS__Base__Solver__BrentTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__RandomVector, _p_OpenTURNS__Uncertainty__Model__RandomVectorTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__IndicatorNumericalMathEvaluationImplementation, _p_OpenTURNS__Base__Func__IndicatorNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__QuadraticNumericalMathEvaluationImplementation, _p_OpenTURNS__Base__Func__QuadraticNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarloResult, _p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarloResultTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarlo, _p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarloTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Graph__BarPlot, _p_OpenTURNS__Base__Graph__BarPlotTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Diff__FiniteDifferenceStepImplementation, _p_OpenTURNS__Base__Diff__FiniteDifferenceStepImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_IntegralCompoundPoisson__IntegralUserDefinedFactory, _p_IntegralCompoundPoisson__IntegralUserDefinedFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__LinearEnumerateFunction, _p_OpenTURNS__Uncertainty__Algorithm__LinearEnumerateFunctionTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalProductPolynomialFactory, _p_OpenTURNS__Uncertainty__Algorithm__OrthogonalProductPolynomialFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Chi, _p_OpenTURNS__Uncertainty__Distribution__ChiTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__DirectionalSampling, _p_OpenTURNS__Uncertainty__Algorithm__DirectionalSamplingTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__Tensor, _p_OpenTURNS__Base__Type__TensorTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__SymmetricTensor, _p_OpenTURNS__Base__Type__SymmetricTensorTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__Description, _p_OpenTURNS__Base__Type__DescriptionTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__WrapperFile, _p_OpenTURNS__Base__Func__WrapperFileTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__NonEllipticalDistribution, _p_OpenTURNS__Uncertainty__Model__NonEllipticalDistributionTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Multinomial, _p_OpenTURNS__Uncertainty__Distribution__MultinomialTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__MultinomialFactory, _p_OpenTURNS__Uncertainty__Distribution__MultinomialFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__LARLasso, _p_OpenTURNS__Base__Func__LARLassoTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__LAR, _p_OpenTURNS__Base__Func__LARTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__WrapperData, _p_OpenTURNS__Base__Func__WrapperDataTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalFunctionFactory, _p_OpenTURNS__Uncertainty__Algorithm__OrthogonalFunctionFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__NoNumericalMathGradientImplementation, _p_OpenTURNS__Base__Func__NoNumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__TNC, _p_OpenTURNS__Base__Optim__TNCTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ProductPolynomialEvaluationImplementation, _p_OpenTURNS__Base__Func__ProductPolynomialEvaluationImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__LinearCombinationEvaluationImplementation, _p_OpenTURNS__Base__Func__LinearCombinationEvaluationImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__ExponentialRBF, _p_OpenTURNS__Uncertainty__Algorithm__ExponentialRBFTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Poisson, _p_OpenTURNS__Uncertainty__Distribution__PoissonTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__ExperimentImplementation, _p_OpenTURNS__Uncertainty__Algorithm__ExperimentImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Regression__QuadraticLeastSquares, _p_OpenTURNS__Base__Regression__QuadraticLeastSquaresTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__TestResult, _p_OpenTURNS__Base__Stat__TestResultTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__GumbelFactory, _p_OpenTURNS__Uncertainty__Distribution__GumbelFactoryTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SORMResult, _p_OpenTURNS__Uncertainty__Algorithm__SORMResultTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__FORMResult, _p_OpenTURNS__Uncertainty__Algorithm__FORMResultTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OT__Base__Optim__NearestPointChecker__Result, _p_OT__Base__Optim__NearestPointChecker__ResultTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Student, _p_OpenTURNS__Uncertainty__Distribution__StudentTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__LARFSZero, _p_OpenTURNS__Base__Func__LARFSZeroTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__ConditionalRandomVector, _p_OpenTURNS__Uncertainty__Model__ConditionalRandomVectorTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__PenalizedLeastSquaresAlgorithm, _p_OpenTURNS__Base__Optim__PenalizedLeastSquaresAlgorithmTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__GreaterOrEqual, _p_OpenTURNS__Base__Common__GreaterOrEqualTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__LessOrEqual, _p_OpenTURNS__Base__Common__LessOrEqualTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__ChebychevAlgorithm, _p_OpenTURNS__Uncertainty__Algorithm__ChebychevAlgorithmTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__SobolSequence, _p_OpenTURNS__Base__Stat__SobolSequenceTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__FaureSequence, _p_OpenTURNS__Base__Stat__FaureSequenceTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__HaltonSequence, _p_OpenTURNS__Base__Stat__HaltonSequenceTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__InverseHaltonSequence, _p_OpenTURNS__Base__Stat__InverseHaltonSequenceTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__LowDiscrepancySequence, _p_OpenTURNS__Base__Stat__LowDiscrepancySequenceTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__BasisSequence, _p_OpenTURNS__Base__Func__BasisSequenceTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SafeAndSlow, _p_OpenTURNS__Uncertainty__Algorithm__SafeAndSlowTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Gumbel, _p_OpenTURNS__Uncertainty__Distribution__GumbelTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Uniform, _p_OpenTURNS__Uncertainty__Distribution__UniformTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Gamma, _p_OpenTURNS__Uncertainty__Distribution__GammaTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ZipfMandelbrot, _p_OpenTURNS__Uncertainty__Distribution__ZipfMandelbrotTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OT__Base__Stat__CorrelationAnalysisSobolIndiceParameters, _p_OT__Base__Stat__CorrelationAnalysisSobolIndiceParametersTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__Axial, _p_OpenTURNS__Uncertainty__Algorithm__AxialTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__EventRandomVectorImplementation, _p_OpenTURNS__Uncertainty__Model__EventRandomVectorImplementationTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__UsualRandomVector, _p_OpenTURNS__Uncertainty__Model__UsualRandomVectorTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OT__Base__Stat__CorrelationAnalysisSobolIndiceResult, _p_OT__Base__Stat__CorrelationAnalysisSobolIndiceResultTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__MonteCarloExperiment, _p_OpenTURNS__Uncertainty__Algorithm__MonteCarloExperimentTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__LinearModel, _p_OpenTURNS__Base__Stat__LinearModelTo_p_OpenTURNS__Base__Common__Object, 0, 0},  {&_swigt__p_OpenTURNS__Base__Algo__LeavePOut, _p_OpenTURNS__Base__Algo__LeavePOutTo_p_OpenTURNS__Base__Common__Object, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Common__PersistentObject[] = {  {&_swigt__p_OpenTURNS__Uncertainty__Model__EllipticalDistribution, _p_OpenTURNS__Uncertainty__Model__EllipticalDistributionTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaHessian, _p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaHessianTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaGradient, _p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaGradientTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaEvaluation, _p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaEvaluationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaEvaluation, _p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaEvaluationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaGradient, _p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaGradientTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaHessian, _p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaHessianTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionEvaluation, _p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionEvaluationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionGradient, _p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionGradientTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionHessian, _p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionHessianTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__TestResult, _p_OpenTURNS__Base__Stat__TestResultTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalProductPolynomialFactory, _p_OpenTURNS__Uncertainty__Algorithm__OrthogonalProductPolynomialFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__MonteCarlo, _p_OpenTURNS__Uncertainty__Algorithm__MonteCarloTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Algo__LeastSquaresMetaModelSelection, _p_OpenTURNS__Base__Algo__LeastSquaresMetaModelSelectionTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Gamma, _p_OpenTURNS__Uncertainty__Distribution__GammaTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Weibull, _p_OpenTURNS__Uncertainty__Distribution__WeibullTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__Factorial, _p_OpenTURNS__Uncertainty__Algorithm__FactorialTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__RandomDirection, _p_OpenTURNS__Uncertainty__Algorithm__RandomDirectionTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Trapezoidal, _p_OpenTURNS__Uncertainty__Distribution__TrapezoidalTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__TrapezoidalFactory, _p_OpenTURNS__Uncertainty__Distribution__TrapezoidalFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__Interval, _p_OpenTURNS__Base__Type__IntervalTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__ConfidenceInterval, _p_OpenTURNS__Base__Stat__ConfidenceIntervalTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__UniformFactory, _p_OpenTURNS__Uncertainty__Distribution__UniformFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__Full, _p_OpenTURNS__Base__Stat__FullTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__InverseHaltonSequence, _p_OpenTURNS__Base__Stat__InverseHaltonSequenceTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__HaltonSequence, _p_OpenTURNS__Base__Stat__HaltonSequenceTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__FaureSequence, _p_OpenTURNS__Base__Stat__FaureSequenceTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__SobolSequence, _p_OpenTURNS__Base__Stat__SobolSequenceTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_IntegralCompoundPoisson__IntegralUserDefined, _p_IntegralCompoundPoisson__IntegralUserDefinedTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__NumericalMathHessianImplementation, _p_OpenTURNS__Base__Func__NumericalMathHessianImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationEvaluation, _p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationEvaluationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationGradient, _p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationGradientTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationHessian, _p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationHessianTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelImplementation, _p_OpenTURNS__Uncertainty__Algorithm__SVMKernelImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalFunctionFactory, _p_OpenTURNS__Uncertainty__Algorithm__OrthogonalFunctionFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Mixture, _p_OpenTURNS__Uncertainty__Distribution__MixtureTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__AbdoRackwitz, _p_OpenTURNS__Base__Optim__AbdoRackwitzTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__UniVariatePolynomialImplementation, _p_OpenTURNS__Base__Func__UniVariatePolynomialImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__NoNumericalMathGradientImplementation, _p_OpenTURNS__Base__Func__NoNumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__IntegrationStrategy, _p_OpenTURNS__Uncertainty__Algorithm__IntegrationStrategyTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__LinearNumericalMathEvaluationImplementation, _p_OpenTURNS__Base__Func__LinearNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__Composite, _p_OpenTURNS__Uncertainty__Algorithm__CompositeTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__TruncatedNormal, _p_OpenTURNS__Uncertainty__Distribution__TruncatedNormalTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__TruncatedNormalFactory, _p_OpenTURNS__Uncertainty__Distribution__TruncatedNormalFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__TruncatedDistribution, _p_OpenTURNS__Uncertainty__Distribution__TruncatedDistributionTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ArcsineFactory, _p_OpenTURNS__Uncertainty__Distribution__ArcsineFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__LinearModel, _p_OpenTURNS__Base__Stat__LinearModelTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ChiFactory, _p_OpenTURNS__Uncertainty__Distribution__ChiFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__JacobiFactory, _p_OpenTURNS__Uncertainty__Algorithm__JacobiFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__Less, _p_OpenTURNS__Base__Common__LessTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SamplingStrategyImplementation, _p_OpenTURNS__Uncertainty__Algorithm__SamplingStrategyImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__CleaningStrategy, _p_OpenTURNS__Uncertainty__Algorithm__CleaningStrategyTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__Compact, _p_OpenTURNS__Base__Stat__CompactTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Burr, _p_OpenTURNS__Uncertainty__Distribution__BurrTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Regression__LinearTaylor, _p_OpenTURNS__Base__Regression__LinearTaylorTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaEvaluation, _p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaEvaluationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaGradient, _p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaGradientTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaHessian, _p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaHessianTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__Basis, _p_OpenTURNS__Base__Func__BasisTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__StratifiedExperiment, _p_OpenTURNS__Uncertainty__Algorithm__StratifiedExperimentTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__InverseNormal, _p_OpenTURNS__Uncertainty__Distribution__InverseNormalTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__StrongMaximumTest, _p_OpenTURNS__Uncertainty__Algorithm__StrongMaximumTestTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OT__Base__Optim__NearestPointChecker__Result, _p_OT__Base__Optim__NearestPointChecker__ResultTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__FORMResult, _p_OpenTURNS__Uncertainty__Algorithm__FORMResultTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SORMResult, _p_OpenTURNS__Uncertainty__Algorithm__SORMResultTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__ContinuousDistribution, _p_OpenTURNS__Uncertainty__Model__ContinuousDistributionTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__Analytical, _p_OpenTURNS__Uncertainty__Algorithm__AnalyticalTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__ArchimedeanCopula, _p_OpenTURNS__Uncertainty__Model__ArchimedeanCopulaTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_unsigned_long_t, _p_OpenTURNS__Base__Type__PersistentCollectionT_unsigned_long_tTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__LaplaceFactory, _p_OpenTURNS__Uncertainty__Distribution__LaplaceFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__RandomMixture, _p_OpenTURNS__Uncertainty__Distribution__RandomMixtureTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Multinomial, _p_OpenTURNS__Uncertainty__Distribution__MultinomialTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__MultinomialFactory, _p_OpenTURNS__Uncertainty__Distribution__MultinomialFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__NearestPointChecker, _p_OpenTURNS__Base__Optim__NearestPointCheckerTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaEvaluation, _p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaEvaluationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaGradient, _p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaGradientTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaHessian, _p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaHessianTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionEvaluation, _p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionEvaluationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionGradient, _p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionGradientTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionHessian, _p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionHessianTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__MediumSafe, _p_OpenTURNS__Uncertainty__Algorithm__MediumSafeTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Rice, _p_OpenTURNS__Uncertainty__Distribution__RiceTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__AnalyticalResult, _p_OpenTURNS__Uncertainty__Algorithm__AnalyticalResultTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__RayleighFactory, _p_OpenTURNS__Uncertainty__Distribution__RayleighFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Graph__Staircase, _p_OpenTURNS__Base__Graph__StaircaseTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__PolynomialKernel, _p_OpenTURNS__Uncertainty__Algorithm__PolynomialKernelTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__HistogramPair, _p_OpenTURNS__Uncertainty__Distribution__HistogramPairTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Histogram, _p_OpenTURNS__Uncertainty__Distribution__HistogramTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__HistogramFactory, _p_OpenTURNS__Uncertainty__Distribution__HistogramFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__ChebychevAlgorithm, _p_OpenTURNS__Uncertainty__Algorithm__ChebychevAlgorithmTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__GammaFactory, _p_OpenTURNS__Uncertainty__Distribution__GammaFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__MonteCarloExperiment, _p_OpenTURNS__Uncertainty__Algorithm__MonteCarloExperimentTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__StudentFactory, _p_OpenTURNS__Uncertainty__Distribution__StudentFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__DirichletFactory, _p_OpenTURNS__Uncertainty__Distribution__DirichletFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Dirichlet, _p_OpenTURNS__Uncertainty__Distribution__DirichletTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalControlledImportanceSampling, _p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalControlledImportanceSamplingTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalImportanceSampling, _p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalImportanceSamplingTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalSimulation, _p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalSimulationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Laplace, _p_OpenTURNS__Uncertainty__Distribution__LaplaceTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Solver__SolverImplementation, _p_OpenTURNS__Base__Solver__SolverImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__TensorImplementation, _p_OpenTURNS__Base__Type__TensorImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__MatrixImplementation, _p_OpenTURNS__Base__Type__MatrixImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Graph__DrawableImplementation, _p_OpenTURNS__Base__Graph__DrawableImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Graph__GraphImplementation, _p_OpenTURNS__Base__Graph__GraphImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SORM, _p_OpenTURNS__Uncertainty__Algorithm__SORMTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__EventRandomVectorImplementation, _p_OpenTURNS__Uncertainty__Model__EventRandomVectorImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__UsualRandomVector, _p_OpenTURNS__Uncertainty__Model__UsualRandomVectorTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__PersistentObject, 0, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__LARFSZero, _p_OpenTURNS__Base__Func__LARFSZeroTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__LAR, _p_OpenTURNS__Base__Func__LARTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Regression__QuadraticTaylor, _p_OpenTURNS__Base__Regression__QuadraticTaylorTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__Null, _p_OpenTURNS__Base__Stat__NullTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__DirectionalSampling, _p_OpenTURNS__Uncertainty__Algorithm__DirectionalSamplingTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__NonEllipticalDistribution, _p_OpenTURNS__Uncertainty__Model__NonEllipticalDistributionTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__NumericalMathGradientImplementation, _p_OpenTURNS__Base__Func__NumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__MetaModelAlgorithm, _p_OpenTURNS__Uncertainty__Algorithm__MetaModelAlgorithmTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__NumericalPointWithDescription, _p_OpenTURNS__Base__Type__NumericalPointWithDescriptionTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__LinearNumericalMathGradientImplementation, _p_OpenTURNS__Base__Func__LinearNumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__HermiteFactory, _p_OpenTURNS__Uncertainty__Algorithm__HermiteFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__PenalizedLeastSquaresAlgorithm, _p_OpenTURNS__Base__Optim__PenalizedLeastSquaresAlgorithmTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__FixedStrategy, _p_OpenTURNS__Uncertainty__Algorithm__FixedStrategyTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__Cobyla, _p_OpenTURNS__Base__Optim__CobylaTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ProductNumericalMathHessianImplementation, _p_OpenTURNS__Base__Func__ProductNumericalMathHessianImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceHessian, _p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceHessianTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceGradient, _p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceGradientTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ProductNumericalMathGradientImplementation, _p_OpenTURNS__Base__Func__ProductNumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__UserDefinedPair, _p_OpenTURNS__Uncertainty__Distribution__UserDefinedPairTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__UserDefinedFactory, _p_OpenTURNS__Uncertainty__Distribution__UserDefinedFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__UserDefined, _p_OpenTURNS__Uncertainty__Distribution__UserDefinedTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__GreaterOrEqual, _p_OpenTURNS__Base__Common__GreaterOrEqualTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__LessOrEqual, _p_OpenTURNS__Base__Common__LessOrEqualTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ComposedNumericalMathHessianImplementation, _p_OpenTURNS__Base__Func__ComposedNumericalMathHessianImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ComputedNumericalMathHessianImplementation, _p_OpenTURNS__Base__Func__ComputedNumericalMathHessianImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ConstantNumericalMathHessianImplementation, _p_OpenTURNS__Base__Func__ConstantNumericalMathHessianImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__SQP, _p_OpenTURNS__Base__Optim__SQPTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Uniform, _p_OpenTURNS__Uncertainty__Distribution__UniformTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ProductPolynomialEvaluationImplementation, _p_OpenTURNS__Base__Func__ProductPolynomialEvaluationImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__LinearCombinationEvaluationImplementation, _p_OpenTURNS__Base__Func__LinearCombinationEvaluationImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__BasisSequenceImplementation, _p_OpenTURNS__Base__Func__BasisSequenceImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__FixedExperiment, _p_OpenTURNS__Uncertainty__Algorithm__FixedExperimentTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__LegendreFactory, _p_OpenTURNS__Uncertainty__Algorithm__LegendreFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__LaguerreFactory, _p_OpenTURNS__Uncertainty__Algorithm__LaguerreFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Triangular, _p_OpenTURNS__Uncertainty__Distribution__TriangularTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__TriangularFactory, _p_OpenTURNS__Uncertainty__Distribution__TriangularFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_IntegralCompoundPoisson__IntegralUserDefinedFactory, _p_IntegralCompoundPoisson__IntegralUserDefinedFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Gumbel, _p_OpenTURNS__Uncertainty__Distribution__GumbelTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Algo__CorrectedLeaveOneOut, _p_OpenTURNS__Base__Algo__CorrectedLeaveOneOutTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Diff__ProportionalStep, _p_OpenTURNS__Base__Diff__ProportionalStepTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__HistoryStrategyImplementation, _p_OpenTURNS__Base__Stat__HistoryStrategyImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__NumericalSampleImplementation, _p_OpenTURNS__Base__Stat__NumericalSampleImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosAlgorithm, _p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosAlgorithmTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosResult, _p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosResultTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Binomial, _p_OpenTURNS__Uncertainty__Distribution__BinomialTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OT__Base__Stat__CorrelationAnalysisSobolIndiceParameters, _p_OT__Base__Stat__CorrelationAnalysisSobolIndiceParametersTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OT__Base__Stat__CorrelationAnalysisSobolIndiceResult, _p_OT__Base__Stat__CorrelationAnalysisSobolIndiceResultTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__NormalCopulaFactory, _p_OpenTURNS__Uncertainty__Distribution__NormalCopulaFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__NormalCopula, _p_OpenTURNS__Uncertainty__Distribution__NormalCopulaTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__Axial, _p_OpenTURNS__Uncertainty__Algorithm__AxialTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Diff__ConstantStep, _p_OpenTURNS__Base__Diff__ConstantStepTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Graph__Pie, _p_OpenTURNS__Base__Graph__PieTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ClaytonCopula, _p_OpenTURNS__Uncertainty__Distribution__ClaytonCopulaTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ClaytonCopulaFactory, _p_OpenTURNS__Uncertainty__Distribution__ClaytonCopulaFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Logistic, _p_OpenTURNS__Uncertainty__Distribution__LogisticTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ProductNumericalMathEvaluationImplementation, _p_OpenTURNS__Base__Func__ProductNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__NormalFactory, _p_OpenTURNS__Uncertainty__Distribution__NormalFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Geometric, _p_OpenTURNS__Uncertainty__Distribution__GeometricTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__GeometricFactory, _p_OpenTURNS__Uncertainty__Distribution__GeometricFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__RationalKernel, _p_OpenTURNS__Uncertainty__Algorithm__RationalKernelTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategyImplementation, _p_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategyImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__SklarCopula, _p_OpenTURNS__Uncertainty__Model__SklarCopulaTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__KernelMixture, _p_OpenTURNS__Uncertainty__Distribution__KernelMixtureTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SimulationResultImplementation, _p_OpenTURNS__Uncertainty__Algorithm__SimulationResultImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SafeAndSlow, _p_OpenTURNS__Uncertainty__Algorithm__SafeAndSlowTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__NonCentralChiSquare, _p_OpenTURNS__Uncertainty__Distribution__NonCentralChiSquareTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__NonCentralStudent, _p_OpenTURNS__Uncertainty__Distribution__NonCentralStudentTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_IntegralCompoundPoisson__IntegralCompoundPoisson, _p_IntegralCompoundPoisson__IntegralCompoundPoissonTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ZipfMandelbrot, _p_OpenTURNS__Uncertainty__Distribution__ZipfMandelbrotTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ComposedNumericalMathGradientImplementation, _p_OpenTURNS__Base__Func__ComposedNumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ComputedNumericalMathGradientImplementation, _p_OpenTURNS__Base__Func__ComputedNumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ConstantNumericalMathGradientImplementation, _p_OpenTURNS__Base__Func__ConstantNumericalMathGradientImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__PoissonFactory, _p_OpenTURNS__Uncertainty__Distribution__PoissonFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__Equal, _p_OpenTURNS__Base__Common__EqualTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Regression__LinearLeastSquares, _p_OpenTURNS__Base__Regression__LinearLeastSquaresTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__LeastSquaresStrategy, _p_OpenTURNS__Uncertainty__Algorithm__LeastSquaresStrategyTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Epanechnikov, _p_OpenTURNS__Uncertainty__Distribution__EpanechnikovTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Regression__RegressionAlgorithm, _p_OpenTURNS__Base__Regression__RegressionAlgorithmTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__IndependentCopula, _p_OpenTURNS__Uncertainty__Distribution__IndependentCopulaTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__BinomialFactory, _p_OpenTURNS__Uncertainty__Distribution__BinomialFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__NormalRBF, _p_OpenTURNS__Uncertainty__Algorithm__NormalRBFTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__LowDiscrepancyExperiment, _p_OpenTURNS__Uncertainty__Algorithm__LowDiscrepancyExperimentTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__StandardDistributionPolynomialFactory, _p_OpenTURNS__Uncertainty__Algorithm__StandardDistributionPolynomialFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__LowDiscrepancySequenceImplementation, _p_OpenTURNS__Base__Stat__LowDiscrepancySequenceImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Graph__Cloud, _p_OpenTURNS__Base__Graph__CloudTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__ConstantRandomVector, _p_OpenTURNS__Uncertainty__Model__ConstantRandomVectorTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalDirection, _p_OpenTURNS__Uncertainty__Algorithm__OrthogonalDirectionTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__LHSExperiment, _p_OpenTURNS__Uncertainty__Algorithm__LHSExperimentTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__ExperimentImplementation, _p_OpenTURNS__Uncertainty__Algorithm__ExperimentImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Diff__NonCenteredFiniteDifferenceGradient, _p_OpenTURNS__Base__Diff__NonCenteredFiniteDifferenceGradientTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ComposedCopula, _p_OpenTURNS__Uncertainty__Distribution__ComposedCopulaTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__Indices, _p_OpenTURNS__Base__Type__IndicesTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ComposedDistribution, _p_OpenTURNS__Uncertainty__Distribution__ComposedDistributionTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Algo__LeavePOut, _p_OpenTURNS__Base__Algo__LeavePOutTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__DescriptionImplementation, _p_OpenTURNS__Base__Type__DescriptionImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__SQPSpecificParameters, _p_OpenTURNS__Base__Optim__SQPSpecificParametersTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__TNCSpecificParameters, _p_OpenTURNS__Base__Optim__TNCSpecificParametersTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__LogisticFactory, _p_OpenTURNS__Uncertainty__Distribution__LogisticFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__BetaFactory, _p_OpenTURNS__Uncertainty__Distribution__BetaFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__GumbelCopula, _p_OpenTURNS__Uncertainty__Distribution__GumbelCopulaTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__GumbelCopulaFactory, _p_OpenTURNS__Uncertainty__Distribution__GumbelCopulaFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__UsualDistribution, _p_OpenTURNS__Uncertainty__Model__UsualDistributionTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Algo__ApproximationAlgorithmImplementation, _p_OpenTURNS__Base__Algo__ApproximationAlgorithmImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementation, _p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementationResult, _p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementationResultTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Regression__QuadraticLeastSquares, _p_OpenTURNS__Base__Regression__QuadraticLeastSquaresTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ProductNumericalMathFunction, _p_OpenTURNS__Base__Func__ProductNumericalMathFunctionTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Solver__Brent, _p_OpenTURNS__Base__Solver__BrentTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__GumbelFactory, _p_OpenTURNS__Uncertainty__Distribution__GumbelFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Graph__Contour, _p_OpenTURNS__Base__Graph__ContourTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__FunctionalChaosRandomVector, _p_OpenTURNS__Uncertainty__Model__FunctionalChaosRandomVectorTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ComputedNumericalMathEvaluationImplementation, _p_OpenTURNS__Base__Func__ComputedNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ComposedNumericalMathEvaluationImplementation, _p_OpenTURNS__Base__Func__ComposedNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__CopulaImplementation, _p_OpenTURNS__Uncertainty__Model__CopulaImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__WrapperFile, _p_OpenTURNS__Base__Func__WrapperFileTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFamily_t, _p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFamily_tTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__UserDefinedPair_t, _p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__UserDefinedPair_tTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__NumericalMathFunction_t, _p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__NumericalMathFunction_tTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__UniVariatePolynomial_t, _p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__UniVariatePolynomial_tTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPoint_t, _p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPoint_tTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPointWithDescription_t, _p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPointWithDescription_tTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__Basis_t, _p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__Basis_tTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__HistogramPair_t, _p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__HistogramPair_tTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__RiskyAndFast, _p_OpenTURNS__Uncertainty__Algorithm__RiskyAndFastTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__QuadraticNumericalMathEvaluationImplementation, _p_OpenTURNS__Base__Func__QuadraticNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__IndicatorNumericalMathEvaluationImplementation, _p_OpenTURNS__Base__Func__IndicatorNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategyImplementation, _p_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategyImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__LHS, _p_OpenTURNS__Uncertainty__Algorithm__LHSTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__ConditionalRandomVector, _p_OpenTURNS__Uncertainty__Model__ConditionalRandomVectorTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Diff__FiniteDifferenceGradient, _p_OpenTURNS__Base__Diff__FiniteDifferenceGradientTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__DiscreteDistribution, _p_OpenTURNS__Uncertainty__Model__DiscreteDistributionTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__MetaModelResult, _p_OpenTURNS__Uncertainty__Algorithm__MetaModelResultTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Bernoulli, _p_OpenTURNS__Uncertainty__Distribution__BernoulliTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__BernoulliFactory, _p_OpenTURNS__Uncertainty__Distribution__BernoulliFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__Greater, _p_OpenTURNS__Base__Common__GreaterTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__NoNumericalMathEvaluationImplementation, _p_OpenTURNS__Base__Func__NoNumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithmImplementation, _p_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithmImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, _p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__DistributionImplementation, _p_OpenTURNS__Uncertainty__Model__DistributionImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__RootStrategyImplementation, _p_OpenTURNS__Uncertainty__Algorithm__RootStrategyImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__WeibullFactory, _p_OpenTURNS__Uncertainty__Distribution__WeibullFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Diff__FiniteDifferenceStepImplementation, _p_OpenTURNS__Base__Diff__FiniteDifferenceStepImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__NumericalPoint, _p_OpenTURNS__Base__Type__NumericalPointTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__Simulation, _p_OpenTURNS__Uncertainty__Algorithm__SimulationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__LinearCombinationGradientImplementation, _p_OpenTURNS__Base__Func__LinearCombinationGradientImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__Box, _p_OpenTURNS__Uncertainty__Algorithm__BoxTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_std__string_t, _p_OpenTURNS__Base__Type__PersistentCollectionT_std__string_tTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__BasisSequenceFactoryImplementation, _p_OpenTURNS__Base__Func__BasisSequenceFactoryImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Solver__Secant, _p_OpenTURNS__Base__Solver__SecantTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__LogNormal, _p_OpenTURNS__Uncertainty__Distribution__LogNormalTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Normal, _p_OpenTURNS__Uncertainty__Distribution__NormalTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__LogNormalFactory, _p_OpenTURNS__Uncertainty__Distribution__LogNormalFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Poisson, _p_OpenTURNS__Uncertainty__Distribution__PoissonTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__LARLasso, _p_OpenTURNS__Base__Func__LARLassoTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_double_t, _p_OpenTURNS__Base__Type__PersistentCollectionT_double_tTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ChiSquare, _p_OpenTURNS__Uncertainty__Distribution__ChiSquareTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ChiSquareFactory, _p_OpenTURNS__Uncertainty__Distribution__ChiSquareFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Exponential, _p_OpenTURNS__Uncertainty__Distribution__ExponentialTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ExponentialFactory, _p_OpenTURNS__Uncertainty__Distribution__ExponentialFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__FORM, _p_OpenTURNS__Uncertainty__Algorithm__FORMTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__CompositeRandomVector, _p_OpenTURNS__Uncertainty__Model__CompositeRandomVectorTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__ComposedNumericalMathFunction, _p_OpenTURNS__Base__Func__ComposedNumericalMathFunctionTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__RosenblattEvaluation, _p_OpenTURNS__Uncertainty__Algorithm__RosenblattEvaluationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__NumericalMathEvaluationImplementation, _p_OpenTURNS__Base__Func__NumericalMathEvaluationImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__KernelSmoothing, _p_OpenTURNS__Uncertainty__Distribution__KernelSmoothingTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__FrankCopula, _p_OpenTURNS__Uncertainty__Distribution__FrankCopulaTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__FrankCopulaFactory, _p_OpenTURNS__Uncertainty__Distribution__FrankCopulaFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__NumericalMathFunctionImplementation, _p_OpenTURNS__Base__Func__NumericalMathFunctionImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Common__ComparisonOperatorImplementation, _p_OpenTURNS__Base__Common__ComparisonOperatorImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__RandomVectorImplementation, _p_OpenTURNS__Uncertainty__Model__RandomVectorImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__QuadraticCumul, _p_OpenTURNS__Uncertainty__Algorithm__QuadraticCumulTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Rayleigh, _p_OpenTURNS__Uncertainty__Distribution__RayleighTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Algo__Lasso, _p_OpenTURNS__Base__Algo__LassoTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Chi, _p_OpenTURNS__Uncertainty__Distribution__ChiTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Beta, _p_OpenTURNS__Uncertainty__Distribution__BetaTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__AbdoRackwitzSpecificParameters, _p_OpenTURNS__Base__Optim__AbdoRackwitzSpecificParametersTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Solver__Bisection, _p_OpenTURNS__Base__Solver__BisectionTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__NoNumericalMathHessianImplementation, _p_OpenTURNS__Base__Func__NoNumericalMathHessianImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__GramSchmidtAlgorithm, _p_OpenTURNS__Uncertainty__Algorithm__GramSchmidtAlgorithmTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Graph__Curve, _p_OpenTURNS__Base__Graph__CurveTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SequentialStrategy, _p_OpenTURNS__Uncertainty__Algorithm__SequentialStrategyTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Graph__BarPlot, _p_OpenTURNS__Base__Graph__BarPlotTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__LinearEnumerateFunction, _p_OpenTURNS__Uncertainty__Algorithm__LinearEnumerateFunctionTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__InverseRosenblattEvaluation, _p_OpenTURNS__Uncertainty__Algorithm__InverseRosenblattEvaluationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__CobylaSpecificParameters, _p_OpenTURNS__Base__Optim__CobylaSpecificParametersTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__BootstrapExperiment, _p_OpenTURNS__Uncertainty__Algorithm__BootstrapExperimentTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__ExponentialRBF, _p_OpenTURNS__Uncertainty__Algorithm__ExponentialRBFTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__EnumerateFunction, _p_OpenTURNS__Uncertainty__Algorithm__EnumerateFunctionTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__HyperbolicAnisotropicEnumerateFunction, _p_OpenTURNS__Uncertainty__Algorithm__HyperbolicAnisotropicEnumerateFunctionTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementationResult, _p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementationResultTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementation, _p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Optim__TNC, _p_OpenTURNS__Base__Optim__TNCTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Student, _p_OpenTURNS__Uncertainty__Distribution__StudentTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Arcsine, _p_OpenTURNS__Uncertainty__Distribution__ArcsineTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarlo, _p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarloTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarloResult, _p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarloResultTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Algo__FittingAlgorithmImplementation, _p_OpenTURNS__Base__Algo__FittingAlgorithmImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__WeightedExperiment, _p_OpenTURNS__Uncertainty__Algorithm__WeightedExperimentTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomial, _p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFactory, _p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFactoryTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionHessian, _p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionHessianTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionGradient, _p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionGradientTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionEvaluation, _p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionEvaluationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__ImportanceSamplingExperiment, _p_OpenTURNS__Uncertainty__Algorithm__ImportanceSamplingExperimentTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Algorithm__ImportanceSampling, _p_OpenTURNS__Uncertainty__Algorithm__ImportanceSamplingTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Diff__FiniteDifferenceHessian, _p_OpenTURNS__Base__Diff__FiniteDifferenceHessianTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__LinearCombinationHessianImplementation, _p_OpenTURNS__Base__Func__LinearCombinationHessianImplementationTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__Last, _p_OpenTURNS__Base__Stat__LastTo_p_OpenTURNS__Base__Common__PersistentObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Func__BasisSequenceFactoryImplementation[] = {  {&_swigt__p_OpenTURNS__Base__Func__LARLasso, _p_OpenTURNS__Base__Func__LARLassoTo_p_OpenTURNS__Base__Func__BasisSequenceFactoryImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__BasisSequenceFactoryImplementation, 0, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__LAR, _p_OpenTURNS__Base__Func__LARTo_p_OpenTURNS__Base__Func__BasisSequenceFactoryImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Base__Func__LARFSZero, _p_OpenTURNS__Base__Func__LARFSZeroTo_p_OpenTURNS__Base__Func__BasisSequenceFactoryImplementation, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Graph__Graph[] = {  {&_swigt__p_OpenTURNS__Base__Graph__Graph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Stat__CovarianceMatrix[] = {  {&_swigt__p_OpenTURNS__Base__Stat__CorrelationMatrix, _p_OpenTURNS__Base__Stat__CorrelationMatrixTo_p_OpenTURNS__Base__Stat__CovarianceMatrix, 0, 0},  {&_swigt__p_OpenTURNS__Base__Stat__CovarianceMatrix, 0, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__IdentityMatrix, _p_OpenTURNS__Base__Type__IdentityMatrixTo_p_OpenTURNS__Base__Stat__CovarianceMatrix, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Stat__NumericalSample[] = {  {&_swigt__p_OpenTURNS__Base__Stat__NumericalSample, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__CollectionT_unsigned_long_t[] = {  {&_swigt__p_OpenTURNS__Base__Type__CollectionT_unsigned_long_t, 0, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__Indices, _p_OpenTURNS__Base__Type__IndicesTo_p_OpenTURNS__Base__Type__CollectionT_unsigned_long_t, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_unsigned_long_t, _p_OpenTURNS__Base__Type__PersistentCollectionT_unsigned_long_tTo_p_OpenTURNS__Base__Type__CollectionT_unsigned_long_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__Interval[] = {  {&_swigt__p_OpenTURNS__Base__Type__Interval, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__NumericalPoint[] = {  {&_swigt__p_OpenTURNS__Base__Type__NumericalPoint, 0, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__NumericalPointWithDescription, _p_OpenTURNS__Base__Type__NumericalPointWithDescriptionTo_p_OpenTURNS__Base__Type__NumericalPoint, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPoint_t[] = {  {&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPoint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Base__Type__PersistentCollectionT_double_t[] = {  {&_swigt__p_OpenTURNS__Base__Type__MatrixImplementation, _p_OpenTURNS__Base__Type__MatrixImplementationTo_p_OpenTURNS__Base__Type__PersistentCollectionT_double_t, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__TensorImplementation, _p_OpenTURNS__Base__Type__TensorImplementationTo_p_OpenTURNS__Base__Type__PersistentCollectionT_double_t, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__PersistentCollectionT_double_t, 0, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__NumericalPoint, _p_OpenTURNS__Base__Type__NumericalPointTo_p_OpenTURNS__Base__Type__PersistentCollectionT_double_t, 0, 0},  {&_swigt__p_OpenTURNS__Base__Type__NumericalPointWithDescription, _p_OpenTURNS__Base__Type__NumericalPointWithDescriptionTo_p_OpenTURNS__Base__Type__PersistentCollectionT_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__PointInSourceFile[] = {  {&_swigt__p_OpenTURNS__PointInSourceFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Distribution__UserDefined[] = {  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__UserDefined, 0, 0, 0},  {&_swigt__p_IntegralCompoundPoisson__IntegralUserDefined, _p_IntegralCompoundPoisson__IntegralUserDefinedTo_p_OpenTURNS__Uncertainty__Distribution__UserDefined, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Model__DiscreteDistribution[] = {  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__UserDefined, _p_OpenTURNS__Uncertainty__Distribution__UserDefinedTo_p_OpenTURNS__Uncertainty__Model__DiscreteDistribution, 0, 0},  {&_swigt__p_IntegralCompoundPoisson__IntegralUserDefined, _p_IntegralCompoundPoisson__IntegralUserDefinedTo_p_OpenTURNS__Uncertainty__Model__DiscreteDistribution, 0, 0},  {&_swigt__p_IntegralCompoundPoisson__IntegralCompoundPoisson, _p_IntegralCompoundPoisson__IntegralCompoundPoissonTo_p_OpenTURNS__Uncertainty__Model__DiscreteDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Multinomial, _p_OpenTURNS__Uncertainty__Distribution__MultinomialTo_p_OpenTURNS__Uncertainty__Model__DiscreteDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__DiscreteDistribution, 0, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Geometric, _p_OpenTURNS__Uncertainty__Distribution__GeometricTo_p_OpenTURNS__Uncertainty__Model__DiscreteDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ZipfMandelbrot, _p_OpenTURNS__Uncertainty__Distribution__ZipfMandelbrotTo_p_OpenTURNS__Uncertainty__Model__DiscreteDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Bernoulli, _p_OpenTURNS__Uncertainty__Distribution__BernoulliTo_p_OpenTURNS__Uncertainty__Model__DiscreteDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Binomial, _p_OpenTURNS__Uncertainty__Distribution__BinomialTo_p_OpenTURNS__Uncertainty__Model__DiscreteDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Poisson, _p_OpenTURNS__Uncertainty__Distribution__PoissonTo_p_OpenTURNS__Uncertainty__Model__DiscreteDistribution, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Model__DistributionImplementation[] = {  {&_swigt__p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ZipfMandelbrot, _p_OpenTURNS__Uncertainty__Distribution__ZipfMandelbrotTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Binomial, _p_OpenTURNS__Uncertainty__Distribution__BinomialTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Trapezoidal, _p_OpenTURNS__Uncertainty__Distribution__TrapezoidalTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_IntegralCompoundPoisson__IntegralCompoundPoisson, _p_IntegralCompoundPoisson__IntegralCompoundPoissonTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__ArchimedeanCopula, _p_OpenTURNS__Uncertainty__Model__ArchimedeanCopulaTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__EllipticalDistribution, _p_OpenTURNS__Uncertainty__Model__EllipticalDistributionTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__NonEllipticalDistribution, _p_OpenTURNS__Uncertainty__Model__NonEllipticalDistributionTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Uniform, _p_OpenTURNS__Uncertainty__Distribution__UniformTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__KernelMixture, _p_OpenTURNS__Uncertainty__Distribution__KernelMixtureTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__LogNormal, _p_OpenTURNS__Uncertainty__Distribution__LogNormalTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Normal, _p_OpenTURNS__Uncertainty__Distribution__NormalTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Poisson, _p_OpenTURNS__Uncertainty__Distribution__PoissonTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__IndependentCopula, _p_OpenTURNS__Uncertainty__Distribution__IndependentCopulaTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Burr, _p_OpenTURNS__Uncertainty__Distribution__BurrTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Multinomial, _p_OpenTURNS__Uncertainty__Distribution__MultinomialTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ClaytonCopula, _p_OpenTURNS__Uncertainty__Distribution__ClaytonCopulaTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__CopulaImplementation, _p_OpenTURNS__Uncertainty__Model__CopulaImplementationTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__NormalCopula, _p_OpenTURNS__Uncertainty__Distribution__NormalCopulaTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__RandomMixture, _p_OpenTURNS__Uncertainty__Distribution__RandomMixtureTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Arcsine, _p_OpenTURNS__Uncertainty__Distribution__ArcsineTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__SklarCopula, _p_OpenTURNS__Uncertainty__Model__SklarCopulaTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Mixture, _p_OpenTURNS__Uncertainty__Distribution__MixtureTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Chi, _p_OpenTURNS__Uncertainty__Distribution__ChiTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__ContinuousDistribution, _p_OpenTURNS__Uncertainty__Model__ContinuousDistributionTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Epanechnikov, _p_OpenTURNS__Uncertainty__Distribution__EpanechnikovTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__DiscreteDistribution, _p_OpenTURNS__Uncertainty__Model__DiscreteDistributionTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Rayleigh, _p_OpenTURNS__Uncertainty__Distribution__RayleighTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__UsualDistribution, _p_OpenTURNS__Uncertainty__Model__UsualDistributionTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Dirichlet, _p_OpenTURNS__Uncertainty__Distribution__DirichletTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__GumbelCopula, _p_OpenTURNS__Uncertainty__Distribution__GumbelCopulaTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__TruncatedNormal, _p_OpenTURNS__Uncertainty__Distribution__TruncatedNormalTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__TruncatedDistribution, _p_OpenTURNS__Uncertainty__Distribution__TruncatedDistributionTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_IntegralCompoundPoisson__IntegralUserDefined, _p_IntegralCompoundPoisson__IntegralUserDefinedTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Gamma, _p_OpenTURNS__Uncertainty__Distribution__GammaTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Weibull, _p_OpenTURNS__Uncertainty__Distribution__WeibullTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Gumbel, _p_OpenTURNS__Uncertainty__Distribution__GumbelTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__FrankCopula, _p_OpenTURNS__Uncertainty__Distribution__FrankCopulaTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ComposedCopula, _p_OpenTURNS__Uncertainty__Distribution__ComposedCopulaTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__NonCentralChiSquare, _p_OpenTURNS__Uncertainty__Distribution__NonCentralChiSquareTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__NonCentralStudent, _p_OpenTURNS__Uncertainty__Distribution__NonCentralStudentTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Beta, _p_OpenTURNS__Uncertainty__Distribution__BetaTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Histogram, _p_OpenTURNS__Uncertainty__Distribution__HistogramTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ComposedDistribution, _p_OpenTURNS__Uncertainty__Distribution__ComposedDistributionTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Geometric, _p_OpenTURNS__Uncertainty__Distribution__GeometricTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Triangular, _p_OpenTURNS__Uncertainty__Distribution__TriangularTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Rice, _p_OpenTURNS__Uncertainty__Distribution__RiceTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Laplace, _p_OpenTURNS__Uncertainty__Distribution__LaplaceTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Logistic, _p_OpenTURNS__Uncertainty__Distribution__LogisticTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Exponential, _p_OpenTURNS__Uncertainty__Distribution__ExponentialTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Bernoulli, _p_OpenTURNS__Uncertainty__Distribution__BernoulliTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Student, _p_OpenTURNS__Uncertainty__Distribution__StudentTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__UserDefined, _p_OpenTURNS__Uncertainty__Distribution__UserDefinedTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__InverseNormal, _p_OpenTURNS__Uncertainty__Distribution__InverseNormalTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ChiSquare, _p_OpenTURNS__Uncertainty__Distribution__ChiSquareTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementation, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory[] = {  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__NormalCopulaFactory, _p_OpenTURNS__Uncertainty__Distribution__NormalCopulaFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__LaplaceFactory, _p_OpenTURNS__Uncertainty__Distribution__LaplaceFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ChiFactory, _p_OpenTURNS__Uncertainty__Distribution__ChiFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__TrapezoidalFactory, _p_OpenTURNS__Uncertainty__Distribution__TrapezoidalFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__HistogramFactory, _p_OpenTURNS__Uncertainty__Distribution__HistogramFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__RayleighFactory, _p_OpenTURNS__Uncertainty__Distribution__RayleighFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__GeometricFactory, _p_OpenTURNS__Uncertainty__Distribution__GeometricFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__BetaFactory, _p_OpenTURNS__Uncertainty__Distribution__BetaFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__GumbelFactory, _p_OpenTURNS__Uncertainty__Distribution__GumbelFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ClaytonCopulaFactory, _p_OpenTURNS__Uncertainty__Distribution__ClaytonCopulaFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__WeibullFactory, _p_OpenTURNS__Uncertainty__Distribution__WeibullFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__DirichletFactory, _p_OpenTURNS__Uncertainty__Distribution__DirichletFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__TruncatedNormalFactory, _p_OpenTURNS__Uncertainty__Distribution__TruncatedNormalFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_IntegralCompoundPoisson__IntegralUserDefinedFactory, _p_IntegralCompoundPoisson__IntegralUserDefinedFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__StudentFactory, _p_OpenTURNS__Uncertainty__Distribution__StudentFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ArcsineFactory, _p_OpenTURNS__Uncertainty__Distribution__ArcsineFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__PoissonFactory, _p_OpenTURNS__Uncertainty__Distribution__PoissonFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__NormalFactory, _p_OpenTURNS__Uncertainty__Distribution__NormalFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__FrankCopulaFactory, _p_OpenTURNS__Uncertainty__Distribution__FrankCopulaFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__UniformFactory, _p_OpenTURNS__Uncertainty__Distribution__UniformFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ChiSquareFactory, _p_OpenTURNS__Uncertainty__Distribution__ChiSquareFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__MultinomialFactory, _p_OpenTURNS__Uncertainty__Distribution__MultinomialFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__BernoulliFactory, _p_OpenTURNS__Uncertainty__Distribution__BernoulliFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__TriangularFactory, _p_OpenTURNS__Uncertainty__Distribution__TriangularFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__UserDefinedFactory, _p_OpenTURNS__Uncertainty__Distribution__UserDefinedFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__GumbelCopulaFactory, _p_OpenTURNS__Uncertainty__Distribution__GumbelCopulaFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__LogNormalFactory, _p_OpenTURNS__Uncertainty__Distribution__LogNormalFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__LogisticFactory, _p_OpenTURNS__Uncertainty__Distribution__LogisticFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__GammaFactory, _p_OpenTURNS__Uncertainty__Distribution__GammaFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ExponentialFactory, _p_OpenTURNS__Uncertainty__Distribution__ExponentialFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__BinomialFactory, _p_OpenTURNS__Uncertainty__Distribution__BinomialFactoryTo_p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenTURNS__Uncertainty__Model__UsualDistribution[] = {  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ZipfMandelbrot, _p_OpenTURNS__Uncertainty__Distribution__ZipfMandelbrotTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Binomial, _p_OpenTURNS__Uncertainty__Distribution__BinomialTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Trapezoidal, _p_OpenTURNS__Uncertainty__Distribution__TrapezoidalTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_IntegralCompoundPoisson__IntegralCompoundPoisson, _p_IntegralCompoundPoisson__IntegralCompoundPoissonTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__ArchimedeanCopula, _p_OpenTURNS__Uncertainty__Model__ArchimedeanCopulaTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__EllipticalDistribution, _p_OpenTURNS__Uncertainty__Model__EllipticalDistributionTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__NonEllipticalDistribution, _p_OpenTURNS__Uncertainty__Model__NonEllipticalDistributionTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Uniform, _p_OpenTURNS__Uncertainty__Distribution__UniformTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__KernelMixture, _p_OpenTURNS__Uncertainty__Distribution__KernelMixtureTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__LogNormal, _p_OpenTURNS__Uncertainty__Distribution__LogNormalTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Normal, _p_OpenTURNS__Uncertainty__Distribution__NormalTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Poisson, _p_OpenTURNS__Uncertainty__Distribution__PoissonTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__IndependentCopula, _p_OpenTURNS__Uncertainty__Distribution__IndependentCopulaTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Burr, _p_OpenTURNS__Uncertainty__Distribution__BurrTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Multinomial, _p_OpenTURNS__Uncertainty__Distribution__MultinomialTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ClaytonCopula, _p_OpenTURNS__Uncertainty__Distribution__ClaytonCopulaTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__CopulaImplementation, _p_OpenTURNS__Uncertainty__Model__CopulaImplementationTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__NormalCopula, _p_OpenTURNS__Uncertainty__Distribution__NormalCopulaTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Arcsine, _p_OpenTURNS__Uncertainty__Distribution__ArcsineTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__SklarCopula, _p_OpenTURNS__Uncertainty__Model__SklarCopulaTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Chi, _p_OpenTURNS__Uncertainty__Distribution__ChiTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__ContinuousDistribution, _p_OpenTURNS__Uncertainty__Model__ContinuousDistributionTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Epanechnikov, _p_OpenTURNS__Uncertainty__Distribution__EpanechnikovTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__DiscreteDistribution, _p_OpenTURNS__Uncertainty__Model__DiscreteDistributionTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Rayleigh, _p_OpenTURNS__Uncertainty__Distribution__RayleighTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Dirichlet, _p_OpenTURNS__Uncertainty__Distribution__DirichletTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__GumbelCopula, _p_OpenTURNS__Uncertainty__Distribution__GumbelCopulaTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__TruncatedDistribution, _p_OpenTURNS__Uncertainty__Distribution__TruncatedDistributionTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__TruncatedNormal, _p_OpenTURNS__Uncertainty__Distribution__TruncatedNormalTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_IntegralCompoundPoisson__IntegralUserDefined, _p_IntegralCompoundPoisson__IntegralUserDefinedTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Gamma, _p_OpenTURNS__Uncertainty__Distribution__GammaTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Weibull, _p_OpenTURNS__Uncertainty__Distribution__WeibullTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Gumbel, _p_OpenTURNS__Uncertainty__Distribution__GumbelTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__FrankCopula, _p_OpenTURNS__Uncertainty__Distribution__FrankCopulaTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ComposedCopula, _p_OpenTURNS__Uncertainty__Distribution__ComposedCopulaTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__NonCentralChiSquare, _p_OpenTURNS__Uncertainty__Distribution__NonCentralChiSquareTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__NonCentralStudent, _p_OpenTURNS__Uncertainty__Distribution__NonCentralStudentTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Beta, _p_OpenTURNS__Uncertainty__Distribution__BetaTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Histogram, _p_OpenTURNS__Uncertainty__Distribution__HistogramTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Geometric, _p_OpenTURNS__Uncertainty__Distribution__GeometricTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Triangular, _p_OpenTURNS__Uncertainty__Distribution__TriangularTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Rice, _p_OpenTURNS__Uncertainty__Distribution__RiceTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Laplace, _p_OpenTURNS__Uncertainty__Distribution__LaplaceTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Logistic, _p_OpenTURNS__Uncertainty__Distribution__LogisticTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Exponential, _p_OpenTURNS__Uncertainty__Distribution__ExponentialTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Bernoulli, _p_OpenTURNS__Uncertainty__Distribution__BernoulliTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__Student, _p_OpenTURNS__Uncertainty__Distribution__StudentTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__UserDefined, _p_OpenTURNS__Uncertainty__Distribution__UserDefinedTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__InverseNormal, _p_OpenTURNS__Uncertainty__Distribution__InverseNormalTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},  {&_swigt__p_OpenTURNS__Uncertainty__Distribution__ChiSquare, _p_OpenTURNS__Uncertainty__Distribution__ChiSquareTo_p_OpenTURNS__Uncertainty__Model__UsualDistribution, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OptimizationProblem[] = {  {&_swigt__p_OptimizationProblem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OutOfBoundException[] = {  {&_swigt__p_OutOfBoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PersistentObject[] = {  {&_swigt__p_PersistentObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Poisson[] = {  {&_swigt__p_Poisson, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PolynomialCollection[] = {  {&_swigt__p_PolynomialCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PolynomialFamilyCollection[] = {  {&_swigt__p_PolynomialFamilyCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PolynomialFamilyPersistentCollection[] = {  {&_swigt__p_PolynomialFamilyPersistentCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PolynomialPersistentCollection[] = {  {&_swigt__p_PolynomialPersistentCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RandomVector[] = {  {&_swigt__p_RandomVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Result[] = {  {&_swigt__p_Result, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SQPSpecificParameters[] = {  {&_swigt__p_SQPSpecificParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SVMEvaluation[] = {  {&_swigt__p_SVMEvaluation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SVMKernel[] = {  {&_swigt__p_SVMKernel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SVMKernelRegressionEvaluation[] = {  {&_swigt__p_SVMKernelRegressionEvaluation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Sensitivity[] = {  {&_swigt__p_Sensitivity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Severity[] = {  {&_swigt__p_Severity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimplePoint[] = {  {&_swigt__p_SimplePoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SobolIndiceParameters[] = {  {&_swigt__p_SobolIndiceParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SobolIndiceResult[] = {  {&_swigt__p_SobolIndiceResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SobolSequence[] = {  {&_swigt__p_SobolSequence, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Solver[] = {  {&_swigt__p_Solver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpecFunc[] = {  {&_swigt__p_SpecFunc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SquareMatrix[] = {  {&_swigt__p_SquareMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StandardEvent[] = {  {&_swigt__p_StandardEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_State[] = {  {&_swigt__p_State, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StorageManager[] = {  {&_swigt__p_StorageManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StorageManagerImplementation[] = {  {&_swigt__p_StorageManagerImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SymmetricMatrix[] = {  {&_swigt__p_SymmetricMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SymmetricTensor[] = {  {&_swigt__p_SymmetricTensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TNCSpecificParameters[] = {  {&_swigt__p_TNCSpecificParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Tensor[] = {  {&_swigt__p_Tensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TestResult[] = {  {&_swigt__p_TestResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TestResultCollection[] = {  {&_swigt__p_TestResultCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UniVariatePolynomial[] = {  {&_swigt__p_UniVariatePolynomial, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UnsignedLongCollection[] = {  {&_swigt__p_UnsignedLongCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UnsignedLongPersistentCollection[] = {  {&_swigt__p_UnsignedLongPersistentCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UserDefinedPairCollection[] = {  {&_swigt__p_UserDefinedPairCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UserDefinedPairPersistentCollection[] = {  {&_swigt__p_UserDefinedPairPersistentCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Value[] = {  {&_swigt__p_Value, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ValueType[] = {  {&_swigt__p_ValueType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VariableListType[] = {  {&_swigt__p_VariableListType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WeightedExperimentImplementation[] = {  {&_swigt__p_WeightedExperimentImplementation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WrapperFileParsingException[] = {  {&_swigt__p_WrapperFileParsingException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WrapperInternalException[] = {  {&_swigt__p_WrapperInternalException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_internalIterator[] = {  {&_swigt__p_const_internalIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_iterator[] = {  {&_swigt__p_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reverse_iterator[] = {  {&_swigt__p_const_reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pointer_type[] = {  {&_swigt__p_pointer_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reverse_iterator[] = {  {&_swigt__p_reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AbdoRackwitzSpecificParameters,
  _swigc__p_Antecedent,
  _swigc__p_ArchimedeanCopula,
  _swigc__p_Basis,
  _swigc__p_BoolCollection,
  _swigc__p_BoolPersistentCollection,
  _swigc__p_BoundingBox,
  _swigc__p_CacheImplementation,
  _swigc__p_CacheType,
  _swigc__p_CobylaSpecificParameters,
  _swigc__p_Coefficients,
  _swigc__p_CoefficientsCollection,
  _swigc__p_CoefficientsPersistentCollection,
  _swigc__p_CommunicatorType,
  _swigc__p_Compact,
  _swigc__p_ComparisonOperator,
  _swigc__p_ConfidenceIntervalCollection,
  _swigc__p_ConfidenceIntervalPersistentCollection,
  _swigc__p_ConstantNumericalMathGradientImplementation,
  _swigc__p_ConstantNumericalMathHessianImplementation,
  _swigc__p_Copula,
  _swigc__p_CopulaCollection,
  _swigc__p_CopulaImplementation,
  _swigc__p_CopulaPersistentCollection,
  _swigc__p_CorrelationMatrix,
  _swigc__p_CovarianceMatrix,
  _swigc__p_Description,
  _swigc__p_DirectoryList,
  _swigc__p_DiscreteDistribution,
  _swigc__p_Distribution,
  _swigc__p_DistributionCollection,
  _swigc__p_DistributionFactory,
  _swigc__p_DistributionFactoryCollection,
  _swigc__p_DistributionImplementation,
  _swigc__p_DistributionImplementationFactory,
  _swigc__p_DistributionPersistentCollection,
  _swigc__p_DrawableCollection,
  _swigc__p_DrawablePersistentCollection,
  _swigc__p_ElementType,
  _swigc__p_EllipticalDistribution,
  _swigc__p_EvaluationImplementation,
  _swigc__p_Event,
  _swigc__p_Factory,
  _swigc__p_FileListType,
  _swigc__p_FileNotFoundException,
  _swigc__p_FiniteDifferenceStep,
  _swigc__p_Format,
  _swigc__p_FunctionalChaosResult,
  _swigc__p_GradientImplementation,
  _swigc__p_Graph,
  _swigc__p_GraphCollection,
  _swigc__p_HessianImplementation,
  _swigc__p_HistogramPairCollection,
  _swigc__p_HistogramPairPersistentCollection,
  _swigc__p_HistoryStrategy,
  _swigc__p_IdentityMatrix,
  _swigc__p_Implementation,
  _swigc__p_ImplementationAsPersistentObject,
  _swigc__p_ImplementationElementType,
  _swigc__p_ImplementationType,
  _swigc__p_Indices,
  _swigc__p_IntegralCompoundPoisson__IntegralCompoundPoisson,
  _swigc__p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__CovarianceMatrix,
  _swigc__p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__Graph,
  _swigc__p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalPoint,
  _swigc__p_IntegralCompoundPoisson__IntegralCompoundPoisson__IntegralCompoundPoisson__DiscreteDistribution__NumericalSample,
  _swigc__p_IntegralCompoundPoisson__IntegralUserDefined,
  _swigc__p_IntegralCompoundPoisson__IntegralUserDefinedFactory,
  _swigc__p_InternalException,
  _swigc__p_InternalFunction,
  _swigc__p_InternalGradient,
  _swigc__p_InternalHessian,
  _swigc__p_InternalType,
  _swigc__p_Interval,
  _swigc__p_InvalidArgumentException,
  _swigc__p_InvalidDimensionException,
  _swigc__p_InvalidRangeException,
  _swigc__p_InverseIsoProbabilisticTransformation,
  _swigc__p_IsoProbabilisticTransformation,
  _swigc__p_LabelMap,
  _swigc__p_Last,
  _swigc__p_LinearModel,
  _swigc__p_LinearNumericalMathEvaluationImplementation,
  _swigc__p_LowDiscrepancySequence,
  _swigc__p_Map,
  _swigc__p_MapElement,
  _swigc__p_Marginals,
  _swigc__p_Matrix,
  _swigc__p_MatrixImplementation,
  _swigc__p_MersenneTwister,
  _swigc__p_NearestPointAlgorithm,
  _swigc__p_NoWrapperFileFoundException,
  _swigc__p_NonEllipticalDistribution,
  _swigc__p_Normal,
  _swigc__p_NotDefinedException,
  _swigc__p_NotSymmetricDefinitePositiveException,
  _swigc__p_NotYetImplementedException,
  _swigc__p_NumericalComplexCollection,
  _swigc__p_NumericalComplexPersistentCollection,
  _swigc__p_NumericalMathEvaluationImplementation,
  _swigc__p_NumericalMathFunction,
  _swigc__p_NumericalMathFunctionCollection,
  _swigc__p_NumericalMathFunctionPersistentCollection,
  _swigc__p_NumericalMathGradientImplementation,
  _swigc__p_NumericalMathHessianImplementation,
  _swigc__p_NumericalPoint,
  _swigc__p_NumericalPointCollection,
  _swigc__p_NumericalPointPersistentCollection,
  _swigc__p_NumericalPointWithDescription,
  _swigc__p_NumericalPointWithDescriptionCollection,
  _swigc__p_NumericalSample,
  _swigc__p_NumericalScalarCache,
  _swigc__p_NumericalScalarCollection,
  _swigc__p_NumericalScalarPersistentCollection,
  _swigc__p_OT__Base__Optim__NearestPointChecker__Result,
  _swigc__p_OT__Base__Stat__CorrelationAnalysisSobolIndiceParameters,
  _swigc__p_OT__Base__Stat__CorrelationAnalysisSobolIndiceResult,
  _swigc__p_OT__Base__Stat__RandomGeneratorState,
  _swigc__p_OpenTURNS__Base__Algo__ApproximationAlgorithm,
  _swigc__p_OpenTURNS__Base__Algo__ApproximationAlgorithmImplementation,
  _swigc__p_OpenTURNS__Base__Algo__CorrectedLeaveOneOut,
  _swigc__p_OpenTURNS__Base__Algo__FittingAlgorithm,
  _swigc__p_OpenTURNS__Base__Algo__FittingAlgorithmImplementation,
  _swigc__p_OpenTURNS__Base__Algo__Lasso,
  _swigc__p_OpenTURNS__Base__Algo__LeastSquaresMetaModelSelection,
  _swigc__p_OpenTURNS__Base__Algo__LeavePOut,
  _swigc__p_OpenTURNS__Base__Common__ComparisonOperator,
  _swigc__p_OpenTURNS__Base__Common__ComparisonOperatorImplementation,
  _swigc__p_OpenTURNS__Base__Common__Equal,
  _swigc__p_OpenTURNS__Base__Common__Greater,
  _swigc__p_OpenTURNS__Base__Common__GreaterOrEqual,
  _swigc__p_OpenTURNS__Base__Common__InterfaceObject,
  _swigc__p_OpenTURNS__Base__Common__Less,
  _swigc__p_OpenTURNS__Base__Common__LessOrEqual,
  _swigc__p_OpenTURNS__Base__Common__Object,
  _swigc__p_OpenTURNS__Base__Common__PersistentObject,
  _swigc__p_OpenTURNS__Base__Common__StorageManager,
  _swigc__p_OpenTURNS__Base__Common__Study,
  _swigc__p_OpenTURNS__Base__Common__TypedCollectionInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedCollectionInterfaceObjectT_OpenTURNS__Base__Type__DescriptionImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Algo__ApproximationAlgorithmImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Algo__FittingAlgorithmImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Common__ComparisonOperatorImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Diff__FiniteDifferenceStepImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceFactoryImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__BasisSequenceImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__NumericalMathFunctionImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Func__UniVariatePolynomialImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Graph__DrawableImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Graph__GraphImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Solver__SolverImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__HistoryStrategyImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__LowDiscrepancySequenceImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Stat__NumericalSampleImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__DescriptionImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__MatrixImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Base__Type__TensorImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategyImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__ExperimentImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthogonalFunctionFactory_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFactory_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithmImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategyImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__RootStrategyImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SVMKernelImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SamplingStrategyImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Algorithm__SimulationResultImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__DistributionImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__TypedInterfaceObjectT_OpenTURNS__Uncertainty__Model__RandomVectorImplementation_t,
  _swigc__p_OpenTURNS__Base__Common__XMLStorageManager,
  _swigc__p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceGradient,
  _swigc__p_OpenTURNS__Base__Diff__CenteredFiniteDifferenceHessian,
  _swigc__p_OpenTURNS__Base__Diff__ConstantStep,
  _swigc__p_OpenTURNS__Base__Diff__FiniteDifferenceGradient,
  _swigc__p_OpenTURNS__Base__Diff__FiniteDifferenceHessian,
  _swigc__p_OpenTURNS__Base__Diff__FiniteDifferenceStep,
  _swigc__p_OpenTURNS__Base__Diff__FiniteDifferenceStepImplementation,
  _swigc__p_OpenTURNS__Base__Diff__NonCenteredFiniteDifferenceGradient,
  _swigc__p_OpenTURNS__Base__Diff__ProportionalStep,
  _swigc__p_OpenTURNS__Base__Func__Basis,
  _swigc__p_OpenTURNS__Base__Func__BasisSequence,
  _swigc__p_OpenTURNS__Base__Func__BasisSequenceFactory,
  _swigc__p_OpenTURNS__Base__Func__BasisSequenceFactoryImplementation,
  _swigc__p_OpenTURNS__Base__Func__BasisSequenceImplementation,
  _swigc__p_OpenTURNS__Base__Func__ComposedNumericalMathEvaluationImplementation,
  _swigc__p_OpenTURNS__Base__Func__ComposedNumericalMathFunction,
  _swigc__p_OpenTURNS__Base__Func__ComposedNumericalMathGradientImplementation,
  _swigc__p_OpenTURNS__Base__Func__ComposedNumericalMathHessianImplementation,
  _swigc__p_OpenTURNS__Base__Func__ComputedNumericalMathEvaluationImplementation,
  _swigc__p_OpenTURNS__Base__Func__ComputedNumericalMathGradientImplementation,
  _swigc__p_OpenTURNS__Base__Func__ComputedNumericalMathHessianImplementation,
  _swigc__p_OpenTURNS__Base__Func__ConstantNumericalMathGradientImplementation,
  _swigc__p_OpenTURNS__Base__Func__ConstantNumericalMathHessianImplementation,
  _swigc__p_OpenTURNS__Base__Func__IndicatorNumericalMathEvaluationImplementation,
  _swigc__p_OpenTURNS__Base__Func__LAR,
  _swigc__p_OpenTURNS__Base__Func__LARFSZero,
  _swigc__p_OpenTURNS__Base__Func__LARLasso,
  _swigc__p_OpenTURNS__Base__Func__LinearCombinationEvaluationImplementation,
  _swigc__p_OpenTURNS__Base__Func__LinearCombinationGradientImplementation,
  _swigc__p_OpenTURNS__Base__Func__LinearCombinationHessianImplementation,
  _swigc__p_OpenTURNS__Base__Func__LinearNumericalMathEvaluationImplementation,
  _swigc__p_OpenTURNS__Base__Func__LinearNumericalMathFunction,
  _swigc__p_OpenTURNS__Base__Func__LinearNumericalMathGradientImplementation,
  _swigc__p_OpenTURNS__Base__Func__NoNumericalMathEvaluationImplementation,
  _swigc__p_OpenTURNS__Base__Func__NoNumericalMathGradientImplementation,
  _swigc__p_OpenTURNS__Base__Func__NoNumericalMathHessianImplementation,
  _swigc__p_OpenTURNS__Base__Func__NumericalMathEvaluationImplementation,
  _swigc__p_OpenTURNS__Base__Func__NumericalMathFunction,
  _swigc__p_OpenTURNS__Base__Func__NumericalMathFunctionImplementation,
  _swigc__p_OpenTURNS__Base__Func__NumericalMathGradientImplementation,
  _swigc__p_OpenTURNS__Base__Func__NumericalMathHessianImplementation,
  _swigc__p_OpenTURNS__Base__Func__ProductNumericalMathEvaluationImplementation,
  _swigc__p_OpenTURNS__Base__Func__ProductNumericalMathFunction,
  _swigc__p_OpenTURNS__Base__Func__ProductNumericalMathGradientImplementation,
  _swigc__p_OpenTURNS__Base__Func__ProductNumericalMathHessianImplementation,
  _swigc__p_OpenTURNS__Base__Func__ProductPolynomialEvaluationImplementation,
  _swigc__p_OpenTURNS__Base__Func__QuadraticNumericalMathEvaluationImplementation,
  _swigc__p_OpenTURNS__Base__Func__UniVariatePolynomial,
  _swigc__p_OpenTURNS__Base__Func__UniVariatePolynomialImplementation,
  _swigc__p_OpenTURNS__Base__Func__WrapperData,
  _swigc__p_OpenTURNS__Base__Func__WrapperDataFile,
  _swigc__p_OpenTURNS__Base__Func__WrapperDataVariable,
  _swigc__p_OpenTURNS__Base__Func__WrapperFile,
  _swigc__p_OpenTURNS__Base__Func__WrapperFrameworkData,
  _swigc__p_OpenTURNS__Base__Func__WrapperFunctionDescription,
  _swigc__p_OpenTURNS__Base__Func__WrapperParameter,
  _swigc__p_OpenTURNS__Base__Graph__BarPlot,
  _swigc__p_OpenTURNS__Base__Graph__Cloud,
  _swigc__p_OpenTURNS__Base__Graph__Contour,
  _swigc__p_OpenTURNS__Base__Graph__Curve,
  _swigc__p_OpenTURNS__Base__Graph__Drawable,
  _swigc__p_OpenTURNS__Base__Graph__DrawableImplementation,
  _swigc__p_OpenTURNS__Base__Graph__Graph,
  _swigc__p_OpenTURNS__Base__Graph__GraphImplementation,
  _swigc__p_OpenTURNS__Base__Graph__Pie,
  _swigc__p_OpenTURNS__Base__Graph__Staircase,
  _swigc__p_OpenTURNS__Base__Optim__AbdoRackwitz,
  _swigc__p_OpenTURNS__Base__Optim__AbdoRackwitzSpecificParameters,
  _swigc__p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithm,
  _swigc__p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementation,
  _swigc__p_OpenTURNS__Base__Optim__BoundConstrainedAlgorithmImplementationResult,
  _swigc__p_OpenTURNS__Base__Optim__Cobyla,
  _swigc__p_OpenTURNS__Base__Optim__CobylaSpecificParameters,
  _swigc__p_OpenTURNS__Base__Optim__NearestPointAlgorithm,
  _swigc__p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementation,
  _swigc__p_OpenTURNS__Base__Optim__NearestPointAlgorithmImplementationResult,
  _swigc__p_OpenTURNS__Base__Optim__NearestPointChecker,
  _swigc__p_OpenTURNS__Base__Optim__PenalizedLeastSquaresAlgorithm,
  _swigc__p_OpenTURNS__Base__Optim__SQP,
  _swigc__p_OpenTURNS__Base__Optim__SQPSpecificParameters,
  _swigc__p_OpenTURNS__Base__Optim__TNC,
  _swigc__p_OpenTURNS__Base__Optim__TNCSpecificParameters,
  _swigc__p_OpenTURNS__Base__Regression__LinearLeastSquares,
  _swigc__p_OpenTURNS__Base__Regression__LinearTaylor,
  _swigc__p_OpenTURNS__Base__Regression__QuadraticLeastSquares,
  _swigc__p_OpenTURNS__Base__Regression__QuadraticTaylor,
  _swigc__p_OpenTURNS__Base__Regression__RegressionAlgorithm,
  _swigc__p_OpenTURNS__Base__Solver__Bisection,
  _swigc__p_OpenTURNS__Base__Solver__Brent,
  _swigc__p_OpenTURNS__Base__Solver__Secant,
  _swigc__p_OpenTURNS__Base__Solver__Solver,
  _swigc__p_OpenTURNS__Base__Solver__SolverImplementation,
  _swigc__p_OpenTURNS__Base__Stat__Compact,
  _swigc__p_OpenTURNS__Base__Stat__ConfidenceInterval,
  _swigc__p_OpenTURNS__Base__Stat__CorrelationMatrix,
  _swigc__p_OpenTURNS__Base__Stat__CovarianceMatrix,
  _swigc__p_OpenTURNS__Base__Stat__FaureSequence,
  _swigc__p_OpenTURNS__Base__Stat__Full,
  _swigc__p_OpenTURNS__Base__Stat__HaltonSequence,
  _swigc__p_OpenTURNS__Base__Stat__HistoryStrategy,
  _swigc__p_OpenTURNS__Base__Stat__HistoryStrategyImplementation,
  _swigc__p_OpenTURNS__Base__Stat__InverseHaltonSequence,
  _swigc__p_OpenTURNS__Base__Stat__Last,
  _swigc__p_OpenTURNS__Base__Stat__LinearModel,
  _swigc__p_OpenTURNS__Base__Stat__LowDiscrepancySequence,
  _swigc__p_OpenTURNS__Base__Stat__LowDiscrepancySequenceImplementation,
  _swigc__p_OpenTURNS__Base__Stat__Null,
  _swigc__p_OpenTURNS__Base__Stat__NumericalSample,
  _swigc__p_OpenTURNS__Base__Stat__NumericalSampleImplementation,
  _swigc__p_OpenTURNS__Base__Stat__SobolSequence,
  _swigc__p_OpenTURNS__Base__Stat__TestResult,
  _swigc__p_OpenTURNS__Base__Type__CollectionT_unsigned_long_t,
  _swigc__p_OpenTURNS__Base__Type__Description,
  _swigc__p_OpenTURNS__Base__Type__DescriptionImplementation,
  _swigc__p_OpenTURNS__Base__Type__IdentityMatrix,
  _swigc__p_OpenTURNS__Base__Type__Indices,
  _swigc__p_OpenTURNS__Base__Type__Interval,
  _swigc__p_OpenTURNS__Base__Type__Matrix,
  _swigc__p_OpenTURNS__Base__Type__MatrixImplementation,
  _swigc__p_OpenTURNS__Base__Type__NumericalPoint,
  _swigc__p_OpenTURNS__Base__Type__NumericalPointWithDescription,
  _swigc__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__Basis_t,
  _swigc__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__NumericalMathFunction_t,
  _swigc__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Func__UniVariatePolynomial_t,
  _swigc__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPointWithDescription_t,
  _swigc__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Base__Type__NumericalPoint_t,
  _swigc__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFamily_t,
  _swigc__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__HistogramPair_t,
  _swigc__p_OpenTURNS__Base__Type__PersistentCollectionT_OpenTURNS__Uncertainty__Distribution__UserDefinedPair_t,
  _swigc__p_OpenTURNS__Base__Type__PersistentCollectionT_double_t,
  _swigc__p_OpenTURNS__Base__Type__PersistentCollectionT_std__string_t,
  _swigc__p_OpenTURNS__Base__Type__PersistentCollectionT_unsigned_long_t,
  _swigc__p_OpenTURNS__Base__Type__SquareMatrix,
  _swigc__p_OpenTURNS__Base__Type__SymmetricMatrix,
  _swigc__p_OpenTURNS__Base__Type__SymmetricTensor,
  _swigc__p_OpenTURNS__Base__Type__Tensor,
  _swigc__p_OpenTURNS__Base__Type__TensorImplementation,
  _swigc__p_OpenTURNS__PointInSourceFile,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategy,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__AdaptiveStrategyImplementation,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__Analytical,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__AnalyticalResult,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__Axial,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__BootstrapExperiment,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__Box,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__ChebychevAlgorithm,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__CleaningStrategy,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__Composite,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__DirectionalSampling,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__EnumerateFunction,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__Experiment,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__ExperimentImplementation,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__ExponentialRBF,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__FORM,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__FORMResult,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__Factorial,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__FixedExperiment,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__FixedStrategy,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosAlgorithm,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__FunctionalChaosResult,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__GramSchmidtAlgorithm,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__HermiteFactory,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__HyperbolicAnisotropicEnumerateFunction,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__ImportanceSampling,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__ImportanceSamplingExperiment,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__IntegrationStrategy,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaEvaluation,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaGradient,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalCopulaHessian,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionEvaluation,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionGradient,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafEllipticalDistributionHessian,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaEvaluation,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaGradient,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__InverseNatafIndependentCopulaHessian,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__InverseRosenblattEvaluation,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__JacobiFactory,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__LHS,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__LHSExperiment,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__LaguerreFactory,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__LeastSquaresStrategy,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__LegendreFactory,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__LinearEnumerateFunction,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__LowDiscrepancyExperiment,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationEvaluation,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationGradient,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__MarginalTransformationHessian,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__MediumSafe,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__MetaModelAlgorithm,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__MetaModelResult,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__MonteCarlo,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__MonteCarloExperiment,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaEvaluation,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaGradient,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalCopulaHessian,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionEvaluation,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionGradient,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__NatafEllipticalDistributionHessian,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaEvaluation,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaGradient,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__NatafIndependentCopulaHessian,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__NormalRBF,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalBasis,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalDirection,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalFunctionFactory,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalProductPolynomialFactory,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomial,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFactory,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__OrthogonalUniVariatePolynomialFamily,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithm,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__OrthonormalizationAlgorithmImplementation,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__PolynomialKernel,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalControlledImportanceSampling,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalImportanceSampling,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__PostAnalyticalSimulation,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategy,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__ProjectionStrategyImplementation,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__QuadraticCumul,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarlo,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__QuasiMonteCarloResult,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__RandomDirection,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__RationalKernel,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__RiskyAndFast,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__RootStrategy,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__RootStrategyImplementation,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__RosenblattEvaluation,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__SORM,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__SORMResult,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__SVMKernel,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelImplementation,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionEvaluation,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionGradient,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__SVMKernelRegressionHessian,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__SafeAndSlow,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__SamplingStrategy,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__SamplingStrategyImplementation,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__SequentialStrategy,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__Simulation,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__SimulationResult,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__SimulationResultImplementation,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__StandardDistributionPolynomialFactory,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__StratifiedExperiment,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__StrongMaximumTest,
  _swigc__p_OpenTURNS__Uncertainty__Algorithm__WeightedExperiment,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Arcsine,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__ArcsineFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Bernoulli,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__BernoulliFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Beta,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__BetaFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Binomial,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__BinomialFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Burr,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Chi,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__ChiFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__ChiSquare,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__ChiSquareFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__ClaytonCopula,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__ClaytonCopulaFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__ComposedCopula,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__ComposedDistribution,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Dirichlet,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__DirichletFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Epanechnikov,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Exponential,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__ExponentialFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__FrankCopula,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__FrankCopulaFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Gamma,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__GammaFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Geometric,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__GeometricFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Gumbel,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__GumbelCopula,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__GumbelCopulaFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__GumbelFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Histogram,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__HistogramFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__HistogramPair,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__IndependentCopula,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__InverseNormal,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__KernelMixture,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__KernelSmoothing,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Laplace,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__LaplaceFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__LogNormal,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__LogNormalFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Logistic,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__LogisticFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Mixture,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Multinomial,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__MultinomialFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__NonCentralChiSquare,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__NonCentralStudent,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Normal,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__NormalCopula,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__NormalCopulaFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__NormalFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Poisson,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__PoissonFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__RandomMixture,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Rayleigh,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__RayleighFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Rice,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Student,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__StudentFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Trapezoidal,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__TrapezoidalFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Triangular,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__TriangularFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__TruncatedDistribution,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__TruncatedNormal,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__TruncatedNormalFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Uniform,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__UniformFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__UserDefined,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__UserDefinedFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__UserDefinedPair,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__Weibull,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__WeibullFactory,
  _swigc__p_OpenTURNS__Uncertainty__Distribution__ZipfMandelbrot,
  _swigc__p_OpenTURNS__Uncertainty__Model__ArchimedeanCopula,
  _swigc__p_OpenTURNS__Uncertainty__Model__CompositeRandomVector,
  _swigc__p_OpenTURNS__Uncertainty__Model__ConditionalRandomVector,
  _swigc__p_OpenTURNS__Uncertainty__Model__ConstantRandomVector,
  _swigc__p_OpenTURNS__Uncertainty__Model__ContinuousDistribution,
  _swigc__p_OpenTURNS__Uncertainty__Model__Copula,
  _swigc__p_OpenTURNS__Uncertainty__Model__CopulaImplementation,
  _swigc__p_OpenTURNS__Uncertainty__Model__DiscreteDistribution,
  _swigc__p_OpenTURNS__Uncertainty__Model__Distribution,
  _swigc__p_OpenTURNS__Uncertainty__Model__DistributionFactory,
  _swigc__p_OpenTURNS__Uncertainty__Model__DistributionImplementation,
  _swigc__p_OpenTURNS__Uncertainty__Model__DistributionImplementationFactory,
  _swigc__p_OpenTURNS__Uncertainty__Model__EllipticalDistribution,
  _swigc__p_OpenTURNS__Uncertainty__Model__Event,
  _swigc__p_OpenTURNS__Uncertainty__Model__EventRandomVectorImplementation,
  _swigc__p_OpenTURNS__Uncertainty__Model__FunctionalChaosRandomVector,
  _swigc__p_OpenTURNS__Uncertainty__Model__NonEllipticalDistribution,
  _swigc__p_OpenTURNS__Uncertainty__Model__RandomVector,
  _swigc__p_OpenTURNS__Uncertainty__Model__RandomVectorImplementation,
  _swigc__p_OpenTURNS__Uncertainty__Model__SklarCopula,
  _swigc__p_OpenTURNS__Uncertainty__Model__StandardEvent,
  _swigc__p_OpenTURNS__Uncertainty__Model__UsualDistribution,
  _swigc__p_OpenTURNS__Uncertainty__Model__UsualRandomVector,
  _swigc__p_OptimizationProblem,
  _swigc__p_OutOfBoundException,
  _swigc__p_PersistentObject,
  _swigc__p_Poisson,
  _swigc__p_PolynomialCollection,
  _swigc__p_PolynomialFamilyCollection,
  _swigc__p_PolynomialFamilyPersistentCollection,
  _swigc__p_PolynomialPersistentCollection,
  _swigc__p_RandomVector,
  _swigc__p_Result,
  _swigc__p_SQPSpecificParameters,
  _swigc__p_SVMEvaluation,
  _swigc__p_SVMKernel,
  _swigc__p_SVMKernelRegressionEvaluation,
  _swigc__p_Sensitivity,
  _swigc__p_Severity,
  _swigc__p_SimplePoint,
  _swigc__p_SobolIndiceParameters,
  _swigc__p_SobolIndiceResult,
  _swigc__p_SobolSequence,
  _swigc__p_Solver,
  _swigc__p_SpecFunc,
  _swigc__p_SquareMatrix,
  _swigc__p_StandardEvent,
  _swigc__p_State,
  _swigc__p_StorageManager,
  _swigc__p_StorageManagerImplementation,
  _swigc__p_SymmetricMatrix,
  _swigc__p_SymmetricTensor,
  _swigc__p_TNCSpecificParameters,
  _swigc__p_Tensor,
  _swigc__p_TestResult,
  _swigc__p_TestResultCollection,
  _swigc__p_UniVariatePolynomial,
  _swigc__p_UnsignedLongCollection,
  _swigc__p_UnsignedLongPersistentCollection,
  _swigc__p_UserDefinedPairCollection,
  _swigc__p_UserDefinedPairPersistentCollection,
  _swigc__p_Value,
  _swigc__p_ValueType,
  _swigc__p_VariableListType,
  _swigc__p_WeightedExperimentImplementation,
  _swigc__p_WrapperFileParsingException,
  _swigc__p_WrapperInternalException,
  _swigc__p_allocator_type,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_const_internalIterator,
  _swigc__p_const_iterator,
  _swigc__p_const_reverse_iterator,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_iterator,
  _swigc__p_key_type,
  _swigc__p_long,
  _swigc__p_mapped_type,
  _swigc__p_pointer_type,
  _swigc__p_reverse_iterator,
  _swigc__p_size_type,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__string,
  _swigc__p_unsigned_long,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;  
    if (!type_init) {
      const PyTypeObject tmp
      = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* Number of items in variable part (ob_size) */
#endif
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        (destructor) swig_varlink_dealloc,  /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      /* for Python 3 we already assigned ob_type in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
      varlink_type.ob_type = &PyType_Type;
#endif
      type_init = 1;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          size_t shift = (ci->ptype) - types;
          swig_type_info *ty = types_initial[shift];
          size_t ldoc = (c - methods[i].ml_doc);
          size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
          char *ndoc = (char*)malloc(ldoc + lptr + 10);
          if (ndoc) {
            char *buff = ndoc;
            void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
            if (ptr) {
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d;  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  SWIG_InstallConstants(d,swig_const_table);
  
  
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

