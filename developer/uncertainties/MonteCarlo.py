from openturns import *
s = 2.0
dist = Normal()
event = Event(CompositeRandomVector(SymbolicFunction(["x"], ["x"]), RandomVector(dist)), Greater(), s)
algo = ProbabilitySimulationAlgorithm(event, MonteCarloExperiment())
algo.setMaximumCoefficientOfVariation(0.001)
algo.setConvergenceStrategy(HistoryStrategy(Full()))
algo.setMaximumOuterSampling(10000)
algo.setBlockSize(1)
algo.run()
graph = algo.drawProbabilityConvergence()
bb = graph.getBoundingBox()
val = dist.computeComplementaryCDF(s)
data = Sample(0, 2)
data.add(Point([0, val]))
data.add(Point([bb.getUpperBound()[0], val]))
limit = Curve(data)
limit.setLegend("Theoretical limit")
limit.setColor("blue")
limit.setLineStyle("dashed")
graph.add(limit)
graph.draw("MonteCarloConvergence")
